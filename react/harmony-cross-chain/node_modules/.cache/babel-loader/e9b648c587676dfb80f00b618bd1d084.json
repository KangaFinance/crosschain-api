{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseProvider = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar types_1 = require(\"../types\");\n\nvar BaseProvider = function () {\n  function BaseProvider(url, reqMiddleware, resMiddleware) {\n    var _this = this;\n\n    if (reqMiddleware === void 0) {\n      reqMiddleware = new Map();\n    }\n\n    if (resMiddleware === void 0) {\n      resMiddleware = new Map();\n    }\n\n    this.middlewares = {\n      request: {\n        use: function (fn, match) {\n          if (match === void 0) {\n            match = '*';\n          }\n\n          _this.pushMiddleware(fn, types_1.MiddlewareType.REQ, match);\n        }\n      },\n      response: {\n        use: function (fn, match) {\n          if (match === void 0) {\n            match = '*';\n          }\n\n          _this.pushMiddleware(fn, types_1.MiddlewareType.RES, match);\n        }\n      }\n    };\n    this.reqMiddleware = new Map().set('*', []);\n    this.resMiddleware = new Map().set('*', []);\n    this.reqMiddleware = reqMiddleware;\n    this.resMiddleware = resMiddleware;\n    this.url = url;\n  }\n\n  BaseProvider.prototype.pushMiddleware = function (fn, type, match) {\n    if (type !== types_1.MiddlewareType.REQ && type !== types_1.MiddlewareType.RES) {\n      throw new Error('Please specify the type of middleware being added');\n    }\n\n    if (type === types_1.MiddlewareType.REQ) {\n      var current = this.reqMiddleware.get(match) || [];\n      this.reqMiddleware.set(match, tslib_1.__spread(current, [fn]));\n    } else {\n      var current = this.resMiddleware.get(match) || [];\n      this.resMiddleware.set(match, tslib_1.__spread(current, [fn]));\n    }\n  };\n\n  BaseProvider.prototype.getMiddleware = function (method) {\n    var e_1, _a, e_2, _b;\n\n    var requests = [];\n    var responses = [];\n\n    try {\n      for (var _c = tslib_1.__values(this.reqMiddleware.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = tslib_1.__read(_d.value, 2),\n            key = _e[0],\n            transformers = _e[1];\n\n        if (typeof key === 'string' && key !== '*' && key === method) {\n          requests.push.apply(requests, tslib_1.__spread(transformers));\n        }\n\n        if (key instanceof RegExp && key.test(method)) {\n          requests.push.apply(requests, tslib_1.__spread(transformers));\n        }\n\n        if (key === '*') {\n          requests.push.apply(requests, tslib_1.__spread(transformers));\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      for (var _f = tslib_1.__values(this.resMiddleware.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var _h = tslib_1.__read(_g.value, 2),\n            key = _h[0],\n            transformers = _h[1];\n\n        if (typeof key === 'string' && key !== '*' && key === method) {\n          responses.push.apply(responses, tslib_1.__spread(transformers));\n        }\n\n        if (key instanceof RegExp && key.test(method)) {\n          responses.push.apply(responses, tslib_1.__spread(transformers));\n        }\n\n        if (key === '*') {\n          responses.push.apply(responses, tslib_1.__spread(transformers));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return [requests, responses];\n  };\n\n  return BaseProvider;\n}();\n\nexports.BaseProvider = BaseProvider;","map":{"version":3,"sources":["../../src/providers/baseProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseProvider = void 0;\nvar tslib_1 = require(\"tslib\");\nvar types_1 = require(\"../types\");\nvar BaseProvider = /** @class */ (function () {\n    function BaseProvider(url, reqMiddleware, resMiddleware) {\n        var _this = this;\n        if (reqMiddleware === void 0) { reqMiddleware = new Map(); }\n        if (resMiddleware === void 0) { resMiddleware = new Map(); }\n        this.middlewares = {\n            request: {\n                use: function (fn, match) {\n                    if (match === void 0) { match = '*'; }\n                    _this.pushMiddleware(fn, types_1.MiddlewareType.REQ, match);\n                },\n            },\n            response: {\n                use: function (fn, match) {\n                    if (match === void 0) { match = '*'; }\n                    _this.pushMiddleware(fn, types_1.MiddlewareType.RES, match);\n                },\n            },\n        };\n        this.reqMiddleware = new Map().set('*', []);\n        this.resMiddleware = new Map().set('*', []);\n        this.reqMiddleware = reqMiddleware;\n        this.resMiddleware = resMiddleware;\n        this.url = url;\n    }\n    BaseProvider.prototype.pushMiddleware = function (fn, type, match) {\n        if (type !== types_1.MiddlewareType.REQ && type !== types_1.MiddlewareType.RES) {\n            throw new Error('Please specify the type of middleware being added');\n        }\n        if (type === types_1.MiddlewareType.REQ) {\n            var current = this.reqMiddleware.get(match) || [];\n            this.reqMiddleware.set(match, tslib_1.__spread(current, [fn]));\n        }\n        else {\n            var current = this.resMiddleware.get(match) || [];\n            this.resMiddleware.set(match, tslib_1.__spread(current, [fn]));\n        }\n    };\n    BaseProvider.prototype.getMiddleware = function (method) {\n        var e_1, _a, e_2, _b;\n        var requests = [];\n        var responses = [];\n        try {\n            for (var _c = tslib_1.__values(this.reqMiddleware.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = tslib_1.__read(_d.value, 2), key = _e[0], transformers = _e[1];\n                if (typeof key === 'string' && key !== '*' && key === method) {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n                if (key instanceof RegExp && key.test(method)) {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n                if (key === '*') {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            for (var _f = tslib_1.__values(this.resMiddleware.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var _h = tslib_1.__read(_g.value, 2), key = _h[0], transformers = _h[1];\n                if (typeof key === 'string' && key !== '*' && key === method) {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n                if (key instanceof RegExp && key.test(method)) {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n                if (key === '*') {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return [requests, responses];\n    };\n    return BaseProvider;\n}());\nexports.BaseProvider = BaseProvider;\n//# sourceMappingURL=baseProvider.js.map"]},"metadata":{},"sourceType":"script"}