{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/transaction\n\nThis package provides a collection of apis to create, sign/send transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install @harmony-js/transaction\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nCreating a new transaction using parameters\n```javascript\n* const txn = hmy.transactions.newTx({\n*   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*   value: new Unit(1).asOne().toWei(),\n*   // gas limit, you can use string\n*   gasLimit: '21000',\n*   // send token from shardID\n*   shardID: 0,\n*   // send token to toShardID\n*   toShardID: 0,\n*   // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*   gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n* });\n```\n\nRecovering transaction from raw transaction hash\n```javascript\n* const raw = '0xf86d21843b9aca00825208808094d6ba69da5b45ec98b53e3258d7de756a567b6763880de0b6b3a76400008028a0da8887719f377401963407fc1d82d2ab52404600cf7bea37c27bd2dfd7c86aaaa03c405b0843394442b303256a804bde835821a8a77bd88a2ced9ffdc8b0a409e9';\n* const tx = hmy.transactions.recover(raw);\n```\n\nGetting the RLP encoding of a transaction (rawTransaction), along with raw transaction field values that were encoded\n```javascript\n* const [encoded, raw] = txn.getRLPUnsigned()\n```\n\nSign the transaction using a wallet and send the transaction, wait for confirmation and print receipt\n```javascript\n* // key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signTransaction(txn).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log('tx hash: ' + hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nAsynchronous transaction sign, send, and confirm\n```javascript\n* async function transfer() {\n*   hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   signedTxn\n*     .observed()\n*     .on('transactionHash', (txnHash) => {\n*       console.log('');\n*       console.log('--- hash ---');\n*       console.log('');\n*       console.log(txnHash);\n*       console.log('');\n*     })\n*     .on('receipt', (receipt) => {\n*       console.log('');\n*       console.log('--- receipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('cxReceipt', (receipt) => {\n*       console.log('');\n*       console.log('--- cxReceipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('error', (error) => {\n*       console.log('');\n*       console.log('--- error ---');\n*       console.log('');\n*       console.log(error);\n*       console.log('');\n*     });\n\n*   const [sentTxn, txnHash] = await signedTxn.sendTransaction();\n\n*   const confiremdTxn = await sentTxn.confirm(txnHash);\n\n*   // if the transactino is cross-shard transaction\n*   if (!confiremdTxn.isCrossShard()) {\n*     if (confiremdTxn.isConfirmed()) {\n*       console.log('--- Result ---');\n*       console.log('');\n*       console.log('Normal transaction');\n*       console.log(`${txnHash} is confirmed`);\n*       console.log('');\n*       console.log('please see detail in explorer:');\n*       console.log('');\n*       console.log('https://explorer.testnet.harmony.one/#/tx/' + txnHash);\n*       console.log('');\n*       process.exit();\n*     }\n*   }\n*   if (confiremdTxn.isConfirmed() && confiremdTxn.isCxConfirmed()) {\n*     console.log('--- Result ---');\n*     console.log('');\n*     console.log('Cross-Shard transaction');\n*     console.log(`${txnHash} is confirmed`);\n*     console.log('');\n*     console.log('please see detail in explorer:');\n*     console.log('');\n*     console.log('https://explorer.testnet.harmony.one/#/tx/' + txnHash);\n*     console.log('');\n*     process.exit();\n*   }\n* }\n* transfer();\n```\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxStatus = void 0;\nvar TxStatus;\n\n(function (TxStatus) {\n  TxStatus[\"NONE\"] = \"NONE\";\n  TxStatus[\"INTIALIZED\"] = \"INITIALIZED\";\n  TxStatus[\"SIGNED\"] = \"SIGNED\";\n  TxStatus[\"PENDING\"] = \"PENDING\";\n  TxStatus[\"CONFIRMED\"] = \"CONFIRMED\";\n  TxStatus[\"REJECTED\"] = \"REJECTED\";\n})(TxStatus = exports.TxStatus || (exports.TxStatus = {}));","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJG;;;;;;AAsBH,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAClB,EAAA,QAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,QAAA,CAAA,YAAA,CAAA,GAAA,aAAA;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,QAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,QAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CAPD,EAAY,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n # @harmony-js/transaction\n\nThis package provides a collection of apis to create, sign/send transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install @harmony-js/transaction\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nCreating a new transaction using parameters\n```javascript\n* const txn = hmy.transactions.newTx({\n*   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*   value: new Unit(1).asOne().toWei(),\n*   // gas limit, you can use string\n*   gasLimit: '21000',\n*   // send token from shardID\n*   shardID: 0,\n*   // send token to toShardID\n*   toShardID: 0,\n*   // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*   gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n* });\n```\n\nRecovering transaction from raw transaction hash\n```javascript\n* const raw = '0xf86d21843b9aca00825208808094d6ba69da5b45ec98b53e3258d7de756a567b6763880de0b6b3a76400008028a0da8887719f377401963407fc1d82d2ab52404600cf7bea37c27bd2dfd7c86aaaa03c405b0843394442b303256a804bde835821a8a77bd88a2ced9ffdc8b0a409e9';\n* const tx = hmy.transactions.recover(raw);\n```\n\nGetting the RLP encoding of a transaction (rawTransaction), along with raw transaction field values that were encoded\n```javascript\n* const [encoded, raw] = txn.getRLPUnsigned()\n```\n\nSign the transaction using a wallet and send the transaction, wait for confirmation and print receipt\n```javascript\n* // key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signTransaction(txn).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log('tx hash: ' + hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nAsynchronous transaction sign, send, and confirm\n```javascript\n* async function transfer() {\n*   hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   signedTxn\n*     .observed()\n*     .on('transactionHash', (txnHash) => {\n*       console.log('');\n*       console.log('--- hash ---');\n*       console.log('');\n*       console.log(txnHash);\n*       console.log('');\n*     })\n*     .on('receipt', (receipt) => {\n*       console.log('');\n*       console.log('--- receipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('cxReceipt', (receipt) => {\n*       console.log('');\n*       console.log('--- cxReceipt ---');\n*       console.log('');\n*       console.log(receipt);\n*       console.log('');\n*     })\n*     .on('error', (error) => {\n*       console.log('');\n*       console.log('--- error ---');\n*       console.log('');\n*       console.log(error);\n*       console.log('');\n*     });\n\n*   const [sentTxn, txnHash] = await signedTxn.sendTransaction();\n\n*   const confiremdTxn = await sentTxn.confirm(txnHash);\n\n*   // if the transactino is cross-shard transaction\n*   if (!confiremdTxn.isCrossShard()) {\n*     if (confiremdTxn.isConfirmed()) {\n*       console.log('--- Result ---');\n*       console.log('');\n*       console.log('Normal transaction');\n*       console.log(`${txnHash} is confirmed`);\n*       console.log('');\n*       console.log('please see detail in explorer:');\n*       console.log('');\n*       console.log('https://explorer.testnet.harmony.one/#/tx/' + txnHash);\n*       console.log('');\n*       process.exit();\n*     }\n*   }\n*   if (confiremdTxn.isConfirmed() && confiremdTxn.isCxConfirmed()) {\n*     console.log('--- Result ---');\n*     console.log('');\n*     console.log('Cross-Shard transaction');\n*     console.log(`${txnHash} is confirmed`);\n*     console.log('');\n*     console.log('please see detail in explorer:');\n*     console.log('');\n*     console.log('https://explorer.testnet.harmony.one/#/tx/' + txnHash);\n*     console.log('');\n*     process.exit();\n*   }\n* }\n* transfer();\n```\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxStatus = void 0;\nvar TxStatus;\n(function (TxStatus) {\n    TxStatus[\"NONE\"] = \"NONE\";\n    TxStatus[\"INTIALIZED\"] = \"INITIALIZED\";\n    TxStatus[\"SIGNED\"] = \"SIGNED\";\n    TxStatus[\"PENDING\"] = \"PENDING\";\n    TxStatus[\"CONFIRMED\"] = \"CONFIRMED\";\n    TxStatus[\"REJECTED\"] = \"REJECTED\";\n})(TxStatus = exports.TxStatus || (exports.TxStatus = {}));\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}