{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbiCoderClass = void 0;\n\nvar abiCoder_1 = require(\"./abiCoder\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar utils_2 = require(\"./utils\");\n\nvar AbiCoderClass = function () {\n  function AbiCoderClass(coder) {\n    this.coder = coder;\n  }\n\n  AbiCoderClass.prototype.encodeFunctionSignature = function (functionName) {\n    if (utils_1.isObject(functionName)) {\n      functionName = utils_2.jsonInterfaceMethodToString(functionName);\n    }\n\n    var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n    return result.slice(0, 10);\n  };\n\n  AbiCoderClass.prototype.encodeEventSignature = function (functionName) {\n    if (utils_1.isObject(functionName)) {\n      functionName = utils_2.jsonInterfaceMethodToString(functionName);\n    }\n\n    var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n    return result;\n  };\n\n  AbiCoderClass.prototype.encodeParameter = function (types, param) {\n    return this.encodeParameters([types], [param]);\n  };\n\n  AbiCoderClass.prototype.encodeParameters = function (types, params) {\n    return this.coder.encode(types, params);\n  };\n\n  AbiCoderClass.prototype.encodeFunctionCall = function (jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n  };\n\n  AbiCoderClass.prototype.decodeParameter = function (type, bytes) {\n    return this.decodeParameters([type], bytes)[0];\n  };\n\n  AbiCoderClass.prototype.decodeParameters = function (outputs, bytes) {\n    if (utils_1.isArray(outputs) && outputs.length === 0) {\n      throw new Error('Empty outputs array given!');\n    }\n\n    if (!bytes || bytes === '0x' || bytes === '0X') {\n      throw new Error(\"Invalid bytes string given: \" + bytes);\n    }\n\n    var result = this.coder.decode(outputs, bytes);\n    var returnValues = {};\n    var decodedValue;\n\n    if (utils_1.isArray(result)) {\n      if (outputs.length > 1) {\n        outputs.forEach(function (output, i) {\n          decodedValue = result[i];\n\n          if (decodedValue === '0x') {\n            decodedValue = null;\n          }\n\n          returnValues[i] = utils_2.bnToString(decodedValue);\n\n          if (utils_1.isObject(output) && output.name) {\n            returnValues[output.name] = utils_2.bnToString(decodedValue);\n          }\n        });\n        return returnValues;\n      }\n\n      return utils_2.bnToString(result);\n    }\n\n    if (utils_1.isObject(outputs[0]) && outputs[0].name) {\n      returnValues[outputs[0].name] = utils_2.bnToString(result);\n    }\n\n    returnValues[0] = utils_2.bnToString(result);\n    return returnValues;\n  };\n\n  AbiCoderClass.prototype.decodeLog = function (inputs, data, topics) {\n    var _this = this;\n\n    if (data === void 0) {\n      data = '';\n    }\n\n    var returnValues = {};\n    var topicCount = 0;\n    var value;\n    var nonIndexedInputKeys = [];\n    var nonIndexedInputItems = [];\n\n    if (!utils_1.isArray(topics)) {\n      topics = [topics];\n    }\n\n    inputs.forEach(function (input, i) {\n      if (input.indexed) {\n        if (input.type === 'string') {\n          return;\n        }\n\n        value = topics[topicCount];\n\n        if (_this.isStaticType(input.type)) {\n          value = _this.decodeParameter(input.type, topics[topicCount]);\n        }\n\n        returnValues[i] = utils_2.bnToString(value);\n        returnValues[input.name] = utils_2.bnToString(value);\n        topicCount++;\n        return;\n      }\n\n      nonIndexedInputKeys.push(i);\n      nonIndexedInputItems.push(input);\n    });\n\n    if (data) {\n      var values_1 = this.decodeParameters(nonIndexedInputItems, data);\n      var decodedValue_1;\n      nonIndexedInputKeys.forEach(function (itemKey, index) {\n        decodedValue_1 = values_1[index];\n        returnValues[itemKey] = utils_2.bnToString(decodedValue_1);\n        returnValues[nonIndexedInputItems[index].name] = utils_2.bnToString(decodedValue_1);\n      });\n    }\n\n    return returnValues;\n  };\n\n  AbiCoderClass.prototype.isStaticType = function (type) {\n    if (type === 'bytes') {\n      return false;\n    }\n\n    if (type === 'string') {\n      return false;\n    }\n\n    if (type.indexOf('[') && type.slice(type.indexOf('[')).length === 2) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return AbiCoderClass;\n}();\n\nexports.AbiCoderClass = AbiCoderClass;","map":{"version":3,"sources":["../../src/abi/api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbiCoderClass = void 0;\nvar abiCoder_1 = require(\"./abiCoder\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_2 = require(\"./utils\");\nvar AbiCoderClass = /** @class */ (function () {\n    function AbiCoderClass(coder) {\n        this.coder = coder;\n    }\n    AbiCoderClass.prototype.encodeFunctionSignature = function (functionName) {\n        if (utils_1.isObject(functionName)) {\n            functionName = utils_2.jsonInterfaceMethodToString(functionName);\n        }\n        var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n        return result.slice(0, 10);\n    };\n    AbiCoderClass.prototype.encodeEventSignature = function (functionName) {\n        if (utils_1.isObject(functionName)) {\n            functionName = utils_2.jsonInterfaceMethodToString(functionName);\n        }\n        var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n        return result;\n    };\n    AbiCoderClass.prototype.encodeParameter = function (types, param) {\n        return this.encodeParameters([types], [param]);\n    };\n    AbiCoderClass.prototype.encodeParameters = function (types, params) {\n        return this.coder.encode(types, params);\n    };\n    AbiCoderClass.prototype.encodeFunctionCall = function (jsonInterface, params) {\n        return (this.encodeFunctionSignature(jsonInterface) +\n            this.encodeParameters(jsonInterface.inputs, params).replace('0x', ''));\n    };\n    AbiCoderClass.prototype.decodeParameter = function (type, bytes) {\n        return this.decodeParameters([type], bytes)[0];\n    };\n    AbiCoderClass.prototype.decodeParameters = function (outputs, bytes) {\n        if (utils_1.isArray(outputs) && outputs.length === 0) {\n            throw new Error('Empty outputs array given!');\n        }\n        if (!bytes || bytes === '0x' || bytes === '0X') {\n            throw new Error(\"Invalid bytes string given: \" + bytes);\n        }\n        var result = this.coder.decode(outputs, bytes);\n        var returnValues = {};\n        var decodedValue;\n        if (utils_1.isArray(result)) {\n            if (outputs.length > 1) {\n                outputs.forEach(function (output, i) {\n                    decodedValue = result[i];\n                    if (decodedValue === '0x') {\n                        decodedValue = null;\n                    }\n                    returnValues[i] = utils_2.bnToString(decodedValue);\n                    if (utils_1.isObject(output) && output.name) {\n                        returnValues[output.name] = utils_2.bnToString(decodedValue);\n                    }\n                });\n                return returnValues;\n            }\n            return utils_2.bnToString(result);\n        }\n        if (utils_1.isObject(outputs[0]) && outputs[0].name) {\n            returnValues[outputs[0].name] = utils_2.bnToString(result);\n        }\n        returnValues[0] = utils_2.bnToString(result);\n        return returnValues;\n    };\n    AbiCoderClass.prototype.decodeLog = function (inputs, data, topics) {\n        var _this = this;\n        if (data === void 0) { data = ''; }\n        var returnValues = {};\n        var topicCount = 0;\n        var value;\n        var nonIndexedInputKeys = [];\n        var nonIndexedInputItems = [];\n        if (!utils_1.isArray(topics)) {\n            topics = [topics];\n        }\n        inputs.forEach(function (input, i) {\n            if (input.indexed) {\n                if (input.type === 'string') {\n                    return;\n                }\n                value = topics[topicCount];\n                if (_this.isStaticType(input.type)) {\n                    value = _this.decodeParameter(input.type, topics[topicCount]);\n                }\n                returnValues[i] = utils_2.bnToString(value);\n                returnValues[input.name] = utils_2.bnToString(value);\n                topicCount++;\n                return;\n            }\n            nonIndexedInputKeys.push(i);\n            nonIndexedInputItems.push(input);\n        });\n        if (data) {\n            var values_1 = this.decodeParameters(nonIndexedInputItems, data);\n            var decodedValue_1;\n            nonIndexedInputKeys.forEach(function (itemKey, index) {\n                decodedValue_1 = values_1[index];\n                returnValues[itemKey] = utils_2.bnToString(decodedValue_1);\n                returnValues[nonIndexedInputItems[index].name] = utils_2.bnToString(decodedValue_1);\n            });\n        }\n        return returnValues;\n    };\n    AbiCoderClass.prototype.isStaticType = function (type) {\n        if (type === 'bytes') {\n            return false;\n        }\n        if (type === 'string') {\n            return false;\n        }\n        if (type.indexOf('[') && type.slice(type.indexOf('[')).length === 2) {\n            return false;\n        }\n        return true;\n    };\n    return AbiCoderClass;\n}());\nexports.AbiCoderClass = AbiCoderClass;\n//# sourceMappingURL=api.js.map"]},"metadata":{},"sourceType":"script"}