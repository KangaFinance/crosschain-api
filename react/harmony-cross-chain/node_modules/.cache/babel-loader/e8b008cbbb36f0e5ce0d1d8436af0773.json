{"ast":null,"code":"var _jsxFileName = \"/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { compileFunction } from 'vm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar client;\n\nconst App = () => {\n  _s();\n\n  const [metamaskAddress, setMetamaskAddress] = useState();\n  useEffect(() => {\n    detectEthereumProvider().then(provider => {\n      try {\n        // @ts-ignore\n        if (provider !== window.ethereum) {\n          console.error('Do you have multiple wallets installed?');\n        }\n\n        if (!provider) {\n          alert('Metamask not found');\n        }\n\n        provider.on('accountsChanged', accounts => setMetamaskAddress(accounts[0]));\n        provider.on('disconnect', () => {\n          setMetamaskAddress('');\n        });\n        provider.request({\n          method: 'eth_requestAccounts'\n        }).then(async accounts => {\n          setMetamaskAddress(accounts[0]);\n          client = provider;\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }, []);\n\n  const setProvider = async () => {\n    // POST request using fetch inside useEffect React hook\n    console.log(client);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      body: client\n    };\n    fetch('http://localhost:3000/lp/addLiquidity', requestOptions).then(response => response.json()); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  };\n\n  const sendTokens = async () => {\n    // POST request using fetch inside useEffect React hook\n    console.log(client);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"oneAddress\": \"one1zs2mzq923x5f7r3xayhnv8jhzyn6020xtd493h\",\n        \"ethAddress\": \"0x9E1AD78422Fd571B26D93EeB895f631A67Cd5462\"\n      })\n    };\n    fetch('http://localhost:3000/lp/addLiquidity', requestOptions).then(response => response.json()); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#dedede',\n      width: '100vw',\n      height: '100vh',\n      padding: '100px 0'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 600,\n        margin: '0 auto'\n      },\n      children: [\"Your metamask address: \", metamaskAddress, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setProvider(),\n        children: \"Send tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"u090Eu6URv4U2lRRRihdK+ts/+E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/src/App.js"],"names":["React","useEffect","useState","detectEthereumProvider","compileFunction","client","App","metamaskAddress","setMetamaskAddress","then","provider","window","ethereum","console","error","alert","on","accounts","request","method","e","setProvider","log","requestOptions","headers","body","fetch","response","json","sendTokens","JSON","stringify","background","width","height","padding","maxWidth","margin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,SAASC,eAAT,QAAgC,IAAhC;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,EAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,sBAAsB,GAAGM,IAAzB,CAA+BC,QAAD,IAAc;AAC1C,UAAI;AACF;AACA,YAAIA,QAAQ,KAAKC,MAAM,CAACC,QAAxB,EAAkC;AAChCC,UAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACD;;AAED,YAAI,CAACJ,QAAL,EAAe;AACbK,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;;AAEDL,QAAAA,QAAQ,CAACM,EAAT,CAAY,iBAAZ,EAAgCC,QAAD,IAC3BT,kBAAkB,CAACS,QAAQ,CAAC,CAAD,CAAT,CADtB;AAIAP,QAAAA,QAAQ,CAACM,EAAT,CAAY,YAAZ,EAA0B,MAAM;AAC5BR,UAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACH,SAFD;AAIAE,QAAAA,QAAQ,CACHQ,OADL,CACa;AAAEC,UAAAA,MAAM,EAAE;AAAV,SADb,EAEKV,IAFL,CAEU,MAAOQ,QAAP,IAAoB;AACtBT,UAAAA,kBAAkB,CAACS,QAAQ,CAAC,CAAD,CAAT,CAAlB;AACAZ,UAAAA,MAAM,GAAGK,QAAT;AACH,SALL;AAMD,OAxBD,CAwBE,OAAOU,CAAP,EAAU;AACVP,QAAAA,OAAO,CAACC,KAAR,CAAcM,CAAd;AACD;AACF,KA5BD;AA6BD,GA9BQ,EA8BN,EA9BM,CAAT;;AAgCA,QAAMC,WAAW,GAAG,YAAa;AAC/B;AACAR,IAAAA,OAAO,CAACS,GAAR,CAAYjB,MAAZ;AACA,UAAMkB,cAAc,GAAG;AACnBJ,MAAAA,MAAM,EAAE,MADW;AAEnBK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEpB;AAHa,KAAvB;AAKAqB,IAAAA,KAAK,CAAC,uCAAD,EAA0CH,cAA1C,CAAL,CACKd,IADL,CACUkB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAR+B,CAU/B;AACC,GAXH;;AAaA,QAAMC,UAAU,GAAG,YAAa;AAC9B;AACAhB,IAAAA,OAAO,CAACS,GAAR,CAAYjB,MAAZ;AACA,UAAMkB,cAAc,GAAG;AACnBJ,MAAAA,MAAM,EAAE,MADW;AAEnBK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAe;AACnB,sBAAc,4CADK;AAEnB,sBAAc;AAFK,OAAf;AAHa,KAAvB;AAQAL,IAAAA,KAAK,CAAC,uCAAD,EAA0CH,cAA1C,CAAL,CACKd,IADL,CACUkB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAX8B,CAa9B;AACC,GAdH;;AAgBA,sBACI;AACI,IAAA,KAAK,EAAE;AACLI,MAAAA,UAAU,EAAE,SADP;AAELC,MAAAA,KAAK,EAAE,OAFF;AAGLC,MAAAA,MAAM,EAAE,OAHH;AAILC,MAAAA,OAAO,EAAE;AAJJ,KADX;AAAA,2BAQE;AACI,MAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,GADL;AAELC,QAAAA,MAAM,EAAE;AAFH,OADX;AAAA,4CAM4B9B,eAN5B,eAOI;AAAQ,QAAA,OAAO,EAAE,MAAMc,WAAW,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBD,CApFD;;GAAMf,G;;KAAAA,G;AAsFN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport { compileFunction } from 'vm';\n\nvar client;\n\nconst App = () => {\n  const [metamaskAddress, setMetamaskAddress] = useState()\n\n  useEffect(() => {\n    detectEthereumProvider().then((provider) => {\n      try {\n        // @ts-ignore\n        if (provider !== window.ethereum) {\n          console.error('Do you have multiple wallets installed?')\n        }\n\n        if (!provider) {\n          alert('Metamask not found')\n        }\n\n        provider.on('accountsChanged', (accounts) =>\n            setMetamaskAddress(accounts[0])\n        )\n\n        provider.on('disconnect', () => {\n            setMetamaskAddress('')\n        })\n\n        provider\n            .request({ method: 'eth_requestAccounts' })\n            .then(async (accounts) => {\n                setMetamaskAddress(accounts[0]);\n                client = provider;\n            })\n      } catch (e) {\n        console.error(e)\n      }\n    })\n  }, [])\n\n  const setProvider = async () =>  {\n    // POST request using fetch inside useEffect React hook\n    console.log(client);\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'multipart/form-data' },\n        body: client\n    };\n    fetch('http://localhost:3000/lp/addLiquidity', requestOptions)\n        .then(response => response.json())\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }\n\n  const sendTokens = async () =>  {\n    // POST request using fetch inside useEffect React hook\n    console.log(client);\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          \"oneAddress\": \"one1zs2mzq923x5f7r3xayhnv8jhzyn6020xtd493h\",\n          \"ethAddress\": \"0x9E1AD78422Fd571B26D93EeB895f631A67Cd5462\",\n      })  \n    };\n    fetch('http://localhost:3000/lp/addLiquidity', requestOptions)\n        .then(response => response.json())\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }\n\n  return (\n      <div\n          style={{\n            background: '#dedede',\n            width: '100vw',\n            height: '100vh',\n            padding: '100px 0'\n          }}\n      >\n        <div\n            style={{\n              maxWidth: 600,\n              margin: '0 auto'\n            }}\n        >\n            Your metamask address: {metamaskAddress}\n            <button onClick={() => setProvider()}>Send tokens</button>\n        </div>\n      </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}