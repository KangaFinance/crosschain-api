{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/core\n\nThis package provides a collection of apis to interact with Harmony blockchain.\n\n## Installation\n\n```\nnpm install @harmony-js/core\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nGetting balance of account `one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7`\n```javascript\n* hmy.blockchain\n*   .getBalance({ address: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7' })\n*   .then((response) => {\n*     console.log('balance in ONEs: ' + fromWei(hexToNumber(response.result), Units.one));\n*   });\n```\n\nGetting the latest block number\n```javascript\n* hmy.blockchain.getBlockNumber().then((response) => {\n*   console.log('current block number: ' + hexToNumber(response.result));\n* });\n```\n\nGetting the block using block hash\n```javascript\n* hmy.blockchain\n*   .getBlockByHash({\n*     blockHash: '0x08c46ae7249362a7d1f602d44c5a81f33ebdab6a7dcb6068f99610b57911aafd',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the block using block number\n```javascript\n* hmy.blockchain\n*   .getBlockByNumber({\n*     blockNumber: numberToHex(422635),\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction using hash\n```javascript\n* hmy.blockchain\n*   .getTransactionByHash({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction receipt\n```javascript\n* hmy.blockchain\n*   .getTransactionReceipt({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the cross-shard transaction receipt\n```javascript\n* hmy.blockchain\n*   .getCxReceiptByHash({\n*     txnHash: '0xcd36a90ff5d5373285c2896ba7bbcd3f5324263c0cb8ecfb7cad2f5fc2fbdbda',\n*     shardID: 1,\n*   })\n*   .then((value) => {\n*     console.log(value.result);\n*   });\n```\n\nGetting the deployed smart contract code\n```javascript\n* hmy.blockchain\n*   .getCode({\n*     address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n*     blockNumber: 'latest',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction count of an account\n```javascript\n* hmy.blockchain\n*   .getTransactionCount({\n*     address: 'one1pdv9lrdwl0rg5vglh4xtyrv3wjk3wsqket7zxy',\n*   })\n*   .then((response) => {\n*     console.log(hexToNumber(response.result));\n*   });\n```\n\nGetting the shard structure and details\n```javascript\n* hmy.blockchain.getShardingStructure().then((response) => {\n*   console.log(response.result);\n* });\n```\n\nTransferring funds using `sendTransaction`\n```javascript\n// key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* async function transfer() {\n*   const txn = hmy.transactions.newTx({\n*     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*     value: new Unit(1).asOne().toWei(),\n*     // gas limit, you can use string\n*     gasLimit: '21000',\n*     // send token from shardID\n*     shardID: 0,\n*     // send token to toShardID\n*     toShardID: 0,\n*     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*     gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n*   });\n\n*   // sign the transaction use wallet;\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n*   console.log(txnHash.result);\n* }\n\n* transfer();\n```\n *\n * @packageDocumentation\n * @module harmony-core\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Blockchain = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar Blockchain = function () {\n  /**\n   * @hidden\n   */\n  function Blockchain(messenger) {\n    this.messenger = messenger;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Blockchain.prototype.setMessenger = function (messenger) {\n    this.messenger = messenger;\n  };\n  /**\n   *\n   * @hidden\n   */\n\n\n  Blockchain.prototype.getRpcResult = function (result) {\n    if (result instanceof network_1.ResponseMiddleware) {\n      return result.getRaw;\n    } else {\n      return result;\n    }\n  };\n  /**\n   * Get the balance of an address at a given block.\n   *\n   * @param address the address to get the balance of.\n   * @param blockNumber (option) If you pass this parameter it will not use the default block set with `DefaultBlockParams.latest`\n   * @param shardID (option) If you pass this parameter it will not use the default block set with `this.messenger.currentShard`\n   *\n   * @returns The current balance for the given address in wei.\n   *\n   * @hint\n   * ```\n   * the third param `shardID` is binding with the endpoint\n   * shard 0: localhost:9500\n   * shard 1: localhost:9501\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBalance({\n   *   address: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n   *   blockNumber: 'latest'\n   * }).then(value => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBalance = function (_a) {\n    var address = _a.address,\n        _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBalance, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current block number.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The number of the most recent block.\n   *\n   * @hint\n   * ```\n   * the third param `shardID` is binding with the endpoint\n   * shard 0: localhost:9500\n   * shard 1: localhost:9501\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockNumber().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBlockNumber = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.BlockNumber, [], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a block matching the block Hash.\n   *\n   * @param blockHash the block hash\n   * @param returnObject By default it is `true`, Features in development, IGNORE it!\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - The block object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockByHash({\n   *   blockHash: '0x9cd821b576efdff61280e8857ef218fb2cff8db0cf0fb27dfceef7237042b79e',\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBlockByHash = function (_a) {\n    var blockHash = _a.blockHash,\n        _b = _a.returnObject,\n        returnObject = _b === void 0 ? true : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBlockByHash, [blockHash, returnObject], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a block matching the block Number.\n   *\n   * @param blockNumber the block number\n   * @param returnObject By default it is `true`, Features in development, IGNORE it!\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - The block object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockByNumber({\n   *   blockNumber: '0x89',\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBlockByNumber = function (_a) {\n    var _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.returnObject,\n        returnObject = _c === void 0 ? true : _c,\n        _d = _a.shardID,\n        shardID = _d === void 0 ? this.messenger.currentShard : _d;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBlockByNumber, [blockNumber, returnObject], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _e.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the number of transaction in a given block.\n   *\n   * @param blockHash the block number Hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  The number of transactions in the given block.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockTransactionCountByHash({\n   *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1'\n   * }).then((value) => {\n   *   console.log(value):\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBlockTransactionCountByHash = function (_a) {\n    var blockHash = _a.blockHash,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBlockTransactionCountByHash, [blockHash], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the number of transaction in a given block.\n   *\n   * @param blockNumber the block number Hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  The number of transactions in the given block.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getBlockTransactionCountByNumber({\n   *   blockNumber: '0x2403C'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getBlockTransactionCountByNumber = function (_a) {\n    var blockNumber = _a.blockNumber,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBlockTransactionCountByNumber, [blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a transaction based on a block hash and the transactions index position.\n   *\n   * @param blockHash the block number Hash\n   * @param index The transactions index position. **Hex Number**\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByBlockHashAndIndex({\n   *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1',\n   *   index: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getTransactionByBlockHashAndIndex = function (_a) {\n    var blockHash = _a.blockHash,\n        index = _a.index,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionByBlockHashAndIndex, [blockHash, index], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a transaction based on a block number and the transactions index position.\n   *\n   * @param blockNumber the block number\n   * @param index The transactions index position. **Hex Number**\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByBlockNumberAndIndex({\n   *   blockNumber: '0x2403C',\n   *   index: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getTransactionByBlockNumberAndIndex = function (_a) {\n    var _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        index = _a.index,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionByBlockNumberAndIndex, [blockNumber, index], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a transaction matching the given transaction hash.\n   *\n   * @param txnHash The transaction hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction object\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionByHash({\n   *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getTransactionByHash = function (_a) {\n    var txnHash = _a.txnHash,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionByHash, [txnHash], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the receipt of a transaction by transaction hash.\n   *\n   * @param txnHash The transaction hash\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionReceipt({\n   *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getTransactionReceipt = function (_a) {\n    var txnHash = _a.txnHash,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionReceipt, [txnHash], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get transaction recepit from cross shard transaction\n   *\n   * @param txnHash The transaction hash\n   * @param shardID the shard id of receiver's address\n   * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n   *\n   * @example\n   * ```javascript\n   * // This transaction sends from shard 0 to shard 1\n   * hmy.blockchain.getCxReceiptByHash({\n   *   txnHash: '0x7fae9252fbda68d718e610bc10cf2b5c6a9cafb42d4a6b9d6e392c77d587b9ea',\n   *   shardID: 1,\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getCxReceiptByHash = function (_a) {\n    var txnHash = _a.txnHash,\n        shardID = _a.shardID;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetCXReceiptByHash, [txnHash], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the code at a specific address.\n   *\n   * @param address The address to get the code from (eg:smart contract)\n   * @param blockNumber (OPTIONAL) If you pass this parameter it will not use the default block\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The data at given `address`\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getCode({\n   *   address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n   *   blockNumber: 'latest'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getCode = function (_a) {\n    var address = _a.address,\n        _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetCode, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the number of peers connected to.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - number of peer count\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.net_peerCount().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.net_peerCount = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.PeerCount, [], 'net', shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the version of net.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - the current version.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.net_version().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.net_version = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.NetVersion, [], 'net', shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the protocal version.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @returns `Promise` - the current protocol version.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getProtocolVersion().then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getProtocolVersion = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.ProtocolVersion, [], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the storage at a specific position of an address\n   *\n   * @param address The address to get the storage from\n   * @param position The index position of the storage\n   * @param blockNumber by default it's `latest`.\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getStorageAt({\n   *   address: 'one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n   *   position: '0x0'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getStorageAt = function (_a) {\n    var address = _a.address,\n        position = _a.position,\n        _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetStorageAt, [crypto_1.getAddress(address).checksum, position, blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the numbers of transactions sent from this address.\n   *\n   * @param address The address to get the numbers of transactions from\n   * @param blockNumber by default it's `latest`\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `Promise` - The number of transactions sent from the given address.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getTransactionCount({\n   *   address: \"one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g\"\n   * }).then((value) => {\n   *   console.log(value.result);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getTransactionCount = function (_a) {\n    var address = _a.address,\n        _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionCount, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Get the sharding structure of current network\n   *\n   * @return `Promise` - The sharding structure of current network.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.getShardingStructure().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.getShardingStructure = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetShardingStructure, [], this.messenger.chainPrefix)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Sends a signed transaction to the network.\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n   *   console.log(txnHash.result);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n\n\n  Blockchain.prototype.sendTransaction = function (transaction) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!transaction.isSigned() || !transaction) {\n              throw new Error('transaction is not signed or not exist');\n            }\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.SendRawTransaction, [transaction.getRawTransaction()], this.messenger.chainPrefix, typeof transaction.txParams.shardID === 'string' ? Number.parseInt(transaction.txParams.shardID, 10) : transaction.txParams.shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Sends a raw transaction to the network.\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   recovered = signedTxn.recover(signedTxn.rawTransaction);\n   *\n   *   const txnHash = await hmy.blockchain.sendRawTransaction(recovered);\n   *   console.log(txnHash);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n\n\n  Blockchain.prototype.sendRawTransaction = function (transaction) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, txn, result;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!transaction.isSigned() || !transaction) {\n              throw new Error('transaction is not signed or not exist');\n            }\n\n            return [4\n            /*yield*/\n            , transaction.sendTransaction()];\n\n          case 1:\n            _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), txn = _a[0], result = _a[1];\n\n            if (txn.isPending()) {\n              return [2\n              /*return*/\n              , result];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * send a transaction and check whether it exists\n   *\n   * @param transaction `Object` - The transaction object to send:\n   * @return The **callbalck** will return the 32 bytes transaction hash\n   *\n   * @example\n   * ```javascript\n   * // add privateKey to wallet\n   * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * hmy.wallet.addByPrivateKey(privateKey);\n   *\n   * async function transfer() {\n   *   const txn = hmy.transactions.newTx({\n   *     //  token send to\n   *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *     // amount to send\n   *     value: '10000',\n   *     // gas limit, you can use string\n   *     gasLimit: '210000',\n   *     // send token from shardID\n   *     shardID: 0,\n   *     // send token to toShardID\n   *     toShardID: 0,\n   *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   *   });\n   *\n   *   // sign the transaction use wallet;\n   *   const signedTxn = await hmy.wallet.signTransaction(txn);\n   *   const txnHash = await hmy.blockchain.createObservedTransaction(signedTxn);\n   *   console.log(txnHash);\n   * }\n   *\n   * transfer();\n   * ```\n   */\n\n\n  Blockchain.prototype.createObservedTransaction = function (transaction) {\n    try {\n      transaction.sendTransaction().then(function (response) {\n        var _a = tslib_1.__read(response, 2),\n            txReturned = _a[0],\n            TranID = _a[1];\n\n        txReturned.confirm(TranID).then(function (txConfirmed) {\n          transaction.emitter.resolve(txConfirmed);\n        });\n      });\n      return transaction.emitter;\n    } catch (err) {\n      throw err;\n    }\n  };\n  /**\n   * send raw staking transaction\n   *\n   * @param staking\n   * @ignore\n   *\n   * @warning\n   * ```\n   * At present, this function is not implement yet, will Coming soon!!!\n   * ```\n   */\n\n\n  Blockchain.prototype.sendRawStakingTransaction = function (staking) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, txn, result;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!staking.isSigned() || !staking) {\n              throw new Error('staking transaction is not signed or not exist');\n            }\n\n            return [4\n            /*yield*/\n            , staking.sendTransaction()];\n\n          case 1:\n            _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), txn = _a[0], result = _a[1];\n\n            if (txn.isPending()) {\n              return [2\n              /*return*/\n              , result];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * send raw staking transaction and check whether it exists\n   *\n   * @param staking\n   * @ignore\n   *\n   * @warning\n   * ```\n   * At present, this function is not implement yet, will Coming soon!!!\n   * ```\n   */\n\n\n  Blockchain.prototype.createObservedStakingTransaction = function (staking) {\n    try {\n      staking.sendTransaction().then(function (response) {\n        var _a = tslib_1.__read(response, 2),\n            txReturned = _a[0],\n            TranID = _a[1];\n\n        txReturned.confirm(TranID).then(function (txConfirmed) {\n          staking.emitter.resolve(txConfirmed);\n        });\n      });\n      return staking.emitter;\n    } catch (err) {\n      throw err;\n    }\n  };\n  /**\n   * Executes a message call or transaction and returns the amount of the gas used.\n   *\n   * @param to the address will send to\n   * @param data the data will send to that address\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `promise` -  the used gas for the simulated call/transaction.\n   *\n   * @warning\n   * ```\n   * At present, this function hmy_estimateGas is not implement yet, will Coming soon!!!\n   * ```\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.estimateGas({\n   *   to: 'one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n   *   data: '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.estimateGas = function (_a) {\n    var to = _a.to,\n        data = _a.data,\n        _b = _a.shardID,\n        shardID = _b === void 0 ? this.messenger.currentShard : _b;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.EstimateGas, [{\n              to: crypto_1.getAddress(to).checksum,\n              data: data\n            }], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _c.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current gas price oracle. The gas price is determined by the last few blocks median gas price.\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @return `promise` - Number string of the current gas price in wei.\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.gasPrice().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.gasPrice = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GasPrice, [], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a message call transaction,\n   * which is directly executed in the VM of the node, but never mined into the blockchain.\n   *\n   * @param payload some data you want put into these fucntions\n   * @param blockNumber by default it's `latest`\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * hmy.blockchain.call({\n   *   to: \"0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19\",\n   * }).then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Blockchain.prototype.call = function (_a) {\n    var payload = _a.payload,\n        _b = _a.blockNumber,\n        blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b,\n        _c = _a.shardID,\n        shardID = _c === void 0 ? this.messenger.currentShard : _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.Call, [payload, blockNumber], this.messenger.chainPrefix, shardID)];\n\n          case 1:\n            result = _d.sent();\n            return [2\n            /*return*/\n            , this.getRpcResult(result)];\n        }\n      });\n    });\n  };\n  /**\n   * Return new pending Transactions\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Harmony(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.newPendingTransactions();\n   * console.log(tmp)\n   * ```\n   */\n\n\n  Blockchain.prototype.newPendingTransactions = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    if (this.messenger.provider instanceof network_1.WSProvider) {\n      return new network_1.NewPendingTransactions(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  };\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Harmony(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.newBlockHeaders();\n   * console.log(tmp)\n   * ```\n   */\n\n\n  Blockchain.prototype.newBlockHeaders = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    if (this.messenger.provider instanceof network_1.WSProvider) {\n      return new network_1.NewHeaders(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  };\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Harmony(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.syncing();\n   * console.log(tmp)\n   * ```\n   */\n\n\n  Blockchain.prototype.syncing = function (shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    if (this.messenger.provider instanceof network_1.WSProvider) {\n      return new network_1.Syncing(this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  };\n  /**\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   *\n   * @example\n   * ```javascript\n   * const hmy = new Harmony(\n   *   // rpc url\n   *   'ws://api.s0.b.hmny.io/',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   *\n   * const tmp = hmy.blockchain.logs({\n   *   from: '0x12'\n   * });\n   * console.log(tmp)\n   * ```\n   */\n\n\n  Blockchain.prototype.logs = function (options, shardID) {\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    if (this.messenger.provider instanceof network_1.WSProvider) {\n      return new network_1.LogSub(options, this.messenger, shardID);\n    } else {\n      throw new Error('HttpProvider does not support this feature');\n    }\n  };\n\n  tslib_1.__decorate([utils_1.assertObject({\n    address: ['isValidAddress', utils_1.AssertType.required],\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getBalance\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockHash: ['isHash', utils_1.AssertType.required],\n    returnObject: ['isBoolean', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getBlockByHash\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    returnObject: ['isBoolean', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getBlockByNumber\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockHash: ['isHash', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getBlockTransactionCountByHash\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockNumber: ['isBlockNumber', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getBlockTransactionCountByNumber\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockHash: ['isHash', utils_1.AssertType.required],\n    index: ['isHex', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getTransactionByBlockHashAndIndex\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    index: ['isHex', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getTransactionByBlockNumberAndIndex\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    txnHash: ['isHash', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getTransactionByHash\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    txnHash: ['isString', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getTransactionReceipt\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    txnHash: ['isString', utils_1.AssertType.required],\n    shardID: ['isNumber', utils_1.AssertType.required]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getCxReceiptByHash\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    address: ['isValidAddress', utils_1.AssertType.required],\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getCode\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    address: ['isValidAddress', utils_1.AssertType.required],\n    position: ['isHex', utils_1.AssertType.required],\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getStorageAt\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    address: ['isValidAddress', utils_1.AssertType.required],\n    blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"getTransactionCount\", null);\n\n  tslib_1.__decorate([utils_1.assertObject({\n    to: ['isValidAddress', utils_1.AssertType.optional],\n    data: ['isHex', utils_1.AssertType.optional],\n    shardID: ['isNumber', utils_1.AssertType.optional]\n  }), tslib_1.__metadata(\"design:type\", Function), tslib_1.__metadata(\"design:paramtypes\", [Object]), tslib_1.__metadata(\"design:returntype\", Promise)], Blockchain.prototype, \"estimateGas\", null);\n\n  return Blockchain;\n}();\n\nexports.Blockchain = Blockchain;","map":{"version":3,"sources":["../src/blockchain.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n # @harmony-js/core\n\nThis package provides a collection of apis to interact with Harmony blockchain.\n\n## Installation\n\n```\nnpm install @harmony-js/core\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\n\nGetting balance of account `one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7`\n```javascript\n* hmy.blockchain\n*   .getBalance({ address: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7' })\n*   .then((response) => {\n*     console.log('balance in ONEs: ' + fromWei(hexToNumber(response.result), Units.one));\n*   });\n```\n\nGetting the latest block number\n```javascript\n* hmy.blockchain.getBlockNumber().then((response) => {\n*   console.log('current block number: ' + hexToNumber(response.result));\n* });\n```\n\nGetting the block using block hash\n```javascript\n* hmy.blockchain\n*   .getBlockByHash({\n*     blockHash: '0x08c46ae7249362a7d1f602d44c5a81f33ebdab6a7dcb6068f99610b57911aafd',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the block using block number\n```javascript\n* hmy.blockchain\n*   .getBlockByNumber({\n*     blockNumber: numberToHex(422635),\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction using hash\n```javascript\n* hmy.blockchain\n*   .getTransactionByHash({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction receipt\n```javascript\n* hmy.blockchain\n*   .getTransactionReceipt({\n*     txnHash: '0x56c73eb993b18dc04baacec5c2e9d1292a090f6a978a4a1c461db5255fcbc831',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the cross-shard transaction receipt\n```javascript\n* hmy.blockchain\n*   .getCxReceiptByHash({\n*     txnHash: '0xcd36a90ff5d5373285c2896ba7bbcd3f5324263c0cb8ecfb7cad2f5fc2fbdbda',\n*     shardID: 1,\n*   })\n*   .then((value) => {\n*     console.log(value.result);\n*   });\n```\n\nGetting the deployed smart contract code\n```javascript\n* hmy.blockchain\n*   .getCode({\n*     address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n*     blockNumber: 'latest',\n*   })\n*   .then((response) => {\n*     console.log(response.result);\n*   });\n```\n\nGetting the transaction count of an account\n```javascript\n* hmy.blockchain\n*   .getTransactionCount({\n*     address: 'one1pdv9lrdwl0rg5vglh4xtyrv3wjk3wsqket7zxy',\n*   })\n*   .then((response) => {\n*     console.log(hexToNumber(response.result));\n*   });\n```\n\nGetting the shard structure and details\n```javascript\n* hmy.blockchain.getShardingStructure().then((response) => {\n*   console.log(response.result);\n* });\n```\n\nTransferring funds using `sendTransaction`\n```javascript\n// key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* async function transfer() {\n*   const txn = hmy.transactions.newTx({\n*     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n*     value: new Unit(1).asOne().toWei(),\n*     // gas limit, you can use string\n*     gasLimit: '21000',\n*     // send token from shardID\n*     shardID: 0,\n*     // send token to toShardID\n*     toShardID: 0,\n*     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n*     gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),\n*   });\n\n*   // sign the transaction use wallet;\n*   const signedTxn = await hmy.wallet.signTransaction(txn);\n*   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n*   console.log(txnHash.result);\n* }\n\n* transfer();\n```\n *\n * @packageDocumentation\n * @module harmony-core\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Blockchain = void 0;\nvar tslib_1 = require(\"tslib\");\nvar network_1 = require(\"@harmony-js/network\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar Blockchain = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Blockchain(messenger) {\n        this.messenger = messenger;\n    }\n    /**\n     * @hidden\n     */\n    Blockchain.prototype.setMessenger = function (messenger) {\n        this.messenger = messenger;\n    };\n    /**\n     *\n     * @hidden\n     */\n    Blockchain.prototype.getRpcResult = function (result) {\n        if (result instanceof network_1.ResponseMiddleware) {\n            return result.getRaw;\n        }\n        else {\n            return result;\n        }\n    };\n    /**\n     * Get the balance of an address at a given block.\n     *\n     * @param address the address to get the balance of.\n     * @param blockNumber (option) If you pass this parameter it will not use the default block set with `DefaultBlockParams.latest`\n     * @param shardID (option) If you pass this parameter it will not use the default block set with `this.messenger.currentShard`\n     *\n     * @returns The current balance for the given address in wei.\n     *\n     * @hint\n     * ```\n     * the third param `shardID` is binding with the endpoint\n     * shard 0: localhost:9500\n     * shard 1: localhost:9501\n     * ```\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBalance({\n     *   address: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n     *   blockNumber: 'latest'\n     * }).then(value => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBalance = function (_a) {\n        var address = _a.address, _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBalance, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current block number.\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @return `Promise` - The number of the most recent block.\n     *\n     * @hint\n     * ```\n     * the third param `shardID` is binding with the endpoint\n     * shard 0: localhost:9500\n     * shard 1: localhost:9501\n     * ```\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBlockNumber().then((value) => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBlockNumber = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.BlockNumber, [], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a block matching the block Hash.\n     *\n     * @param blockHash the block hash\n     * @param returnObject By default it is `true`, Features in development, IGNORE it!\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` - The block object\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBlockByHash({\n     *   blockHash: '0x9cd821b576efdff61280e8857ef218fb2cff8db0cf0fb27dfceef7237042b79e',\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBlockByHash = function (_a) {\n        var blockHash = _a.blockHash, _b = _a.returnObject, returnObject = _b === void 0 ? true : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBlockByHash, [blockHash, returnObject], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a block matching the block Number.\n     *\n     * @param blockNumber the block number\n     * @param returnObject By default it is `true`, Features in development, IGNORE it!\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` - The block object\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBlockByNumber({\n     *   blockNumber: '0x89',\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBlockByNumber = function (_a) {\n        var _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.returnObject, returnObject = _c === void 0 ? true : _c, _d = _a.shardID, shardID = _d === void 0 ? this.messenger.currentShard : _d;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBlockByNumber, [blockNumber, returnObject], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _e.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the number of transaction in a given block.\n     *\n     * @param blockHash the block number Hash\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  The number of transactions in the given block.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBlockTransactionCountByHash({\n     *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1'\n     * }).then((value) => {\n     *   console.log(value):\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBlockTransactionCountByHash = function (_a) {\n        var blockHash = _a.blockHash, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBlockTransactionCountByHash, [blockHash], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the number of transaction in a given block.\n     *\n     * @param blockNumber the block number Hash\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  The number of transactions in the given block.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getBlockTransactionCountByNumber({\n     *   blockNumber: '0x2403C'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getBlockTransactionCountByNumber = function (_a) {\n        var blockNumber = _a.blockNumber, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBlockTransactionCountByNumber, [blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a transaction based on a block hash and the transactions index position.\n     *\n     * @param blockHash the block number Hash\n     * @param index The transactions index position. **Hex Number**\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  A transaction object\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getTransactionByBlockHashAndIndex({\n     *   blockHash: '0x4142514a238157e7fe57b9d54abedb33943507fa15b3799954c273a12705ced1',\n     *   index: '0x0'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getTransactionByBlockHashAndIndex = function (_a) {\n        var blockHash = _a.blockHash, index = _a.index, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionByBlockHashAndIndex, [blockHash, index], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a transaction based on a block number and the transactions index position.\n     *\n     * @param blockNumber the block number\n     * @param index The transactions index position. **Hex Number**\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  A transaction object\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getTransactionByBlockNumberAndIndex({\n     *   blockNumber: '0x2403C',\n     *   index: '0x0'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getTransactionByBlockNumberAndIndex = function (_a) {\n        var _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, index = _a.index, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionByBlockNumberAndIndex, [blockNumber, index], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a transaction matching the given transaction hash.\n     *\n     * @param txnHash The transaction hash\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  A transaction object\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getTransactionByHash({\n     *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getTransactionByHash = function (_a) {\n        var txnHash = _a.txnHash, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionByHash, [txnHash], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the receipt of a transaction by transaction hash.\n     *\n     * @param txnHash The transaction hash\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getTransactionReceipt({\n     *   txnHash: '0x146a0cf7e8da45b44194207c4e7785564527059483b765f9a04424554443b224'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getTransactionReceipt = function (_a) {\n        var txnHash = _a.txnHash, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionReceipt, [txnHash], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get transaction recepit from cross shard transaction\n     *\n     * @param txnHash The transaction hash\n     * @param shardID the shard id of receiver's address\n     * @returns `Promise` -  A transaction receipt object, or `null` when no receipt was found\n     *\n     * @example\n     * ```javascript\n     * // This transaction sends from shard 0 to shard 1\n     * hmy.blockchain.getCxReceiptByHash({\n     *   txnHash: '0x7fae9252fbda68d718e610bc10cf2b5c6a9cafb42d4a6b9d6e392c77d587b9ea',\n     *   shardID: 1,\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getCxReceiptByHash = function (_a) {\n        var txnHash = _a.txnHash, shardID = _a.shardID;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetCXReceiptByHash, [txnHash], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _b.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the code at a specific address.\n     *\n     * @param address The address to get the code from (eg:smart contract)\n     * @param blockNumber (OPTIONAL) If you pass this parameter it will not use the default block\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @return `Promise` - The data at given `address`\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getCode({\n     *   address: '0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19',\n     *   blockNumber: 'latest'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getCode = function (_a) {\n        var address = _a.address, _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetCode, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the number of peers connected to.\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` - number of peer count\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.net_peerCount().then((value) => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.net_peerCount = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.PeerCount, [], 'net', shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the version of net.\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` - the current version.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.net_version().then((value) => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.net_version = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.NetVersion, [], 'net', shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the protocal version.\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @returns `Promise` - the current protocol version.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getProtocolVersion().then((value) => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getProtocolVersion = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.ProtocolVersion, [], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the storage at a specific position of an address\n     *\n     * @param address The address to get the storage from\n     * @param position The index position of the storage\n     * @param blockNumber by default it's `latest`.\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getStorageAt({\n     *   address: 'one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n     *   position: '0x0'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getStorageAt = function (_a) {\n        var address = _a.address, position = _a.position, _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetStorageAt, [crypto_1.getAddress(address).checksum, position, blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the numbers of transactions sent from this address.\n     *\n     * @param address The address to get the numbers of transactions from\n     * @param blockNumber by default it's `latest`\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @return `Promise` - The number of transactions sent from the given address.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getTransactionCount({\n     *   address: \"one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g\"\n     * }).then((value) => {\n     *   console.log(value.result);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getTransactionCount = function (_a) {\n        var address = _a.address, _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionCount, [crypto_1.getAddress(address).checksum, blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Get the sharding structure of current network\n     *\n     * @return `Promise` - The sharding structure of current network.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.getShardingStructure().then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.getShardingStructure = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetShardingStructure, [], this.messenger.chainPrefix)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Sends a signed transaction to the network.\n     *\n     * @param transaction `Object` - The transaction object to send:\n     * @return The **callbalck** will return the 32 bytes transaction hash\n     *\n     * @example\n     * ```javascript\n     * // add privateKey to wallet\n     * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * hmy.wallet.addByPrivateKey(privateKey);\n     *\n     * async function transfer() {\n     *   const txn = hmy.transactions.newTx({\n     *     //  token send to\n     *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n     *     // amount to send\n     *     value: '10000',\n     *     // gas limit, you can use string\n     *     gasLimit: '210000',\n     *     // send token from shardID\n     *     shardID: 0,\n     *     // send token to toShardID\n     *     toShardID: 0,\n     *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n     *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n     *   });\n     *\n     *   // sign the transaction use wallet;\n     *   const signedTxn = await hmy.wallet.signTransaction(txn);\n     *   const txnHash = await hmy.blockchain.sendTransaction(signedTxn);\n     *   console.log(txnHash.result);\n     * }\n     *\n     * transfer();\n     * ```\n     */\n    Blockchain.prototype.sendTransaction = function (transaction) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!transaction.isSigned() || !transaction) {\n                            throw new Error('transaction is not signed or not exist');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.SendRawTransaction, [transaction.getRawTransaction()], this.messenger.chainPrefix, typeof transaction.txParams.shardID === 'string'\n                                ? Number.parseInt(transaction.txParams.shardID, 10)\n                                : transaction.txParams.shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Sends a raw transaction to the network.\n     *\n     * @param transaction `Object` - The transaction object to send:\n     * @return The **callbalck** will return the 32 bytes transaction hash\n     *\n     * @example\n     * ```javascript\n     * // add privateKey to wallet\n     * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * hmy.wallet.addByPrivateKey(privateKey);\n     *\n     * async function transfer() {\n     *   const txn = hmy.transactions.newTx({\n     *     //  token send to\n     *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n     *     // amount to send\n     *     value: '10000',\n     *     // gas limit, you can use string\n     *     gasLimit: '210000',\n     *     // send token from shardID\n     *     shardID: 0,\n     *     // send token to toShardID\n     *     toShardID: 0,\n     *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n     *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n     *   });\n     *\n     *   // sign the transaction use wallet;\n     *   const signedTxn = await hmy.wallet.signTransaction(txn);\n     *   recovered = signedTxn.recover(signedTxn.rawTransaction);\n     *\n     *   const txnHash = await hmy.blockchain.sendRawTransaction(recovered);\n     *   console.log(txnHash);\n     * }\n     *\n     * transfer();\n     * ```\n     */\n    Blockchain.prototype.sendRawTransaction = function (transaction) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, txn, result;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!transaction.isSigned() || !transaction) {\n                            throw new Error('transaction is not signed or not exist');\n                        }\n                        return [4 /*yield*/, transaction.sendTransaction()];\n                    case 1:\n                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), txn = _a[0], result = _a[1];\n                        if (txn.isPending()) {\n                            return [2 /*return*/, result];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * send a transaction and check whether it exists\n     *\n     * @param transaction `Object` - The transaction object to send:\n     * @return The **callbalck** will return the 32 bytes transaction hash\n     *\n     * @example\n     * ```javascript\n     * // add privateKey to wallet\n     * const privateKey = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * hmy.wallet.addByPrivateKey(privateKey);\n     *\n     * async function transfer() {\n     *   const txn = hmy.transactions.newTx({\n     *     //  token send to\n     *     to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n     *     // amount to send\n     *     value: '10000',\n     *     // gas limit, you can use string\n     *     gasLimit: '210000',\n     *     // send token from shardID\n     *     shardID: 0,\n     *     // send token to toShardID\n     *     toShardID: 0,\n     *     // gas Price, you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n     *     gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n     *   });\n     *\n     *   // sign the transaction use wallet;\n     *   const signedTxn = await hmy.wallet.signTransaction(txn);\n     *   const txnHash = await hmy.blockchain.createObservedTransaction(signedTxn);\n     *   console.log(txnHash);\n     * }\n     *\n     * transfer();\n     * ```\n     */\n    Blockchain.prototype.createObservedTransaction = function (transaction) {\n        try {\n            transaction.sendTransaction().then(function (response) {\n                var _a = tslib_1.__read(response, 2), txReturned = _a[0], TranID = _a[1];\n                txReturned.confirm(TranID).then(function (txConfirmed) {\n                    transaction.emitter.resolve(txConfirmed);\n                });\n            });\n            return transaction.emitter;\n        }\n        catch (err) {\n            throw err;\n        }\n    };\n    /**\n     * send raw staking transaction\n     *\n     * @param staking\n     * @ignore\n     *\n     * @warning\n     * ```\n     * At present, this function is not implement yet, will Coming soon!!!\n     * ```\n     */\n    Blockchain.prototype.sendRawStakingTransaction = function (staking) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, txn, result;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!staking.isSigned() || !staking) {\n                            throw new Error('staking transaction is not signed or not exist');\n                        }\n                        return [4 /*yield*/, staking.sendTransaction()];\n                    case 1:\n                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), txn = _a[0], result = _a[1];\n                        if (txn.isPending()) {\n                            return [2 /*return*/, result];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * send raw staking transaction and check whether it exists\n     *\n     * @param staking\n     * @ignore\n     *\n     * @warning\n     * ```\n     * At present, this function is not implement yet, will Coming soon!!!\n     * ```\n     */\n    Blockchain.prototype.createObservedStakingTransaction = function (staking) {\n        try {\n            staking.sendTransaction().then(function (response) {\n                var _a = tslib_1.__read(response, 2), txReturned = _a[0], TranID = _a[1];\n                txReturned.confirm(TranID).then(function (txConfirmed) {\n                    staking.emitter.resolve(txConfirmed);\n                });\n            });\n            return staking.emitter;\n        }\n        catch (err) {\n            throw err;\n        }\n    };\n    /**\n     * Executes a message call or transaction and returns the amount of the gas used.\n     *\n     * @param to the address will send to\n     * @param data the data will send to that address\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @return `promise` -  the used gas for the simulated call/transaction.\n     *\n     * @warning\n     * ```\n     * At present, this function hmy_estimateGas is not implement yet, will Coming soon!!!\n     * ```\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.estimateGas({\n     *   to: 'one1d0kw95t6kkljmkk9vu0zv25jraut8ngv5vrs5g',\n     *   data: '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.estimateGas = function (_a) {\n        var to = _a.to, data = _a.data, _b = _a.shardID, shardID = _b === void 0 ? this.messenger.currentShard : _b;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.EstimateGas, [{ to: crypto_1.getAddress(to).checksum, data: data }], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _c.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current gas price oracle. The gas price is determined by the last few blocks median gas price.\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     * @return `promise` - Number string of the current gas price in wei.\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.gasPrice().then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.gasPrice = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GasPrice, [], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Executes a message call transaction,\n     * which is directly executed in the VM of the node, but never mined into the blockchain.\n     *\n     * @param payload some data you want put into these fucntions\n     * @param blockNumber by default it's `latest`\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * hmy.blockchain.call({\n     *   to: \"0x08AE1abFE01aEA60a47663bCe0794eCCD5763c19\",\n     * }).then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Blockchain.prototype.call = function (_a) {\n        var payload = _a.payload, _b = _a.blockNumber, blockNumber = _b === void 0 ? utils_1.DefaultBlockParams.latest : _b, _c = _a.shardID, shardID = _c === void 0 ? this.messenger.currentShard : _c;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.Call, [payload, blockNumber], this.messenger.chainPrefix, shardID)];\n                    case 1:\n                        result = _d.sent();\n                        return [2 /*return*/, this.getRpcResult(result)];\n                }\n            });\n        });\n    };\n    /**\n     * Return new pending Transactions\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * const hmy = new Harmony(\n     *   // rpc url\n     *   'ws://api.s0.b.hmny.io/',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     *\n     * const tmp = hmy.blockchain.newPendingTransactions();\n     * console.log(tmp)\n     * ```\n     */\n    Blockchain.prototype.newPendingTransactions = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (this.messenger.provider instanceof network_1.WSProvider) {\n            return new network_1.NewPendingTransactions(this.messenger, shardID);\n        }\n        else {\n            throw new Error('HttpProvider does not support this feature');\n        }\n    };\n    /**\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * const hmy = new Harmony(\n     *   // rpc url\n     *   'ws://api.s0.b.hmny.io/',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     *\n     * const tmp = hmy.blockchain.newBlockHeaders();\n     * console.log(tmp)\n     * ```\n     */\n    Blockchain.prototype.newBlockHeaders = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (this.messenger.provider instanceof network_1.WSProvider) {\n            return new network_1.NewHeaders(this.messenger, shardID);\n        }\n        else {\n            throw new Error('HttpProvider does not support this feature');\n        }\n    };\n    /**\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * const hmy = new Harmony(\n     *   // rpc url\n     *   'ws://api.s0.b.hmny.io/',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     *\n     * const tmp = hmy.blockchain.syncing();\n     * console.log(tmp)\n     * ```\n     */\n    Blockchain.prototype.syncing = function (shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (this.messenger.provider instanceof network_1.WSProvider) {\n            return new network_1.Syncing(this.messenger, shardID);\n        }\n        else {\n            throw new Error('HttpProvider does not support this feature');\n        }\n    };\n    /**\n     *\n     * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n     *\n     * @example\n     * ```javascript\n     * const hmy = new Harmony(\n     *   // rpc url\n     *   'ws://api.s0.b.hmny.io/',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     *\n     * const tmp = hmy.blockchain.logs({\n     *   from: '0x12'\n     * });\n     * console.log(tmp)\n     * ```\n     */\n    Blockchain.prototype.logs = function (options, shardID) {\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (this.messenger.provider instanceof network_1.WSProvider) {\n            return new network_1.LogSub(options, this.messenger, shardID);\n        }\n        else {\n            throw new Error('HttpProvider does not support this feature');\n        }\n    };\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            address: ['isValidAddress', utils_1.AssertType.required],\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getBalance\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockHash: ['isHash', utils_1.AssertType.required],\n            returnObject: ['isBoolean', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getBlockByHash\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            returnObject: ['isBoolean', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getBlockByNumber\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockHash: ['isHash', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getBlockTransactionCountByHash\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockNumber: ['isBlockNumber', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getBlockTransactionCountByNumber\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockHash: ['isHash', utils_1.AssertType.required],\n            index: ['isHex', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getTransactionByBlockHashAndIndex\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            index: ['isHex', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getTransactionByBlockNumberAndIndex\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            txnHash: ['isHash', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getTransactionByHash\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            txnHash: ['isString', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getTransactionReceipt\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            txnHash: ['isString', utils_1.AssertType.required],\n            shardID: ['isNumber', utils_1.AssertType.required],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getCxReceiptByHash\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            address: ['isValidAddress', utils_1.AssertType.required],\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getCode\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            address: ['isValidAddress', utils_1.AssertType.required],\n            position: ['isHex', utils_1.AssertType.required],\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getStorageAt\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            address: ['isValidAddress', utils_1.AssertType.required],\n            blockNumber: ['isBlockNumber', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"getTransactionCount\", null);\n    tslib_1.__decorate([\n        utils_1.assertObject({\n            to: ['isValidAddress', utils_1.AssertType.optional],\n            data: ['isHex', utils_1.AssertType.optional],\n            shardID: ['isNumber', utils_1.AssertType.optional],\n        }),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", Promise)\n    ], Blockchain.prototype, \"estimateGas\", null);\n    return Blockchain;\n}());\nexports.Blockchain = Blockchain;\n//# sourceMappingURL=blockchain.js.map"]},"metadata":{},"sourceType":"script"}