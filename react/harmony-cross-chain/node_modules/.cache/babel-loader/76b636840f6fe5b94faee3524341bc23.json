{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWeb3Client = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst EthMethods_1 = require(\"./EthMethods\");\n\nconst EthMethodsERC20_1 = require(\"./EthMethodsERC20\");\n\nconst Web3 = require('web3');\n\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\n\nconst LINKEthManager_1 = tslib_1.__importDefault(require(\"../out/LINKEthManager\"));\n\nconst EthManagerERC20_1 = tslib_1.__importDefault(require(\"../out/EthManagerERC20\"));\n\nconst EthManagerERC721_1 = tslib_1.__importDefault(require(\"../out/EthManagerERC721\"));\n\nexports.getWeb3Client = params => {\n  let web3URL;\n\n  try {\n    web3URL = window.web3.currentProvider;\n  } catch (e) {\n    web3URL = params.nodeURL;\n  }\n\n  const web3 = new Web3(web3URL);\n  let ethUserAccount;\n  const {\n    contracts,\n    gasPrice = 100000000000,\n    gasLimit = 150000,\n    gasApiKey = ''\n  } = params;\n  const ethBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);\n  const ethBUSDManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.busdManager);\n  const ethLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);\n  const ethLINKManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.linkManager);\n  const ethMethodsBUSD = new EthMethods_1.EthMethods({\n    web3: web3,\n    ethTokenContract: ethBUSDContract,\n    ethManagerContract: ethBUSDManagerContract,\n    ethManagerAddress: contracts.busdManager,\n    gasPrice,\n    gasLimit,\n    gasApiKey\n  });\n  const ethMethodsLINK = new EthMethods_1.EthMethods({\n    web3: web3,\n    ethTokenContract: ethLINKContract,\n    ethManagerContract: ethLINKManagerContract,\n    ethManagerAddress: contracts.linkManager,\n    gasPrice,\n    gasLimit,\n    gasApiKey\n  });\n  const ethManagerContract = new web3.eth.Contract(EthManagerERC20_1.default, contracts.erc20Manager);\n  const ethMethodsERC20 = new EthMethodsERC20_1.EthMethodsERC20({\n    web3: web3,\n    ethManagerContract: ethManagerContract,\n    ethManagerAddress: contracts.erc20Manager,\n    gasPrice,\n    gasLimit,\n    gasApiKey\n  });\n  const ethManagerContractERC721 = new web3.eth.Contract(EthManagerERC721_1.default, contracts.erc721Manager);\n  const ethMethodsERС721 = new EthMethodsERC20_1.EthMethodsERC20({\n    web3: web3,\n    ethManagerContract: ethManagerContractERC721,\n    ethManagerAddress: contracts.erc721Manager,\n    gasPrice,\n    gasLimit,\n    gasApiKey\n  });\n\n  const getEthBalance = ethAddress => {\n    return new Promise((resolve, reject) => {\n      web3.eth.getBalance(ethAddress, (err, balance) => {\n        if (err) {\n          reject(err);\n        }\n\n        resolve(String(Number(balance) / 1e18));\n      });\n    });\n  };\n\n  return {\n    addWallet: async privateKey => {\n      ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);\n      web3.eth.accounts.wallet.add(ethUserAccount);\n      web3.eth.defaultAccount = ethUserAccount.address;\n    },\n    web3,\n    getEthBalance,\n    ethMethodsBUSD,\n    ethMethodsLINK,\n    ethMethodsERC20,\n    ethMethodsERС721,\n    getUserAddress: () => ethUserAccount && ethUserAccount.address,\n    setUseMetamask: value => {\n      ethMethodsBUSD.setUseMetamask(value);\n      ethMethodsLINK.setUseMetamask(value);\n      ethMethodsERC20.setUseMetamask(value);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/eth/index.js"],"names":["Object","defineProperty","exports","value","getWeb3Client","tslib_1","require","EthMethods_1","EthMethodsERC20_1","Web3","MyERC20_1","__importDefault","LINKEthManager_1","EthManagerERC20_1","EthManagerERC721_1","params","web3URL","window","web3","currentProvider","e","nodeURL","ethUserAccount","contracts","gasPrice","gasLimit","gasApiKey","ethBUSDContract","eth","Contract","default","busd","ethBUSDManagerContract","busdManager","ethLINKContract","link","ethLINKManagerContract","linkManager","ethMethodsBUSD","EthMethods","ethTokenContract","ethManagerContract","ethManagerAddress","ethMethodsLINK","erc20Manager","ethMethodsERC20","EthMethodsERC20","ethManagerContractERC721","erc721Manager","ethMethodsERС721","getEthBalance","ethAddress","Promise","resolve","reject","getBalance","err","balance","String","Number","addWallet","privateKey","accounts","privateKeyToAccount","wallet","add","defaultAccount","address","getUserAddress","setUseMetamask"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWeb3Client = void 0;\nconst tslib_1 = require(\"tslib\");\nconst EthMethods_1 = require(\"./EthMethods\");\nconst EthMethodsERC20_1 = require(\"./EthMethodsERC20\");\nconst Web3 = require('web3');\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\nconst LINKEthManager_1 = tslib_1.__importDefault(require(\"../out/LINKEthManager\"));\nconst EthManagerERC20_1 = tslib_1.__importDefault(require(\"../out/EthManagerERC20\"));\nconst EthManagerERC721_1 = tslib_1.__importDefault(require(\"../out/EthManagerERC721\"));\nexports.getWeb3Client = (params) => {\n    let web3URL;\n    try {\n        web3URL = window.web3.currentProvider;\n    }\n    catch (e) {\n        web3URL = params.nodeURL;\n    }\n    const web3 = new Web3(web3URL);\n    let ethUserAccount;\n    const { contracts, gasPrice = 100000000000, gasLimit = 150000, gasApiKey = '' } = params;\n    const ethBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);\n    const ethBUSDManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.busdManager);\n    const ethLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);\n    const ethLINKManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.linkManager);\n    const ethMethodsBUSD = new EthMethods_1.EthMethods({\n        web3: web3,\n        ethTokenContract: ethBUSDContract,\n        ethManagerContract: ethBUSDManagerContract,\n        ethManagerAddress: contracts.busdManager,\n        gasPrice,\n        gasLimit,\n        gasApiKey,\n    });\n    const ethMethodsLINK = new EthMethods_1.EthMethods({\n        web3: web3,\n        ethTokenContract: ethLINKContract,\n        ethManagerContract: ethLINKManagerContract,\n        ethManagerAddress: contracts.linkManager,\n        gasPrice,\n        gasLimit,\n        gasApiKey,\n    });\n    const ethManagerContract = new web3.eth.Contract(EthManagerERC20_1.default, contracts.erc20Manager);\n    const ethMethodsERC20 = new EthMethodsERC20_1.EthMethodsERC20({\n        web3: web3,\n        ethManagerContract: ethManagerContract,\n        ethManagerAddress: contracts.erc20Manager,\n        gasPrice,\n        gasLimit,\n        gasApiKey,\n    });\n    const ethManagerContractERC721 = new web3.eth.Contract(EthManagerERC721_1.default, contracts.erc721Manager);\n    const ethMethodsERС721 = new EthMethodsERC20_1.EthMethodsERC20({\n        web3: web3,\n        ethManagerContract: ethManagerContractERC721,\n        ethManagerAddress: contracts.erc721Manager,\n        gasPrice,\n        gasLimit,\n        gasApiKey,\n    });\n    const getEthBalance = (ethAddress) => {\n        return new Promise((resolve, reject) => {\n            web3.eth.getBalance(ethAddress, (err, balance) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve(String(Number(balance) / 1e18));\n            });\n        });\n    };\n    return {\n        addWallet: async (privateKey) => {\n            ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);\n            web3.eth.accounts.wallet.add(ethUserAccount);\n            web3.eth.defaultAccount = ethUserAccount.address;\n        },\n        web3,\n        getEthBalance,\n        ethMethodsBUSD,\n        ethMethodsLINK,\n        ethMethodsERC20,\n        ethMethodsERС721,\n        getUserAddress: () => ethUserAccount && ethUserAccount.address,\n        setUseMetamask: (value) => {\n            ethMethodsBUSD.setUseMetamask(value);\n            ethMethodsLINK.setUseMetamask(value);\n            ethMethodsERC20.setUseMetamask(value);\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"script"}