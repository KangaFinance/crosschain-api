{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-account\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HDNode = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar transaction_1 = require(\"@harmony-js/transaction\");\n\nvar account_1 = require(\"./account\");\n\nvar HDNode = function () {\n  function HDNode(provider, menmonic, index, addressCount, shardID, chainType, chainId, gasLimit, gasPrice) {\n    if (provider === void 0) {\n      provider = 'http://localhost:9500';\n    }\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (addressCount === void 0) {\n      addressCount = 1;\n    }\n\n    if (shardID === void 0) {\n      shardID = 0;\n    }\n\n    if (chainType === void 0) {\n      chainType = utils_1.ChainType.Harmony;\n    }\n\n    if (chainId === void 0) {\n      chainId = utils_1.ChainID.Default;\n    }\n\n    if (gasLimit === void 0) {\n      gasLimit = '1000000';\n    }\n\n    if (gasPrice === void 0) {\n      gasPrice = '2000000000';\n    }\n\n    this.provider = this.setProvider(provider);\n    this.shardID = shardID;\n    this.messenger = new network_1.Messenger(this.provider, chainType, chainId);\n    this.messenger.setDefaultShardID(this.shardID);\n    this.hdwallet = undefined;\n    this.addresses = [];\n    this.wallets = {};\n    this.path = chainType === utils_1.ChainType.Harmony ? utils_1.HDPath : \"m/44'/60'/0'/0/\";\n    this.index = index;\n    this.addressCount = addressCount;\n    this.getHdWallet(menmonic || HDNode.generateMnemonic());\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n  }\n\n  HDNode.isValidMnemonic = function (phrase) {\n    if (phrase.trim().split(/\\s+/g).length < 12) {\n      return false;\n    }\n\n    return crypto_1.bip39.validateMnemonic(phrase);\n  };\n\n  HDNode.generateMnemonic = function () {\n    return crypto_1.bip39.generateMnemonic();\n  };\n\n  HDNode.prototype.normalizePrivateKeys = function (mnemonic) {\n    if (Array.isArray(mnemonic)) {\n      return mnemonic;\n    } else if (mnemonic && !mnemonic.includes(' ')) {\n      return [mnemonic];\n    } else {\n      return false;\n    }\n  };\n\n  HDNode.prototype.setProvider = function (provider) {\n    if (utils_1.isHttp(provider) && typeof provider === 'string') {\n      return new network_1.HttpProvider(provider);\n    } else if (provider instanceof network_1.HttpProvider) {\n      return provider;\n    } else if (utils_1.isWs(provider) && typeof provider === 'string') {\n      return new network_1.WSProvider(provider);\n    } else if (provider instanceof network_1.WSProvider) {\n      return provider;\n    } else {\n      throw new Error('provider is not recognized');\n    }\n  };\n\n  HDNode.prototype.getHdWallet = function (mnemonic) {\n    if (!HDNode.isValidMnemonic(mnemonic)) {\n      throw new Error('Mnemonic invalid or undefined');\n    }\n\n    this.hdwallet = crypto_1.hdkey.fromMasterSeed(crypto_1.bip39.mnemonicToSeed(mnemonic));\n\n    for (var i = this.index; i < this.index + this.addressCount; i++) {\n      if (!this.hdwallet) {\n        throw new Error('hdwallet is not found');\n      }\n\n      var childKey = this.hdwallet.derive(\"\" + this.path + i);\n      var prv = childKey.privateKey.toString('hex');\n      var account = new account_1.Account(prv);\n      var addr = account.checksumAddress;\n      this.addresses.push(addr);\n      this.wallets[addr] = account;\n    }\n  }; // tslint:disable-next-line: ban-types\n\n\n  HDNode.prototype.getAccounts = function (cb) {\n    if (cb) {\n      cb(null, this.addresses);\n    }\n\n    return this.addresses;\n  }; // tslint:disable-next-line: ban-types\n\n\n  HDNode.prototype.getPrivateKey = function (address, cb) {\n    if (!cb) {\n      if (!this.wallets[address]) {\n        throw new Error('Account not found');\n      } else {\n        return this.wallets[address].privateKey;\n      }\n    }\n\n    if (!this.wallets[address]) {\n      return cb('Account not found');\n    } else {\n      cb(null, this.wallets[address].privateKey);\n    }\n  }; // tslint:disable-next-line: ban-types\n\n\n  HDNode.prototype.signTransaction = function (txParams) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var from, accountNonce, to, gasLimit, gasPrice, value, nonce, data, prv, signerAccount, tx, signed;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            from = txParams.from ? crypto_1.getAddress(txParams.from).checksum : '0x';\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetAccountNonce, [from, 'latest'], 'hmy', this.shardID)];\n\n          case 1:\n            accountNonce = _a.sent();\n            to = txParams.to ? crypto_1.getAddress(txParams.to).checksum : '0x';\n            gasLimit = new utils_1.Unit('0').asWei().toWei();\n\n            if (txParams.gas !== undefined && utils_1.isHex(txParams.gas)) {\n              gasLimit = new utils_1.Unit(txParams.gas).asWei().toWei().lt(new utils_1.Unit(this.gasLimit).asWei().toWei()) ? new utils_1.Unit(txParams.gas).asWei().toWei() : new utils_1.Unit(this.gasLimit).asWei().toWei();\n            }\n\n            if (txParams.gasLimit !== undefined && utils_1.isHex(txParams.gasLimit)) {\n              gasLimit = new utils_1.Unit(txParams.gasLimit).asWei().toWei().lt(new utils_1.Unit(this.gasLimit).asWei().toWei()) ? new utils_1.Unit(txParams.gasLimit).asWei().toWei() : new utils_1.Unit(this.gasLimit).asWei().toWei();\n            }\n\n            gasPrice = new utils_1.Unit('0').asWei().toWei();\n\n            if (txParams.gasPrice !== undefined && utils_1.isHex(txParams.gasPrice)) {\n              gasPrice = new utils_1.Unit(txParams.gasPrice).asWei().toWei().lt(new utils_1.Unit(this.gasPrice).asWei().toWei()) ? new utils_1.Unit(txParams.gasPrice).asWei().toWei() : new utils_1.Unit(this.gasPrice).asWei().toWei();\n            }\n\n            value = txParams.value !== undefined && utils_1.isHex(txParams.value) ? txParams.value : '0';\n            nonce = txParams.nonce !== undefined && utils_1.isHex(txParams.nonce) ? Number.parseInt(utils_1.hexToNumber(txParams.nonce), 10) : accountNonce.result;\n            data = txParams.data !== undefined && utils_1.isHex(txParams.data) ? txParams.data : '0x';\n            prv = this.wallets[from].privateKey;\n            signerAccount = new account_1.Account(prv, this.messenger);\n            tx = new transaction_1.Transaction(tslib_1.__assign(tslib_1.__assign({}, txParams), {\n              from: from,\n              to: to,\n              gasLimit: gasLimit,\n              gasPrice: gasPrice,\n              value: value,\n              nonce: nonce,\n              data: data,\n              shardID: this.shardID,\n              chainId: this.messenger.chainId\n            }), this.messenger, transaction_1.TxStatus.INTIALIZED);\n            return [4\n            /*yield*/\n            , signerAccount.signTransaction(tx)];\n\n          case 2:\n            signed = _a.sent();\n            return [2\n            /*return*/\n            , signed.getRawTransaction()];\n        }\n      });\n    });\n  };\n\n  HDNode.prototype.getAddress = function (idx) {\n    if (!idx) {\n      return this.addresses[0];\n    } else {\n      return this.addresses[idx];\n    }\n  };\n\n  HDNode.prototype.getAddresses = function () {\n    return this.addresses;\n  };\n\n  HDNode.prototype.addByPrivateKey = function (privateKey) {\n    var account = new account_1.Account(privateKey);\n    var addr = account.checksumAddress;\n    this.addresses.push(addr);\n    this.wallets[addr] = account;\n    return addr;\n  };\n\n  HDNode.prototype.setSigner = function (address) {\n    var foundIndex = this.addresses.findIndex(function (value) {\n      return value === address;\n    });\n    this.addresses.slice(foundIndex, foundIndex + 1);\n    this.addresses.unshift(address);\n  };\n\n  return HDNode;\n}();\n\nexports.HDNode = HDNode;","map":{"version":3,"sources":["../src/hdnode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-account\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HDNode = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar account_1 = require(\"./account\");\nvar HDNode = /** @class */ (function () {\n    function HDNode(provider, menmonic, index, addressCount, shardID, chainType, chainId, gasLimit, gasPrice) {\n        if (provider === void 0) { provider = 'http://localhost:9500'; }\n        if (index === void 0) { index = 0; }\n        if (addressCount === void 0) { addressCount = 1; }\n        if (shardID === void 0) { shardID = 0; }\n        if (chainType === void 0) { chainType = utils_1.ChainType.Harmony; }\n        if (chainId === void 0) { chainId = utils_1.ChainID.Default; }\n        if (gasLimit === void 0) { gasLimit = '1000000'; }\n        if (gasPrice === void 0) { gasPrice = '2000000000'; }\n        this.provider = this.setProvider(provider);\n        this.shardID = shardID;\n        this.messenger = new network_1.Messenger(this.provider, chainType, chainId);\n        this.messenger.setDefaultShardID(this.shardID);\n        this.hdwallet = undefined;\n        this.addresses = [];\n        this.wallets = {};\n        this.path = chainType === utils_1.ChainType.Harmony ? utils_1.HDPath : \"m/44'/60'/0'/0/\";\n        this.index = index;\n        this.addressCount = addressCount;\n        this.getHdWallet(menmonic || HDNode.generateMnemonic());\n        this.gasLimit = gasLimit;\n        this.gasPrice = gasPrice;\n    }\n    HDNode.isValidMnemonic = function (phrase) {\n        if (phrase.trim().split(/\\s+/g).length < 12) {\n            return false;\n        }\n        return crypto_1.bip39.validateMnemonic(phrase);\n    };\n    HDNode.generateMnemonic = function () {\n        return crypto_1.bip39.generateMnemonic();\n    };\n    HDNode.prototype.normalizePrivateKeys = function (mnemonic) {\n        if (Array.isArray(mnemonic)) {\n            return mnemonic;\n        }\n        else if (mnemonic && !mnemonic.includes(' ')) {\n            return [mnemonic];\n        }\n        else {\n            return false;\n        }\n    };\n    HDNode.prototype.setProvider = function (provider) {\n        if (utils_1.isHttp(provider) && typeof provider === 'string') {\n            return new network_1.HttpProvider(provider);\n        }\n        else if (provider instanceof network_1.HttpProvider) {\n            return provider;\n        }\n        else if (utils_1.isWs(provider) && typeof provider === 'string') {\n            return new network_1.WSProvider(provider);\n        }\n        else if (provider instanceof network_1.WSProvider) {\n            return provider;\n        }\n        else {\n            throw new Error('provider is not recognized');\n        }\n    };\n    HDNode.prototype.getHdWallet = function (mnemonic) {\n        if (!HDNode.isValidMnemonic(mnemonic)) {\n            throw new Error('Mnemonic invalid or undefined');\n        }\n        this.hdwallet = crypto_1.hdkey.fromMasterSeed(crypto_1.bip39.mnemonicToSeed(mnemonic));\n        for (var i = this.index; i < this.index + this.addressCount; i++) {\n            if (!this.hdwallet) {\n                throw new Error('hdwallet is not found');\n            }\n            var childKey = this.hdwallet.derive(\"\" + this.path + i);\n            var prv = childKey.privateKey.toString('hex');\n            var account = new account_1.Account(prv);\n            var addr = account.checksumAddress;\n            this.addresses.push(addr);\n            this.wallets[addr] = account;\n        }\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.getAccounts = function (cb) {\n        if (cb) {\n            cb(null, this.addresses);\n        }\n        return this.addresses;\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.getPrivateKey = function (address, cb) {\n        if (!cb) {\n            if (!this.wallets[address]) {\n                throw new Error('Account not found');\n            }\n            else {\n                return this.wallets[address].privateKey;\n            }\n        }\n        if (!this.wallets[address]) {\n            return cb('Account not found');\n        }\n        else {\n            cb(null, this.wallets[address].privateKey);\n        }\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.signTransaction = function (txParams) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var from, accountNonce, to, gasLimit, gasPrice, value, nonce, data, prv, signerAccount, tx, signed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        from = txParams.from ? crypto_1.getAddress(txParams.from).checksum : '0x';\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetAccountNonce, [from, 'latest'], 'hmy', this.shardID)];\n                    case 1:\n                        accountNonce = _a.sent();\n                        to = txParams.to ? crypto_1.getAddress(txParams.to).checksum : '0x';\n                        gasLimit = new utils_1.Unit('0').asWei().toWei();\n                        if (txParams.gas !== undefined && utils_1.isHex(txParams.gas)) {\n                            gasLimit = new utils_1.Unit(txParams.gas)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasLimit).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gas).asWei().toWei()\n                                : new utils_1.Unit(this.gasLimit).asWei().toWei();\n                        }\n                        if (txParams.gasLimit !== undefined && utils_1.isHex(txParams.gasLimit)) {\n                            gasLimit = new utils_1.Unit(txParams.gasLimit)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasLimit).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gasLimit).asWei().toWei()\n                                : new utils_1.Unit(this.gasLimit).asWei().toWei();\n                        }\n                        gasPrice = new utils_1.Unit('0').asWei().toWei();\n                        if (txParams.gasPrice !== undefined && utils_1.isHex(txParams.gasPrice)) {\n                            gasPrice = new utils_1.Unit(txParams.gasPrice)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasPrice).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gasPrice).asWei().toWei()\n                                : new utils_1.Unit(this.gasPrice).asWei().toWei();\n                        }\n                        value = txParams.value !== undefined && utils_1.isHex(txParams.value) ? txParams.value : '0';\n                        nonce = txParams.nonce !== undefined && utils_1.isHex(txParams.nonce)\n                            ? Number.parseInt(utils_1.hexToNumber(txParams.nonce), 10)\n                            : accountNonce.result;\n                        data = txParams.data !== undefined && utils_1.isHex(txParams.data) ? txParams.data : '0x';\n                        prv = this.wallets[from].privateKey;\n                        signerAccount = new account_1.Account(prv, this.messenger);\n                        tx = new transaction_1.Transaction(tslib_1.__assign(tslib_1.__assign({}, txParams), { from: from,\n                            to: to,\n                            gasLimit: gasLimit,\n                            gasPrice: gasPrice,\n                            value: value,\n                            nonce: nonce,\n                            data: data, shardID: this.shardID, chainId: this.messenger.chainId }), this.messenger, transaction_1.TxStatus.INTIALIZED);\n                        return [4 /*yield*/, signerAccount.signTransaction(tx)];\n                    case 2:\n                        signed = _a.sent();\n                        return [2 /*return*/, signed.getRawTransaction()];\n                }\n            });\n        });\n    };\n    HDNode.prototype.getAddress = function (idx) {\n        if (!idx) {\n            return this.addresses[0];\n        }\n        else {\n            return this.addresses[idx];\n        }\n    };\n    HDNode.prototype.getAddresses = function () {\n        return this.addresses;\n    };\n    HDNode.prototype.addByPrivateKey = function (privateKey) {\n        var account = new account_1.Account(privateKey);\n        var addr = account.checksumAddress;\n        this.addresses.push(addr);\n        this.wallets[addr] = account;\n        return addr;\n    };\n    HDNode.prototype.setSigner = function (address) {\n        var foundIndex = this.addresses.findIndex(function (value) { return value === address; });\n        this.addresses.slice(foundIndex, foundIndex + 1);\n        this.addresses.unshift(address);\n    };\n    return HDNode;\n}());\nexports.HDNode = HDNode;\n//# sourceMappingURL=hdnode.js.map"]},"metadata":{},"sourceType":"script"}