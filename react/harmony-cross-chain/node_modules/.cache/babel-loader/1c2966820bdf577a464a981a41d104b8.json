{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscribeBlockTracker = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar ws_1 = require(\"../providers/ws\");\n\nvar baseTracker_1 = require(\"./baseTracker\");\n\nvar rpc_1 = require(\"../rpcMethod/rpc\");\n\nvar SubscribeBlockTracker = function (_super) {\n  tslib_1.__extends(SubscribeBlockTracker, _super); // tslint:disable-next-line: variable-name\n\n\n  function SubscribeBlockTracker(messenger, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = this; // parse + validate args\n\n\n    if (!messenger) {\n      throw new Error('SubscribeBlockTracker - no provider specified.');\n    }\n\n    if (!(messenger.provider instanceof ws_1.WSProvider)) {\n      throw new Error('This provider not supported');\n    } // BaseBlockTracker constructor\n\n\n    _this = _super.call(this, opts) || this; // config\n\n    _this.messenger = messenger;\n    _this.subscriptionId = null;\n    return _this;\n  }\n\n  SubscribeBlockTracker.prototype.checkForLatestBlock = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getLatestBlock()];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  SubscribeBlockTracker.prototype._start = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var blockNumber, subs, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.messenger.send(rpc_1.RPCMethod.BlockNumber, [])];\n\n          case 1:\n            blockNumber = _a.sent();\n            if (!blockNumber.isError()) return [3\n            /*break*/\n            , 2];\n            throw blockNumber.message;\n\n          case 2:\n            if (!blockNumber.isResult()) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.messenger.subscribe(rpc_1.RPCMethod.Subscribe, ['newHeads'])];\n\n          case 3:\n            subs = _a.sent();\n            this.subscriptionId = subs;\n            subs[0].onData(this._handleSubData);\n\n            this._newPotentialLatest(blockNumber);\n\n            _a.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            error_1 = _a.sent();\n            this.emit('error', error_1);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SubscribeBlockTracker.prototype._end = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (this.subscriptionId != null) {\n          this.messenger.unsubscribe(rpc_1.RPCMethod.UnSubscribe, [this.subscriptionId]);\n          delete this.subscriptionId;\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  SubscribeBlockTracker.prototype._handleSubData = function (data) {\n    if ( // data.method === 'eth_subscription' &&\n    data.params.subscription === this.subscriptionId) {\n      this._newPotentialLatest(data.params.result.number);\n    }\n  };\n\n  return SubscribeBlockTracker;\n}(baseTracker_1.BaseBlockTracker);\n\nexports.SubscribeBlockTracker = SubscribeBlockTracker;","map":{"version":3,"sources":["../../src/tracker/subscribeTracker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubscribeBlockTracker = void 0;\nvar tslib_1 = require(\"tslib\");\nvar ws_1 = require(\"../providers/ws\");\nvar baseTracker_1 = require(\"./baseTracker\");\nvar rpc_1 = require(\"../rpcMethod/rpc\");\nvar SubscribeBlockTracker = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscribeBlockTracker, _super);\n    // tslint:disable-next-line: variable-name\n    function SubscribeBlockTracker(messenger, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        // parse + validate args\n        if (!messenger) {\n            throw new Error('SubscribeBlockTracker - no provider specified.');\n        }\n        if (!(messenger.provider instanceof ws_1.WSProvider)) {\n            throw new Error('This provider not supported');\n        }\n        // BaseBlockTracker constructor\n        _this = _super.call(this, opts) || this;\n        // config\n        _this.messenger = messenger;\n        _this.subscriptionId = null;\n        return _this;\n    }\n    SubscribeBlockTracker.prototype.checkForLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getLatestBlock()];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    SubscribeBlockTracker.prototype._start = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var blockNumber, subs, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 5, , 6]);\n                        return [4 /*yield*/, this.messenger.send(rpc_1.RPCMethod.BlockNumber, [])];\n                    case 1:\n                        blockNumber = _a.sent();\n                        if (!blockNumber.isError()) return [3 /*break*/, 2];\n                        throw blockNumber.message;\n                    case 2:\n                        if (!blockNumber.isResult()) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.messenger.subscribe(rpc_1.RPCMethod.Subscribe, ['newHeads'])];\n                    case 3:\n                        subs = _a.sent();\n                        this.subscriptionId = subs;\n                        subs[0].onData(this._handleSubData);\n                        this._newPotentialLatest(blockNumber);\n                        _a.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_1 = _a.sent();\n                        this.emit('error', error_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SubscribeBlockTracker.prototype._end = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.subscriptionId != null) {\n                    this.messenger.unsubscribe(rpc_1.RPCMethod.UnSubscribe, [this.subscriptionId]);\n                    delete this.subscriptionId;\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    SubscribeBlockTracker.prototype._handleSubData = function (data) {\n        if (\n        // data.method === 'eth_subscription' &&\n        data.params.subscription === this.subscriptionId) {\n            this._newPotentialLatest(data.params.result.number);\n        }\n    };\n    return SubscribeBlockTracker;\n}(baseTracker_1.BaseBlockTracker));\nexports.SubscribeBlockTracker = SubscribeBlockTracker;\n//# sourceMappingURL=subscribeTracker.js.map"]},"metadata":{},"sourceType":"script"}