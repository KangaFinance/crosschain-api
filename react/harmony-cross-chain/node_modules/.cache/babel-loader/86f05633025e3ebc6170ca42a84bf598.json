{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthMethodsERC20 = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst crypto_1 = require(\"@harmony-js/crypto\");\n\nconst utils_1 = require(\"../utils\");\n\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\n\nconst BN = require('bn.js');\n\nclass EthMethodsERC20 {\n  constructor(params) {\n    this.useMetamask = false;\n\n    this.setUseMetamask = value => this.useMetamask = value;\n\n    this.approveEthManger = async (erc20Address, amount, decimals, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n      return await erc20Contract.methods.approve(this.ethManagerAddress, utils_1.withDecimals(amount, decimals)).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gas: this.gasLimit,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', hash => sendTxCallback(hash));\n    };\n\n    this.lockToken = async (erc20Address, userAddr, amount, decimals, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const transaction = await this.ethManagerContract.methods.lockToken(erc20Address, utils_1.withDecimals(amount, decimals), hmyAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gas: this.gasLimit,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', hash => sendTxCallback(hash));\n      return transaction.events.Locked;\n    };\n\n    this.checkEthBalance = async (erc20Address, addr) => {\n      const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n      return await erc20Contract.methods.balanceOf(addr).call();\n    };\n\n    this.tokenDetails = async erc20Address => {\n      if (!this.web3.utils.isAddress(erc20Address)) {\n        throw new Error('Invalid token address');\n      }\n\n      const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n      const name = await erc20Contract.methods.name().call();\n      const symbol = await erc20Contract.methods.symbol().call();\n      const decimals = await erc20Contract.methods.decimals().call();\n      return {\n        name,\n        symbol,\n        decimals,\n        erc20Address\n      };\n    };\n\n    this.setApprovalForAllEthManger = async (erc20Address, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n      const res = await erc20Contract.methods.isApprovedForAll(this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount, this.ethManagerAddress).call();\n\n      if (!res) {\n        return await erc20Contract.methods.setApprovalForAll(this.ethManagerAddress, true).send({\n          from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n          gas: this.gasLimit,\n          gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n        }).on('transactionHash', hash => sendTxCallback(hash));\n      } else {\n        sendTxCallback('skip');\n      }\n    };\n\n    this.lockTokens = async (erc20Address, userAddr, amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const estimateGas = await this.ethManagerContract.methods.lockTokens(erc20Address, amount, hmyAddrHex).estimateGas({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount\n      });\n      const gasLimit = Math.max(estimateGas + estimateGas * 0.3, Number(this.gasLimit));\n      const transaction = await this.ethManagerContract.methods.lockTokens(erc20Address, amount, hmyAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gas: gasLimit.toFixed(0),\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', hash => sendTxCallback(hash));\n      return transaction;\n    };\n\n    this.tokenDetailsERC721 = async erc20Address => {\n      if (!this.web3.utils.isAddress(erc20Address)) {\n        throw new Error('Invalid token address');\n      }\n\n      const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n      const name = await erc20Contract.methods.name().call();\n      const symbol = await erc20Contract.methods.symbol().call();\n      return {\n        name,\n        symbol,\n        erc20Address\n      };\n    };\n\n    this.web3 = params.web3;\n    this.ethManagerContract = params.ethManagerContract;\n    this.ethManagerAddress = params.ethManagerAddress;\n    this.gasPrice = params.gasPrice;\n    this.gasLimit = params.gasLimit;\n    this.gasApiKey = params.gasApiKey;\n  }\n\n}\n\nexports.EthMethodsERC20 = EthMethodsERC20;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/eth/EthMethodsERC20.js"],"names":["Object","defineProperty","exports","value","EthMethodsERC20","tslib_1","require","crypto_1","utils_1","MyERC20_1","__importDefault","BN","constructor","params","useMetamask","setUseMetamask","approveEthManger","erc20Address","amount","decimals","sendTxCallback","accounts","ethereum","enable","erc20Contract","web3","eth","Contract","default","methods","approve","ethManagerAddress","withDecimals","send","from","defaultAccount","gas","gasLimit","gasPrice","getGasPrice","mul","on","hash","lockToken","userAddr","hmyAddrHex","getAddress","checksum","transaction","ethManagerContract","events","Locked","checkEthBalance","addr","balanceOf","call","tokenDetails","utils","isAddress","Error","name","symbol","setApprovalForAllEthManger","res","isApprovedForAll","setApprovalForAll","lockTokens","estimateGas","Math","max","Number","toFixed","tokenDetailsERC721","gasApiKey"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthMethodsERC20 = void 0;\nconst tslib_1 = require(\"tslib\");\nconst crypto_1 = require(\"@harmony-js/crypto\");\nconst utils_1 = require(\"../utils\");\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\nconst BN = require('bn.js');\nclass EthMethodsERC20 {\n    constructor(params) {\n        this.useMetamask = false;\n        this.setUseMetamask = (value) => (this.useMetamask = value);\n        this.approveEthManger = async (erc20Address, amount, decimals, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n            return await erc20Contract.methods\n                .approve(this.ethManagerAddress, utils_1.withDecimals(amount, decimals))\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gas: this.gasLimit,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', (hash) => sendTxCallback(hash));\n        };\n        this.lockToken = async (erc20Address, userAddr, amount, decimals, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const transaction = await this.ethManagerContract.methods\n                .lockToken(erc20Address, utils_1.withDecimals(amount, decimals), hmyAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gas: this.gasLimit,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', (hash) => sendTxCallback(hash));\n            return transaction.events.Locked;\n        };\n        this.checkEthBalance = async (erc20Address, addr) => {\n            const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n            return await erc20Contract.methods.balanceOf(addr).call();\n        };\n        this.tokenDetails = async (erc20Address) => {\n            if (!this.web3.utils.isAddress(erc20Address)) {\n                throw new Error('Invalid token address');\n            }\n            const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n            const name = await erc20Contract.methods.name().call();\n            const symbol = await erc20Contract.methods.symbol().call();\n            const decimals = await erc20Contract.methods.decimals().call();\n            return { name, symbol, decimals, erc20Address };\n        };\n        this.setApprovalForAllEthManger = async (erc20Address, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n            const res = await erc20Contract.methods\n                .isApprovedForAll(this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount, this.ethManagerAddress)\n                .call();\n            if (!res) {\n                return await erc20Contract.methods\n                    .setApprovalForAll(this.ethManagerAddress, true)\n                    .send({\n                    from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                    gas: this.gasLimit,\n                    gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n                })\n                    .on('transactionHash', (hash) => sendTxCallback(hash));\n            }\n            else {\n                sendTxCallback('skip');\n            }\n        };\n        this.lockTokens = async (erc20Address, userAddr, amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const estimateGas = await this.ethManagerContract.methods\n                .lockTokens(erc20Address, amount, hmyAddrHex)\n                .estimateGas({ from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount });\n            const gasLimit = Math.max(estimateGas + estimateGas * 0.3, Number(this.gasLimit));\n            const transaction = await this.ethManagerContract.methods\n                .lockTokens(erc20Address, amount, hmyAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gas: gasLimit.toFixed(0),\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', (hash) => sendTxCallback(hash));\n            return transaction;\n        };\n        this.tokenDetailsERC721 = async (erc20Address) => {\n            if (!this.web3.utils.isAddress(erc20Address)) {\n                throw new Error('Invalid token address');\n            }\n            const erc20Contract = new this.web3.eth.Contract(MyERC20_1.default, erc20Address);\n            const name = await erc20Contract.methods.name().call();\n            const symbol = await erc20Contract.methods.symbol().call();\n            return { name, symbol, erc20Address };\n        };\n        this.web3 = params.web3;\n        this.ethManagerContract = params.ethManagerContract;\n        this.ethManagerAddress = params.ethManagerAddress;\n        this.gasPrice = params.gasPrice;\n        this.gasLimit = params.gasLimit;\n        this.gasApiKey = params.gasApiKey;\n    }\n}\nexports.EthMethodsERC20 = EthMethodsERC20;\n"]},"metadata":{},"sourceType":"script"}