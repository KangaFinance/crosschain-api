{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsAPI = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst agent = tslib_1.__importStar(require(\"superagent\"));\n\nconst utils_1 = require(\"../utils\");\n\nclass ValidatorsAPI {\n  constructor(params) {\n    this.servers = [];\n    this.threshold = 2;\n\n    this.callAvailableServer = async (func, server = 0) => {\n      let error;\n\n      for (let i = server; i < this.servers.length; i++) {\n        try {\n          return await func(this.servers[i]);\n        } catch (e) {\n          error = e;\n        }\n      }\n\n      throw error;\n    };\n\n    this.callActionN = async func => {\n      let error;\n      let confirmSuccess = 0;\n      let res;\n\n      for (let i = 0; i < this.servers.length; i++) {\n        try {\n          res = await func(this.servers[i]);\n          confirmSuccess++;\n        } catch (e) {\n          error = e;\n        }\n      }\n\n      if (confirmSuccess >= Number(this.threshold)) {\n        return res;\n      }\n\n      throw error;\n    };\n\n    this.callAction = async func => {\n      let error;\n      const res = await Promise.all(this.servers.map(async url => {\n        try {\n          return await func(url);\n        } catch (e) {\n          error = e;\n          return false;\n        }\n      }));\n      const success = res.filter(r => !!r);\n\n      if (success.length >= Number(this.threshold)) {\n        return success[0];\n      }\n\n      throw error;\n    };\n\n    this.createOperation = async params => {\n      const id = utils_1.uuid();\n      return this.callAction(async url => {\n        const res = await agent.post(url + '/operations', Object.assign(Object.assign({}, params), {\n          id\n        }));\n        return res.body;\n      });\n    };\n\n    this.confirmAction = async params => {\n      return this.callAction(async url => {\n        const res = await agent.post(`${url}/operations/${params.operationId}/actions/${params.actionType}/confirm`, {\n          transactionHash: params.transactionHash\n        });\n        return res.body;\n      });\n    };\n\n    this.getOperation = async id => {\n      return this.callAvailableServer(async url => {\n        const res = await agent.get(url + '/operations/' + id);\n        return res.body;\n      });\n    };\n\n    this.getOperations = async params => {\n      return this.callAvailableServer(async url => {\n        const res = await agent.get(url + '/operations/', params);\n        return res.body;\n      });\n    };\n\n    this.getTokensInfo = async params => {\n      const res = await agent.get(this.assetServiceUrl + '/tokens/', params);\n      const content = res.body.content;\n      return Object.assign(Object.assign({}, res.body), {\n        content\n      });\n    };\n\n    this.mintTokens = async params => {\n      const res = await agent.post(`${this.servers[0]}/get-token`, params);\n      return res.body;\n    };\n\n    this.servers = params.validators || [];\n    this.assetServiceUrl = params.assetServiceUrl || '';\n    this.threshold = params.threshold || 2;\n  }\n\n}\n\nexports.ValidatorsAPI = ValidatorsAPI;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/api/index.js"],"names":["Object","defineProperty","exports","value","ValidatorsAPI","tslib_1","require","agent","__importStar","utils_1","constructor","params","servers","threshold","callAvailableServer","func","server","error","i","length","e","callActionN","confirmSuccess","res","Number","callAction","Promise","all","map","url","success","filter","r","createOperation","id","uuid","post","assign","body","confirmAction","operationId","actionType","transactionHash","getOperation","get","getOperations","getTokensInfo","assetServiceUrl","content","mintTokens","validators"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidatorsAPI = void 0;\nconst tslib_1 = require(\"tslib\");\nconst agent = tslib_1.__importStar(require(\"superagent\"));\nconst utils_1 = require(\"../utils\");\nclass ValidatorsAPI {\n    constructor(params) {\n        this.servers = [];\n        this.threshold = 2;\n        this.callAvailableServer = async (func, server = 0) => {\n            let error;\n            for (let i = server; i < this.servers.length; i++) {\n                try {\n                    return await func(this.servers[i]);\n                }\n                catch (e) {\n                    error = e;\n                }\n            }\n            throw error;\n        };\n        this.callActionN = async (func) => {\n            let error;\n            let confirmSuccess = 0;\n            let res;\n            for (let i = 0; i < this.servers.length; i++) {\n                try {\n                    res = await func(this.servers[i]);\n                    confirmSuccess++;\n                }\n                catch (e) {\n                    error = e;\n                }\n            }\n            if (confirmSuccess >= Number(this.threshold)) {\n                return res;\n            }\n            throw error;\n        };\n        this.callAction = async (func) => {\n            let error;\n            const res = await Promise.all(this.servers.map(async (url) => {\n                try {\n                    return await func(url);\n                }\n                catch (e) {\n                    error = e;\n                    return false;\n                }\n            }));\n            const success = res.filter(r => !!r);\n            if (success.length >= Number(this.threshold)) {\n                return success[0];\n            }\n            throw error;\n        };\n        this.createOperation = async (params) => {\n            const id = utils_1.uuid();\n            return this.callAction(async (url) => {\n                const res = await agent.post(url + '/operations', Object.assign(Object.assign({}, params), { id }));\n                return res.body;\n            });\n        };\n        this.confirmAction = async (params) => {\n            return this.callAction(async (url) => {\n                const res = await agent.post(`${url}/operations/${params.operationId}/actions/${params.actionType}/confirm`, { transactionHash: params.transactionHash });\n                return res.body;\n            });\n        };\n        this.getOperation = async (id) => {\n            return this.callAvailableServer(async (url) => {\n                const res = await agent.get(url + '/operations/' + id);\n                return res.body;\n            });\n        };\n        this.getOperations = async (params) => {\n            return this.callAvailableServer(async (url) => {\n                const res = await agent.get(url + '/operations/', params);\n                return res.body;\n            });\n        };\n        this.getTokensInfo = async (params) => {\n            const res = await agent.get(this.assetServiceUrl + '/tokens/', params);\n            const content = res.body.content;\n            return Object.assign(Object.assign({}, res.body), { content });\n        };\n        this.mintTokens = async (params) => {\n            const res = await agent.post(`${this.servers[0]}/get-token`, params);\n            return res.body;\n        };\n        this.servers = params.validators || [];\n        this.assetServiceUrl = params.assetServiceUrl || '';\n        this.threshold = params.threshold || 2;\n    }\n}\nexports.ValidatorsAPI = ValidatorsAPI;\n"]},"metadata":{},"sourceType":"script"}