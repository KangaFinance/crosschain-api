{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneToEth = void 0;\n\nconst interfaces_1 = require(\"../interfaces\");\n\nconst logs_1 = require(\"../utils/logs\");\n\nconst operation_helpers_1 = require(\"../operation-helpers\");\n\nexports.oneToEth = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n  let operation = await api.getOperation(operationParams.id);\n  const approveHmyManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveHmyManger);\n\n  if (approveHmyManger && approveHmyManger.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'approveHmyManger'\n    });\n    const res = await hmyMethods.approveHmyManger(operationParams.amount, hash => operation_helpers_1.confirmCallback(api, hash, approveHmyManger.type, operation.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'approveHmyManger'\n    });\n  }\n\n  operation = await api.getOperation(operationParams.id);\n  const burnToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.burnToken);\n\n  if (burnToken && burnToken.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'burnToken'\n    });\n    const res = await hmyMethods.burnToken(operationParams.ethAddress, operationParams.amount, hash => operation_helpers_1.confirmCallback(api, hash, burnToken.type, operation.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'burnToken'\n    });\n  }\n\n  const unlockToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.unlockToken, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(unlockToken, prefix, interfaces_1.ACTION_TYPE.unlockToken)) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operations/oneToEth.js"],"names":["Object","defineProperty","exports","value","oneToEth","interfaces_1","require","logs_1","operation_helpers_1","api","operationParams","ethMethods","hmyMethods","prefix","maxWaitingTime","operation","getOperation","id","approveHmyManger","getActionByType","ACTION_TYPE","status","STATUS","WAITING","logger","pending","message","res","amount","hash","confirmCallback","type","info","success","burnToken","ethAddress","unlockToken","waitAction","checkStatus"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneToEth = void 0;\nconst interfaces_1 = require(\"../interfaces\");\nconst logs_1 = require(\"../utils/logs\");\nconst operation_helpers_1 = require(\"../operation-helpers\");\nexports.oneToEth = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n    let operation = await api.getOperation(operationParams.id);\n    const approveHmyManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveHmyManger);\n    if (approveHmyManger && approveHmyManger.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'approveHmyManger' });\n        const res = await hmyMethods.approveHmyManger(operationParams.amount, (hash) => operation_helpers_1.confirmCallback(api, hash, approveHmyManger.type, operation.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'approveHmyManger' });\n    }\n    operation = await api.getOperation(operationParams.id);\n    const burnToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.burnToken);\n    if (burnToken && burnToken.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'burnToken' });\n        const res = await hmyMethods.burnToken(operationParams.ethAddress, operationParams.amount, (hash) => operation_helpers_1.confirmCallback(api, hash, burnToken.type, operation.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'burnToken' });\n    }\n    const unlockToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.unlockToken, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(unlockToken, prefix, interfaces_1.ACTION_TYPE.unlockToken)) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}