{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollingBlockTracker = exports.timeout = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar baseTracker_1 = require(\"./baseTracker\");\n\nvar rpc_1 = require(\"../rpcMethod/rpc\");\n\nvar sec = 1000;\n\nfunction timeout(duration, unref) {\n  return new Promise(function (resolve) {\n    var timoutRef = setTimeout(resolve, duration); // don't keep process open\n\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}\n\nexports.timeout = timeout;\n\nvar PollingBlockTracker = function (_super) {\n  tslib_1.__extends(PollingBlockTracker, _super);\n\n  function PollingBlockTracker(messenger, opts) {\n    if (opts === void 0) {\n      opts = {\n        pollingInterval: undefined,\n        retryTimeout: undefined,\n        keepEventLoopActive: false,\n        setSkipCacheFlag: false\n      };\n    }\n\n    var _this = this; // parse + validate args\n\n\n    if (!messenger) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    var pollingInterval = opts.pollingInterval || 20 * sec;\n    var retryTimeout = opts.retryTimeout || pollingInterval / 10;\n    var keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    var setSkipCacheFlag = opts.setSkipCacheFlag || false; // BaseBlockTracker constructor\n\n    _this = _super.call(this, {\n      blockResetDuration: pollingInterval,\n      retryTimeout: retryTimeout,\n      keepEventLoopActive: keepEventLoopActive,\n      setSkipCacheFlag: setSkipCacheFlag\n    }) || this; // config\n\n    _this.messenger = messenger;\n    _this._pollingInterval = pollingInterval;\n    _this._retryTimeout = retryTimeout;\n    _this._keepEventLoopActive = keepEventLoopActive;\n    _this._setSkipCacheFlag = setSkipCacheFlag;\n    return _this;\n  } //\n  // public\n  //\n  // trigger block polling\n\n\n  PollingBlockTracker.prototype.checkForLatestBlock = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._updateLatestBlock()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.getLatestBlock()];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  }; //\n  // private\n  //\n\n\n  PollingBlockTracker.prototype._start = function () {\n    var _this = this;\n\n    this._performSync().catch(function (err) {\n      return _this.emit('error', err);\n    });\n  };\n\n  PollingBlockTracker.prototype._performSync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var err_1, newErr;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._isRunning) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 6]);\n\n            return [4\n            /*yield*/\n            , this._updateLatestBlock()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , timeout(this._pollingInterval, !this._keepEventLoopActive)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            err_1 = _a.sent();\n            newErr = new Error(\"PollingBlockTracker - encountered an error while attempting to update latest block:\\n\" + err_1.stack);\n\n            try {\n              this.emit('error', newErr);\n            } catch (emitErr) {\n              console.error(newErr);\n            }\n\n            return [4\n            /*yield*/\n            , timeout(this._retryTimeout, !this._keepEventLoopActive)];\n\n          case 5:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 0];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PollingBlockTracker.prototype._updateLatestBlock = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var latestBlock;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._fetchLatestBlock()];\n\n          case 1:\n            latestBlock = _a.sent();\n\n            this._newPotentialLatest(latestBlock);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PollingBlockTracker.prototype._fetchLatestBlock = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.messenger.send(rpc_1.RPCMethod.BlockNumber, [])];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.isError()) {\n              throw result.message;\n            } else if (result.isResult()) {\n              return [2\n              /*return*/\n              , result.result];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PollingBlockTracker;\n}(baseTracker_1.BaseBlockTracker);\n\nexports.PollingBlockTracker = PollingBlockTracker;","map":{"version":3,"sources":["../../src/tracker/pollingTracker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PollingBlockTracker = exports.timeout = void 0;\nvar tslib_1 = require(\"tslib\");\nvar baseTracker_1 = require(\"./baseTracker\");\nvar rpc_1 = require(\"../rpcMethod/rpc\");\nvar sec = 1000;\nfunction timeout(duration, unref) {\n    return new Promise(function (resolve) {\n        var timoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timoutRef.unref && unref) {\n            timoutRef.unref();\n        }\n    });\n}\nexports.timeout = timeout;\nvar PollingBlockTracker = /** @class */ (function (_super) {\n    tslib_1.__extends(PollingBlockTracker, _super);\n    function PollingBlockTracker(messenger, opts) {\n        if (opts === void 0) { opts = {\n            pollingInterval: undefined,\n            retryTimeout: undefined,\n            keepEventLoopActive: false,\n            setSkipCacheFlag: false,\n        }; }\n        var _this = this;\n        // parse + validate args\n        if (!messenger) {\n            throw new Error('PollingBlockTracker - no provider specified.');\n        }\n        var pollingInterval = opts.pollingInterval || 20 * sec;\n        var retryTimeout = opts.retryTimeout || pollingInterval / 10;\n        var keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n        var setSkipCacheFlag = opts.setSkipCacheFlag || false;\n        // BaseBlockTracker constructor\n        _this = _super.call(this, {\n            blockResetDuration: pollingInterval,\n            retryTimeout: retryTimeout,\n            keepEventLoopActive: keepEventLoopActive,\n            setSkipCacheFlag: setSkipCacheFlag,\n        }) || this;\n        // config\n        _this.messenger = messenger;\n        _this._pollingInterval = pollingInterval;\n        _this._retryTimeout = retryTimeout;\n        _this._keepEventLoopActive = keepEventLoopActive;\n        _this._setSkipCacheFlag = setSkipCacheFlag;\n        return _this;\n    }\n    //\n    // public\n    //\n    // trigger block polling\n    PollingBlockTracker.prototype.checkForLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._updateLatestBlock()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.getLatestBlock()];\n                    case 2:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    //\n    // private\n    //\n    PollingBlockTracker.prototype._start = function () {\n        var _this = this;\n        this._performSync().catch(function (err) { return _this.emit('error', err); });\n    };\n    PollingBlockTracker.prototype._performSync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var err_1, newErr;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._isRunning) return [3 /*break*/, 7];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 6]);\n                        return [4 /*yield*/, this._updateLatestBlock()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, timeout(this._pollingInterval, !this._keepEventLoopActive)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        err_1 = _a.sent();\n                        newErr = new Error(\"PollingBlockTracker - encountered an error while attempting to update latest block:\\n\" + err_1.stack);\n                        try {\n                            this.emit('error', newErr);\n                        }\n                        catch (emitErr) {\n                            console.error(newErr);\n                        }\n                        return [4 /*yield*/, timeout(this._retryTimeout, !this._keepEventLoopActive)];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 6: return [3 /*break*/, 0];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PollingBlockTracker.prototype._updateLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var latestBlock;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetchLatestBlock()];\n                    case 1:\n                        latestBlock = _a.sent();\n                        this._newPotentialLatest(latestBlock);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PollingBlockTracker.prototype._fetchLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.messenger.send(rpc_1.RPCMethod.BlockNumber, [])];\n                    case 1:\n                        result = _a.sent();\n                        if (result.isError()) {\n                            throw result.message;\n                        }\n                        else if (result.isResult()) {\n                            return [2 /*return*/, result.result];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return PollingBlockTracker;\n}(baseTracker_1.BaseBlockTracker));\nexports.PollingBlockTracker = PollingBlockTracker;\n//# sourceMappingURL=pollingTracker.js.map"]},"metadata":{},"sourceType":"script"}