{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Messenger = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar builder_1 = require(\"../rpcMethod/builder\");\n\nvar responseMiddleware_1 = require(\"./responseMiddleware\");\n\nvar http_1 = require(\"../providers/http\");\n\nvar ws_1 = require(\"../providers/ws\"); // import { getResultForData } from '../util';\n\n\nvar rpc_1 = require(\"../rpcMethod/rpc\");\n\nvar types_1 = require(\"../types\");\n/**\n * ## How to Create a Massage\n * @example\n * ```\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n */\n\n\nvar Messenger = function (_super) {\n  tslib_1.__extends(Messenger, _super);\n\n  function Messenger(provider, chainType, chainId, config) {\n    if (chainType === void 0) {\n      chainType = utils_1.defaultConfig.Default.Chain_Type;\n    }\n\n    if (chainId === void 0) {\n      chainId = utils_1.defaultConfig.Default.Chain_ID;\n    }\n\n    if (config === void 0) {\n      config = utils_1.defaultConfig;\n    }\n\n    var _this = _super.call(this, chainType, chainId) || this; // tslint:disable-next-line: variable-name\n\n\n    _this.Network_ID = 'Default';\n    /**\n     * @function send\n     * @memberof Messenger.prototype\n     * @param  {String} method - RPC method\n     * @param  {Object} params - RPC method params\n     * @return {Object} RPC result\n     */\n\n    _this.send = function (method, params, rpcPrefix, shardID) {\n      if (shardID === void 0) {\n        shardID = _this.currentShard;\n      }\n\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var rpcMethod, payload, provider, result, e_1;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.providerCheck();\n              rpcMethod = method;\n\n              if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n              } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n              }\n\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              payload = this.JsonRpc.toPayload(rpcMethod, params);\n              provider = this.getShardProvider(shardID);\n              this.setResMiddleware(function (data) {\n                if (!(data instanceof responseMiddleware_1.ResponseMiddleware)) {\n                  return new responseMiddleware_1.ResponseMiddleware(data);\n                } else {\n                  return data;\n                }\n              }, '*', provider);\n              return [4\n              /*yield*/\n              , provider.send(payload)];\n\n            case 2:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , result];\n\n            case 3:\n              e_1 = _a.sent();\n              throw new Error(e_1);\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.subscribe = function (method, params, returnType, rpcPrefix, shardID) {\n      if (returnType === void 0) {\n        returnType = types_1.SubscribeReturns.all;\n      }\n\n      if (rpcPrefix === void 0) {\n        rpcPrefix = _this.chainPrefix;\n      }\n\n      if (shardID === void 0) {\n        shardID = _this.currentShard;\n      }\n\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var rpcMethod, id, provider, reProvider_1, payload, error_1;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              rpcMethod = method;\n\n              if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n              } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n              }\n\n              id = null;\n              provider = this.getShardProvider(shardID);\n              if (!(provider instanceof ws_1.WSProvider)) return [3\n              /*break*/\n              , 5];\n              reProvider_1 = provider;\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              payload = this.JsonRpc.toPayload(rpcMethod, params);\n              return [4\n              /*yield*/\n              , reProvider_1.subscribe(payload)];\n\n            case 2:\n              id = _a.sent();\n              reProvider_1.on(id, function (result) {\n                reProvider_1.emitter.emit('data', result);\n              });\n              reProvider_1.once('error', function (error) {\n                reProvider_1.removeEventListener(id);\n                reProvider_1.emitter.emit('error', error);\n                reProvider_1.removeEventListener('*');\n              });\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              error_1 = _a.sent();\n              reProvider_1.emitter.emit('error', error_1);\n              reProvider_1.removeEventListener('*');\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              if (returnType === types_1.SubscribeReturns.all) {\n                return [2\n                /*return*/\n                , [reProvider_1, id]];\n              } else if (returnType === types_1.SubscribeReturns.method) {\n                return [2\n                /*return*/\n                , reProvider_1];\n              } else if (returnType === types_1.SubscribeReturns.id) {\n                return [2\n                /*return*/\n                , id];\n              } else {\n                throw new Error('Invalid returns');\n              }\n\n              return [3\n              /*break*/\n              , 6];\n\n            case 5:\n              throw new Error('HttpProvider does not support this');\n\n            case 6:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.unsubscribe = function (method, params, rpcPrefix, shardID) {\n      if (shardID === void 0) {\n        shardID = _this.currentShard;\n      }\n\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var rpcMethod, provider, reProvider, payload, response, error_2;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              rpcMethod = method;\n\n              if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n              } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n              }\n\n              provider = this.getShardProvider(shardID);\n              if (!(provider instanceof ws_1.WSProvider)) return [3\n              /*break*/\n              , 5];\n              reProvider = this.provider;\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              payload = this.JsonRpc.toPayload(rpcMethod, params);\n              return [4\n              /*yield*/\n              , reProvider.unsubscribe(payload)];\n\n            case 2:\n              response = _a.sent();\n              return [2\n              /*return*/\n              , response];\n\n            case 3:\n              error_2 = _a.sent();\n              throw error_2;\n\n            case 4:\n              return [3\n              /*break*/\n              , 6];\n\n            case 5:\n              throw new Error('HttpProvider does not support this');\n\n            case 6:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n    /**\n     * @var {Provider} provider\n     * @memberof Messenger.prototype\n     * @description Provider instance\n     */\n\n\n    _this.provider = provider;\n    /**\n     * @var {Object} config\n     * @memberof Messenger.prototype\n     * @description Messenger config\n     */\n\n    _this.config = config;\n    /**\n     * @var {Number} Network_ID\n     * @memberof Messenger.prototype\n     * @description Network ID for current provider\n     */\n\n    /**\n     * @var {JsonRpc} JsonRpc\n     * @memberof Messenger.prototype\n     * @description JsonRpc instance\n     */\n\n    _this.JsonRpc = new builder_1.JsonRpc(); // set Network ID\n\n    _this.setNetworkID(utils_1.defaultConfig.Default.Network_ID); // set shardingProviders\n\n\n    _this.shardProviders = new Map();\n    return _this; // this.setShardingProviders();\n  }\n\n  Object.defineProperty(Messenger.prototype, \"currentShard\", {\n    /**\n     * @example\n     * ```\n     * customMessenger.currentShard\n     * ```\n     */\n    get: function () {\n      return this.getCurrentShardID() || this.defaultShardID || 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Messenger.prototype, \"shardCount\", {\n    /**\n     * @example\n     * ```\n     * customMessenger.shardCount\n     * ```\n     */\n    get: function () {\n      return this.shardProviders.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @function setProvider\n   * @memberof Messenger\n   * @description provider setter\n   * @param  {Provider} provider - provider instance\n   */\n\n  Messenger.prototype.setProvider = function (provider) {\n    this.provider = provider;\n  };\n  /**\n   * @function providerCheck\n   * @memberof Messenger\n   * @description provider checker\n   * @return {Error|null} provider validator\n   */\n\n\n  Messenger.prototype.providerCheck = function () {\n    if (!this.provider) {\n      throw new Error('provider is not found');\n    }\n  };\n  /**\n   * @function setReqMiddleware\n   * @description set request middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n\n\n  Messenger.prototype.setReqMiddleware = function (middleware, method, provider) {\n    if (method === void 0) {\n      method = '*';\n    }\n\n    provider.middlewares.request.use(middleware, method);\n  };\n  /**\n   * @function setResMiddleware\n   * @description set response middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n\n\n  Messenger.prototype.setResMiddleware = function (middleware, method, provider) {\n    if (method === void 0) {\n      method = '*';\n    }\n\n    provider.middlewares.response.use(middleware, method);\n  };\n  /**\n   * @function setNetworkID\n   * @description set network id\n   * @memberof Messenger\n   * @param  {String} id network id string\n   */\n\n\n  Messenger.prototype.setNetworkID = function (id) {\n    this.Network_ID = id;\n  };\n\n  Messenger.prototype.setRPCPrefix = function (method, prefix) {\n    var stringArray = method.split('_');\n\n    if (stringArray.length !== 2) {\n      throw new Error(\"could not set prefix with \" + method);\n    }\n\n    stringArray[0] = prefix;\n    return stringArray.join('_');\n  };\n\n  Messenger.prototype.setShardingProviders = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var response, shardingStructures, shardingStructures_1, shardingStructures_1_1, shard, shardID, error_3;\n\n      var e_2, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.chainPrefix !== utils_1.ChainType.Harmony) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.send(rpc_1.RPCMethod.GetShardingStructure, [], this.chainPrefix)];\n\n          case 2:\n            response = _b.sent();\n\n            if (response.result) {\n              shardingStructures = response.result;\n\n              try {\n                for (shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                  shard = shardingStructures_1_1.value;\n                  shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                  this.shardProviders.set(shardID, {\n                    current: shard.current,\n                    shardID: shardID,\n                    http: shard.http,\n                    ws: shard.ws\n                  });\n                }\n              } catch (e_2_1) {\n                e_2 = {\n                  error: e_2_1\n                };\n              } finally {\n                try {\n                  if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n                } finally {\n                  if (e_2) throw e_2.error;\n                }\n              }\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_3 = _b.sent();\n            return [2\n            /*return*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getShardProvider()\n   * ```\n   */\n\n\n  Messenger.prototype.getShardProvider = function (shardID) {\n    var provider = this.shardProviders.get(shardID);\n\n    if (provider) {\n      return this.provider instanceof http_1.HttpProvider ? new http_1.HttpProvider(provider.http) : new ws_1.WSProvider(provider.ws);\n    }\n\n    return this.provider;\n  };\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getCurrentShardID()\n   * ```\n   */\n\n\n  Messenger.prototype.getCurrentShardID = function () {\n    var e_3, _a;\n\n    try {\n      for (var _b = tslib_1.__values(this.shardProviders), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var shard = _c.value;\n\n        if (shard[1].current === true || shard[1].http === this.provider.url || shard[1].ws === this.provider.url) {\n          return shard[1].shardID;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  Messenger.prototype.setDefaultShardID = function (shardID) {\n    this.defaultShardID = shardID;\n  };\n\n  return Messenger;\n}(utils_1.HarmonyCore);\n\nexports.Messenger = Messenger;","map":{"version":3,"sources":["../../src/messenger/messenger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Messenger = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar builder_1 = require(\"../rpcMethod/builder\");\nvar responseMiddleware_1 = require(\"./responseMiddleware\");\nvar http_1 = require(\"../providers/http\");\nvar ws_1 = require(\"../providers/ws\");\n// import { getResultForData } from '../util';\nvar rpc_1 = require(\"../rpcMethod/rpc\");\nvar types_1 = require(\"../types\");\n/**\n * ## How to Create a Massage\n * @example\n * ```\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n */\nvar Messenger = /** @class */ (function (_super) {\n    tslib_1.__extends(Messenger, _super);\n    function Messenger(provider, chainType, chainId, config) {\n        if (chainType === void 0) { chainType = utils_1.defaultConfig.Default.Chain_Type; }\n        if (chainId === void 0) { chainId = utils_1.defaultConfig.Default.Chain_ID; }\n        if (config === void 0) { config = utils_1.defaultConfig; }\n        var _this = _super.call(this, chainType, chainId) || this;\n        // tslint:disable-next-line: variable-name\n        _this.Network_ID = 'Default';\n        /**\n         * @function send\n         * @memberof Messenger.prototype\n         * @param  {String} method - RPC method\n         * @param  {Object} params - RPC method params\n         * @return {Object} RPC result\n         */\n        _this.send = function (method, params, rpcPrefix, shardID) {\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, payload, provider, result, e_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.providerCheck();\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            provider = this.getShardProvider(shardID);\n                            this.setResMiddleware(function (data) {\n                                if (!(data instanceof responseMiddleware_1.ResponseMiddleware)) {\n                                    return new responseMiddleware_1.ResponseMiddleware(data);\n                                }\n                                else {\n                                    return data;\n                                }\n                            }, '*', provider);\n                            return [4 /*yield*/, provider.send(payload)];\n                        case 2:\n                            result = _a.sent();\n                            return [2 /*return*/, result];\n                        case 3:\n                            e_1 = _a.sent();\n                            throw new Error(e_1);\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        _this.subscribe = function (method, params, returnType, rpcPrefix, shardID) {\n            if (returnType === void 0) { returnType = types_1.SubscribeReturns.all; }\n            if (rpcPrefix === void 0) { rpcPrefix = _this.chainPrefix; }\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, id, provider, reProvider_1, payload, error_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            id = null;\n                            provider = this.getShardProvider(shardID);\n                            if (!(provider instanceof ws_1.WSProvider)) return [3 /*break*/, 5];\n                            reProvider_1 = provider;\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            return [4 /*yield*/, reProvider_1.subscribe(payload)];\n                        case 2:\n                            id = _a.sent();\n                            reProvider_1.on(id, function (result) {\n                                reProvider_1.emitter.emit('data', result);\n                            });\n                            reProvider_1.once('error', function (error) {\n                                reProvider_1.removeEventListener(id);\n                                reProvider_1.emitter.emit('error', error);\n                                reProvider_1.removeEventListener('*');\n                            });\n                            return [3 /*break*/, 4];\n                        case 3:\n                            error_1 = _a.sent();\n                            reProvider_1.emitter.emit('error', error_1);\n                            reProvider_1.removeEventListener('*');\n                            return [3 /*break*/, 4];\n                        case 4:\n                            if (returnType === types_1.SubscribeReturns.all) {\n                                return [2 /*return*/, [reProvider_1, id]];\n                            }\n                            else if (returnType === types_1.SubscribeReturns.method) {\n                                return [2 /*return*/, reProvider_1];\n                            }\n                            else if (returnType === types_1.SubscribeReturns.id) {\n                                return [2 /*return*/, id];\n                            }\n                            else {\n                                throw new Error('Invalid returns');\n                            }\n                            return [3 /*break*/, 6];\n                        case 5: throw new Error('HttpProvider does not support this');\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        _this.unsubscribe = function (method, params, rpcPrefix, shardID) {\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, provider, reProvider, payload, response, error_2;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            provider = this.getShardProvider(shardID);\n                            if (!(provider instanceof ws_1.WSProvider)) return [3 /*break*/, 5];\n                            reProvider = this.provider;\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            return [4 /*yield*/, reProvider.unsubscribe(payload)];\n                        case 2:\n                            response = _a.sent();\n                            return [2 /*return*/, response];\n                        case 3:\n                            error_2 = _a.sent();\n                            throw error_2;\n                        case 4: return [3 /*break*/, 6];\n                        case 5: throw new Error('HttpProvider does not support this');\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * @var {Provider} provider\n         * @memberof Messenger.prototype\n         * @description Provider instance\n         */\n        _this.provider = provider;\n        /**\n         * @var {Object} config\n         * @memberof Messenger.prototype\n         * @description Messenger config\n         */\n        _this.config = config;\n        /**\n         * @var {Number} Network_ID\n         * @memberof Messenger.prototype\n         * @description Network ID for current provider\n         */\n        /**\n         * @var {JsonRpc} JsonRpc\n         * @memberof Messenger.prototype\n         * @description JsonRpc instance\n         */\n        _this.JsonRpc = new builder_1.JsonRpc();\n        // set Network ID\n        _this.setNetworkID(utils_1.defaultConfig.Default.Network_ID);\n        // set shardingProviders\n        _this.shardProviders = new Map();\n        return _this;\n        // this.setShardingProviders();\n    }\n    Object.defineProperty(Messenger.prototype, \"currentShard\", {\n        /**\n         * @example\n         * ```\n         * customMessenger.currentShard\n         * ```\n         */\n        get: function () {\n            return this.getCurrentShardID() || this.defaultShardID || 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Messenger.prototype, \"shardCount\", {\n        /**\n         * @example\n         * ```\n         * customMessenger.shardCount\n         * ```\n         */\n        get: function () {\n            return this.shardProviders.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @function setProvider\n     * @memberof Messenger\n     * @description provider setter\n     * @param  {Provider} provider - provider instance\n     */\n    Messenger.prototype.setProvider = function (provider) {\n        this.provider = provider;\n    };\n    /**\n     * @function providerCheck\n     * @memberof Messenger\n     * @description provider checker\n     * @return {Error|null} provider validator\n     */\n    Messenger.prototype.providerCheck = function () {\n        if (!this.provider) {\n            throw new Error('provider is not found');\n        }\n    };\n    /**\n     * @function setReqMiddleware\n     * @description set request middleware\n     * @memberof Messenger\n     * @param  {any} middleware - middle ware for req\n     * @param  {String} method  - method name\n     * @hidden\n     */\n    Messenger.prototype.setReqMiddleware = function (middleware, method, provider) {\n        if (method === void 0) { method = '*'; }\n        provider.middlewares.request.use(middleware, method);\n    };\n    /**\n     * @function setResMiddleware\n     * @description set response middleware\n     * @memberof Messenger\n     * @param  {any} middleware - middle ware for req\n     * @param  {String} method  - method name\n     * @hidden\n     */\n    Messenger.prototype.setResMiddleware = function (middleware, method, provider) {\n        if (method === void 0) { method = '*'; }\n        provider.middlewares.response.use(middleware, method);\n    };\n    /**\n     * @function setNetworkID\n     * @description set network id\n     * @memberof Messenger\n     * @param  {String} id network id string\n     */\n    Messenger.prototype.setNetworkID = function (id) {\n        this.Network_ID = id;\n    };\n    Messenger.prototype.setRPCPrefix = function (method, prefix) {\n        var stringArray = method.split('_');\n        if (stringArray.length !== 2) {\n            throw new Error(\"could not set prefix with \" + method);\n        }\n        stringArray[0] = prefix;\n        return stringArray.join('_');\n    };\n    Messenger.prototype.setShardingProviders = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var response, shardingStructures, shardingStructures_1, shardingStructures_1_1, shard, shardID, error_3;\n            var e_2, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (this.chainPrefix !== utils_1.ChainType.Harmony) {\n                            return [2 /*return*/];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.send(rpc_1.RPCMethod.GetShardingStructure, [], this.chainPrefix)];\n                    case 2:\n                        response = _b.sent();\n                        if (response.result) {\n                            shardingStructures = response.result;\n                            try {\n                                for (shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                                    shard = shardingStructures_1_1.value;\n                                    shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                                    this.shardProviders.set(shardID, {\n                                        current: shard.current,\n                                        shardID: shardID,\n                                        http: shard.http,\n                                        ws: shard.ws,\n                                    });\n                                }\n                            }\n                            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                            finally {\n                                try {\n                                    if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n                                }\n                                finally { if (e_2) throw e_2.error; }\n                            }\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_3 = _b.sent();\n                        return [2 /*return*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @example\n     * ```\n     * hmy.messenger.getShardProvider()\n     * ```\n     */\n    Messenger.prototype.getShardProvider = function (shardID) {\n        var provider = this.shardProviders.get(shardID);\n        if (provider) {\n            return this.provider instanceof http_1.HttpProvider\n                ? new http_1.HttpProvider(provider.http)\n                : new ws_1.WSProvider(provider.ws);\n        }\n        return this.provider;\n    };\n    /**\n     * @example\n     * ```\n     * hmy.messenger.getCurrentShardID()\n     * ```\n     */\n    Messenger.prototype.getCurrentShardID = function () {\n        var e_3, _a;\n        try {\n            for (var _b = tslib_1.__values(this.shardProviders), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var shard = _c.value;\n                if (shard[1].current === true ||\n                    shard[1].http === this.provider.url ||\n                    shard[1].ws === this.provider.url) {\n                    return shard[1].shardID;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    Messenger.prototype.setDefaultShardID = function (shardID) {\n        this.defaultShardID = shardID;\n    };\n    return Messenger;\n}(utils_1.HarmonyCore));\nexports.Messenger = Messenger;\n//# sourceMappingURL=messenger.js.map"]},"metadata":{},"sourceType":"script"}