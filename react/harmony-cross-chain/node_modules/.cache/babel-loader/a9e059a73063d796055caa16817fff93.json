{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmyMethodsERC20Web3 = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst utils_1 = require(\"../utils\");\n\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\n\nconst crypto_1 = require(\"@harmony-js/crypto\");\n\nconst BN = require('bn.js');\n\nclass HmyMethodsERC20Web3 {\n  constructor(params) {\n    this.useMetamask = false;\n\n    this.setUseOneWallet = value => value;\n\n    this.setUseMathWallet = value => value;\n\n    this.setUseMetamask = value => this.useMetamask = value;\n\n    this.approveHmyManger = async (hrc20Address, amount, decimals, sendTxCallback) => {\n      const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const res = await hmyTokenContract.methods.approve(this.hmyManagerContractAddress, utils_1.withDecimals(amount, decimals)).send({\n        from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', sendTxCallback);\n      return res;\n    };\n\n    this.burnToken = async (hrc20Address, userAddr, amount, decimals, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const response = await this.hmyManagerContract.methods.burnToken(hrc20Address, utils_1.withDecimals(amount, decimals), userAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', sendTxCallback);\n      return response;\n    };\n\n    this.getMappingFor = async erc20TokenAddr => {\n      const res = await this.hmyManagerContract.methods.mappings(erc20TokenAddr).call();\n      return res;\n    };\n\n    this.checkHmyBalance = async (hrc20Address, addr) => {\n      const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n      const addrHex = crypto_1.getAddress(addr).checksum;\n      return await hmyTokenContract.methods.balanceOf(addrHex).call();\n    };\n\n    this.totalSupply = async hrc20Address => {\n      const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n      return await hmyTokenContract.methods.totalSupply().call();\n    };\n\n    this.setApprovalForAll = async (hrc20Address, sendTxCallback) => {\n      const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      let res = await hmyTokenContract.methods.isApprovedForAll(this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount, this.hmyManagerContractAddress).call({\n        from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1))\n      });\n\n      if (!res) {\n        res = await hmyTokenContract.methods.setApprovalForAll(this.hmyManagerContractAddress, true).send({\n          from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n          gasLimit: 6721900,\n          gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1))\n        }).on('transactionHash', sendTxCallback);\n        return res;\n      } else {\n        sendTxCallback('skip');\n        return res;\n      }\n    };\n\n    this.burnTokens = async (hrc20Address, userAddr, amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const response = await this.hmyManagerContract.methods.burnTokens(hrc20Address, amount, userAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', sendTxCallback);\n      return response;\n    };\n\n    this.hmy = params.hmy;\n    this.hmyManagerContract = params.hmyManagerContract;\n    this.hmyManagerContractAddress = params.hmyManagerContractAddress;\n  }\n\n}\n\nexports.HmyMethodsERC20Web3 = HmyMethodsERC20Web3;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/hmy/HmyMethodsERC20Web3.js"],"names":["Object","defineProperty","exports","value","HmyMethodsERC20Web3","tslib_1","require","utils_1","MyERC20_1","__importDefault","crypto_1","BN","constructor","params","useMetamask","setUseOneWallet","setUseMathWallet","setUseMetamask","approveHmyManger","hrc20Address","amount","decimals","sendTxCallback","hmyTokenContract","hmy","eth","Contract","default","accounts","ethereum","enable","res","methods","approve","hmyManagerContractAddress","withDecimals","send","from","defaultAccount","gasLimit","gasPrice","getGasPrice","mul","on","burnToken","userAddr","userAddrHex","getAddress","checksum","response","hmyManagerContract","getMappingFor","erc20TokenAddr","mappings","call","checkHmyBalance","addr","addrHex","balanceOf","totalSupply","setApprovalForAll","isApprovedForAll","burnTokens"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HmyMethodsERC20Web3 = void 0;\nconst tslib_1 = require(\"tslib\");\nconst utils_1 = require(\"../utils\");\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\nconst crypto_1 = require(\"@harmony-js/crypto\");\nconst BN = require('bn.js');\nclass HmyMethodsERC20Web3 {\n    constructor(params) {\n        this.useMetamask = false;\n        this.setUseOneWallet = (value) => value;\n        this.setUseMathWallet = (value) => value;\n        this.setUseMetamask = (value) => (this.useMetamask = value);\n        this.approveHmyManger = async (hrc20Address, amount, decimals, sendTxCallback) => {\n            const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const res = await hmyTokenContract.methods\n                .approve(this.hmyManagerContractAddress, utils_1.withDecimals(amount, decimals))\n                .send({\n                from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', sendTxCallback);\n            return res;\n        };\n        this.burnToken = async (hrc20Address, userAddr, amount, decimals, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const response = await this.hmyManagerContract.methods\n                .burnToken(hrc20Address, utils_1.withDecimals(amount, decimals), userAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', sendTxCallback);\n            return response;\n        };\n        this.getMappingFor = async (erc20TokenAddr) => {\n            const res = await this.hmyManagerContract.methods.mappings(erc20TokenAddr).call();\n            return res;\n        };\n        this.checkHmyBalance = async (hrc20Address, addr) => {\n            const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n            const addrHex = crypto_1.getAddress(addr).checksum;\n            return await hmyTokenContract.methods.balanceOf(addrHex).call();\n        };\n        this.totalSupply = async (hrc20Address) => {\n            const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n            return await hmyTokenContract.methods.totalSupply().call();\n        };\n        this.setApprovalForAll = async (hrc20Address, sendTxCallback) => {\n            const hmyTokenContract = new this.hmy.eth.Contract(MyERC20_1.default, hrc20Address);\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            let res = await hmyTokenContract.methods\n                .isApprovedForAll(this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount, this.hmyManagerContractAddress)\n                .call({\n                from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1)),\n            });\n            if (!res) {\n                res = await hmyTokenContract.methods\n                    .setApprovalForAll(this.hmyManagerContractAddress, true)\n                    .send({\n                    from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n                    gasLimit: 6721900,\n                    gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1)),\n                })\n                    .on('transactionHash', sendTxCallback);\n                return res;\n            }\n            else {\n                sendTxCallback('skip');\n                return res;\n            }\n        };\n        this.burnTokens = async (hrc20Address, userAddr, amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const response = await this.hmyManagerContract.methods\n                .burnTokens(hrc20Address, amount, userAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.hmy.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.hmy.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', sendTxCallback);\n            return response;\n        };\n        this.hmy = params.hmy;\n        this.hmyManagerContract = params.hmyManagerContract;\n        this.hmyManagerContractAddress = params.hmyManagerContractAddress;\n    }\n}\nexports.HmyMethodsERC20Web3 = HmyMethodsERC20Web3;\n"]},"metadata":{},"sourceType":"script"}