{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.confirmCallback = exports.getActionByType = exports.logOperationParams = exports.getOneBalance = exports.getEthBalance = exports.checkStatus = exports.waitAction = void 0;\n\nconst interfaces_1 = require(\"./interfaces\");\n\nconst logs_1 = require(\"./utils/logs\");\n\nconst utils_1 = require(\"./utils\");\n\nconst utils_2 = require(\"./blockchain/utils\");\n\nconst SLEEP_TIMEOUT_MS = 3000;\n\nexports.waitAction = async (api, operationId, actionType, maxTimeoutSec = 300, prefix) => {\n  logs_1.logger.wait({\n    prefix,\n    message: `${actionType} (${maxTimeoutSec} sec)`\n  });\n  let operation = await api.getOperation(operationId);\n\n  const getActionByType = type => operation.actions.find(a => a.type === type);\n\n  let action = getActionByType(actionType);\n  let maxTimeoutMs = maxTimeoutSec * 1000;\n\n  while (maxTimeoutMs > 0 && (action.status === interfaces_1.STATUS.IN_PROGRESS || action.status === interfaces_1.STATUS.WAITING)) {\n    logs_1.logger.info({\n      prefix,\n      message: `waiting ${actionType}`\n    });\n    operation = await api.getOperation(operation.id);\n    action = getActionByType(actionType);\n    await utils_1.sleep(SLEEP_TIMEOUT_MS);\n    maxTimeoutMs = maxTimeoutMs - SLEEP_TIMEOUT_MS;\n  }\n\n  if (maxTimeoutMs <= 0) {\n    throw new Error(`${actionType} time is out (${maxTimeoutSec} sec)`);\n  }\n\n  return action;\n};\n\nexports.checkStatus = (operation, prefix, actionName) => {\n  if (operation.status === interfaces_1.STATUS.SUCCESS) {\n    logs_1.logger.success({\n      prefix,\n      message: `${actionName} ${operation.status}`\n    });\n    return true;\n  }\n\n  if (operation.status === interfaces_1.STATUS.ERROR) {\n    logs_1.logger.error({\n      prefix,\n      message: `${actionName} ${operation.status}`\n    });\n    return false;\n  }\n\n  return false;\n};\n\nexports.getEthBalance = async (web3Client, token, address, erc20) => {\n  let res = 0;\n  let balance = 0;\n\n  switch (token) {\n    case interfaces_1.TOKEN.BUSD:\n      res = await web3Client.ethMethodsBUSD.checkEthBalance(address);\n      return utils_2.divDecimals(res, 18);\n\n    case interfaces_1.TOKEN.LINK:\n      res = await web3Client.ethMethodsLINK.checkEthBalance(address);\n      return utils_2.divDecimals(res, 18);\n\n    case interfaces_1.TOKEN.ERC20:\n      const erc20TokenDetails = await web3Client.ethMethodsERC20.tokenDetails(erc20);\n\n      if (!erc20TokenDetails) {\n        return 0;\n      }\n\n      balance = await web3Client.ethMethodsERC20.checkEthBalance(erc20, address);\n      return utils_2.divDecimals(balance, erc20TokenDetails.decimals);\n\n    case interfaces_1.TOKEN.ERC721:\n      balance = await web3Client.ethMethodsERС721.checkEthBalance(erc20, address);\n      return balance;\n  }\n};\n\nexports.getOneBalance = async (hmyClient, web3Client, token, address, erc20) => {\n  let res = 0;\n\n  switch (token) {\n    case interfaces_1.TOKEN.BUSD:\n      res = await hmyClient.hmyMethodsBUSD.checkHmyBalance(address);\n      return utils_2.divDecimals(res, 18);\n\n    case interfaces_1.TOKEN.LINK:\n      res = await hmyClient.hmyMethodsLINK.checkHmyBalance(address);\n\n    case interfaces_1.TOKEN.ERC721:\n      res = await hmyClient.hmyMethodsLINK.checkHmyBalance(address);\n      return utils_2.divDecimals(res, 18);\n\n    case interfaces_1.TOKEN.ERC20:\n      const hrc20Address = await hmyClient.hmyMethodsERC20.getMappingFor(erc20);\n      const erc20TokenDetails = await web3Client.ethMethodsERC20.tokenDetails(erc20);\n\n      if (!Number(hrc20Address) || !erc20TokenDetails) {\n        return 0;\n      }\n\n      const balance = await hmyClient.hmyMethodsERC20.checkHmyBalance(hrc20Address, address);\n      return utils_2.divDecimals(balance, erc20TokenDetails.decimals);\n  }\n};\n\nexports.logOperationParams = (operationParams, prefix) => {\n  logs_1.logger.info({\n    prefix,\n    message: 'Operation: ' + operationParams.type\n  });\n  logs_1.logger.info({\n    prefix,\n    message: 'Token: ' + operationParams.token\n  });\n\n  if (operationParams.erc20Address) {\n    logs_1.logger.info({\n      prefix,\n      message: 'ERC20 address: ' + operationParams.erc20Address\n    });\n  }\n\n  logs_1.logger.info({\n    prefix,\n    message: 'Amount: ' + operationParams.amount\n  });\n  logs_1.logger.info({\n    prefix,\n    message: 'ONE address: ' + operationParams.oneAddress\n  });\n  logs_1.logger.info({\n    prefix,\n    message: 'ETH address: ' + operationParams.ethAddress\n  });\n};\n\nexports.getActionByType = (operation, type) => operation.actions.find(a => a.type === type);\n\nexports.confirmCallback = async (api, transactionHash, actionType, operationId) => {\n  await api.confirmAction({\n    operationId,\n    transactionHash,\n    actionType\n  });\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operation-helpers.js"],"names":["Object","defineProperty","exports","value","confirmCallback","getActionByType","logOperationParams","getOneBalance","getEthBalance","checkStatus","waitAction","interfaces_1","require","logs_1","utils_1","utils_2","SLEEP_TIMEOUT_MS","api","operationId","actionType","maxTimeoutSec","prefix","logger","wait","message","operation","getOperation","type","actions","find","a","action","maxTimeoutMs","status","STATUS","IN_PROGRESS","WAITING","info","id","sleep","Error","actionName","SUCCESS","success","ERROR","error","web3Client","token","address","erc20","res","balance","TOKEN","BUSD","ethMethodsBUSD","checkEthBalance","divDecimals","LINK","ethMethodsLINK","ERC20","erc20TokenDetails","ethMethodsERC20","tokenDetails","decimals","ERC721","ethMethodsERС721","hmyClient","hmyMethodsBUSD","checkHmyBalance","hmyMethodsLINK","hrc20Address","hmyMethodsERC20","getMappingFor","Number","operationParams","erc20Address","amount","oneAddress","ethAddress","transactionHash","confirmAction"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.confirmCallback = exports.getActionByType = exports.logOperationParams = exports.getOneBalance = exports.getEthBalance = exports.checkStatus = exports.waitAction = void 0;\nconst interfaces_1 = require(\"./interfaces\");\nconst logs_1 = require(\"./utils/logs\");\nconst utils_1 = require(\"./utils\");\nconst utils_2 = require(\"./blockchain/utils\");\nconst SLEEP_TIMEOUT_MS = 3000;\nexports.waitAction = async (api, operationId, actionType, maxTimeoutSec = 300, prefix) => {\n    logs_1.logger.wait({ prefix, message: `${actionType} (${maxTimeoutSec} sec)` });\n    let operation = await api.getOperation(operationId);\n    const getActionByType = (type) => operation.actions.find(a => a.type === type);\n    let action = getActionByType(actionType);\n    let maxTimeoutMs = maxTimeoutSec * 1000;\n    while (maxTimeoutMs > 0 &&\n        (action.status === interfaces_1.STATUS.IN_PROGRESS || action.status === interfaces_1.STATUS.WAITING)) {\n        logs_1.logger.info({ prefix, message: `waiting ${actionType}` });\n        operation = await api.getOperation(operation.id);\n        action = getActionByType(actionType);\n        await utils_1.sleep(SLEEP_TIMEOUT_MS);\n        maxTimeoutMs = maxTimeoutMs - SLEEP_TIMEOUT_MS;\n    }\n    if (maxTimeoutMs <= 0) {\n        throw new Error(`${actionType} time is out (${maxTimeoutSec} sec)`);\n    }\n    return action;\n};\nexports.checkStatus = (operation, prefix, actionName) => {\n    if (operation.status === interfaces_1.STATUS.SUCCESS) {\n        logs_1.logger.success({ prefix, message: `${actionName} ${operation.status}` });\n        return true;\n    }\n    if (operation.status === interfaces_1.STATUS.ERROR) {\n        logs_1.logger.error({ prefix, message: `${actionName} ${operation.status}` });\n        return false;\n    }\n    return false;\n};\nexports.getEthBalance = async (web3Client, token, address, erc20) => {\n    let res = 0;\n    let balance = 0;\n    switch (token) {\n        case interfaces_1.TOKEN.BUSD:\n            res = await web3Client.ethMethodsBUSD.checkEthBalance(address);\n            return utils_2.divDecimals(res, 18);\n        case interfaces_1.TOKEN.LINK:\n            res = await web3Client.ethMethodsLINK.checkEthBalance(address);\n            return utils_2.divDecimals(res, 18);\n        case interfaces_1.TOKEN.ERC20:\n            const erc20TokenDetails = await web3Client.ethMethodsERC20.tokenDetails(erc20);\n            if (!erc20TokenDetails) {\n                return 0;\n            }\n            balance = await web3Client.ethMethodsERC20.checkEthBalance(erc20, address);\n            return utils_2.divDecimals(balance, erc20TokenDetails.decimals);\n        case interfaces_1.TOKEN.ERC721:\n            balance = await web3Client.ethMethodsERС721.checkEthBalance(erc20, address);\n            return balance;\n    }\n};\nexports.getOneBalance = async (hmyClient, web3Client, token, address, erc20) => {\n    let res = 0;\n    switch (token) {\n        case interfaces_1.TOKEN.BUSD:\n            res = await hmyClient.hmyMethodsBUSD.checkHmyBalance(address);\n            return utils_2.divDecimals(res, 18);\n        case interfaces_1.TOKEN.LINK:\n            res = await hmyClient.hmyMethodsLINK.checkHmyBalance(address);\n        case interfaces_1.TOKEN.ERC721:\n            res = await hmyClient.hmyMethodsLINK.checkHmyBalance(address);\n            return utils_2.divDecimals(res, 18);\n        case interfaces_1.TOKEN.ERC20:\n            const hrc20Address = await hmyClient.hmyMethodsERC20.getMappingFor(erc20);\n            const erc20TokenDetails = await web3Client.ethMethodsERC20.tokenDetails(erc20);\n            if (!Number(hrc20Address) || !erc20TokenDetails) {\n                return 0;\n            }\n            const balance = await hmyClient.hmyMethodsERC20.checkHmyBalance(hrc20Address, address);\n            return utils_2.divDecimals(balance, erc20TokenDetails.decimals);\n    }\n};\nexports.logOperationParams = (operationParams, prefix) => {\n    logs_1.logger.info({ prefix, message: 'Operation: ' + operationParams.type });\n    logs_1.logger.info({ prefix, message: 'Token: ' + operationParams.token });\n    if (operationParams.erc20Address) {\n        logs_1.logger.info({ prefix, message: 'ERC20 address: ' + operationParams.erc20Address });\n    }\n    logs_1.logger.info({ prefix, message: 'Amount: ' + operationParams.amount });\n    logs_1.logger.info({ prefix, message: 'ONE address: ' + operationParams.oneAddress });\n    logs_1.logger.info({ prefix, message: 'ETH address: ' + operationParams.ethAddress });\n};\nexports.getActionByType = (operation, type) => operation.actions.find(a => a.type === type);\nexports.confirmCallback = async (api, transactionHash, actionType, operationId) => {\n    await api.confirmAction({\n        operationId,\n        transactionHash,\n        actionType,\n    });\n};\n"]},"metadata":{},"sourceType":"script"}