{"ast":null,"code":"\"use strict\";\n/**\n * ## hhahaha\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionFactory = void 0;\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar shardingTransaction_1 = require(\"./shardingTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar TransactionFactory = function () {\n  function TransactionFactory(messenger) {\n    this.messenger = messenger;\n  }\n\n  TransactionFactory.getContractAddress = function (tx) {\n    var _a = tx.txParams,\n        from = _a.from,\n        nonce = _a.nonce;\n    return crypto_1.getAddress(crypto_1.getContractAddress(crypto_1.getAddress(from).checksum, Number.parseInt(\"\" + nonce, 10))).checksum;\n  };\n\n  TransactionFactory.prototype.setMessenger = function (messenger) {\n    this.messenger = messenger;\n  };\n  /**\n   * Create a new Transaction\n   * @params\n   * ```\n   * // to: Address of the receiver\n   * // value: value transferred in wei\n   * // gasLimit: the maximum gas would pay, can use string\n   * // shardID: send token from shardID\n   * // toShardId: send token to shardID\n   * // gasPrice: you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const txn = hmy.transactions.newTx({\n   *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *   value: '10000',\n   *   gasLimit: '210000',\n   *   shardID: 0,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   * });\n   * ```\n   */\n\n\n  TransactionFactory.prototype.newTx = function (txParams, sharding) {\n    if (sharding === void 0) {\n      sharding = false;\n    }\n\n    if (!sharding) {\n      return new transaction_1.Transaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n    }\n\n    return new shardingTransaction_1.ShardingTransaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n  };\n  /**\n   * clone the transaction\n   *\n   * @param transaction\n   *\n   * @example\n   * ```javascript\n   * const cloneTxn = hmy.transactions.clone(txn);\n   * console.log(cloneTxn)\n   * ```\n   */\n\n\n  TransactionFactory.prototype.clone = function (transaction) {\n    return new transaction_1.Transaction(transaction.txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n  };\n  /**\n   *\n   * @example\n   * ```javascript\n   * txHash = '0xf8698085174876e8008252088080949d72989b68777a1f3ffd6f1db079f1928373ee52830186a08027a0ab8229ff5d5240948098f26372eaed9ab2e9be23e8594b08e358ca56a47f8ae9a0084e5c4d1fec496af444423d8a714f65c079260ff01a1be1de7005dd424adf44'\n   *\n   * const recoverTx = hmy.transactions.recover(txHash);\n   * console.log(recoverTx);\n   * ```\n   */\n\n\n  TransactionFactory.prototype.recover = function (txHash) {\n    var newTxn = new transaction_1.Transaction({}, this.messenger, types_1.TxStatus.INTIALIZED);\n    newTxn.recover(txHash);\n    return newTxn;\n  };\n\n  return TransactionFactory;\n}();\n\nexports.TransactionFactory = TransactionFactory;","map":{"version":3,"sources":["../src/factory.ts"],"names":[],"mappings":";AAAA;;;;;AAKG;;;;;;;AAEH,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,kBAAA,GAAA,YAAA;AASE,WAAA,kBAAA,CAAY,SAAZ,EAAgC;AAC9B,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAVM,EAAA,kBAAA,CAAA,kBAAA,GAAP,UAA0B,EAA1B,EAAyC;AACjC,QAAA,EAAA,GAAkB,EAAE,CAAC,QAArB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;AACN,WAAO,QAAA,CAAA,UAAA,CACL,QAAA,CAAA,kBAAA,CAAmB,QAAA,CAAA,UAAA,CAAW,IAAX,EAAiB,QAApC,EAA8C,MAAM,CAAC,QAAP,CAAgB,KAAG,KAAnB,EAA4B,EAA5B,CAA9C,CADK,EAEL,QAFF;AAGD,GALM;;AAWP,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,SAAb,EAAiC;AAC/B,SAAK,SAAL,GAAiB,SAAjB;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAuBG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,QAAN,EAAiC,QAAjC,EAA0D;AAAzB,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,KAAA;AAAyB;;AACxD,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,IAAI,aAAA,CAAA,WAAJ,CAAgB,QAAhB,EAA0B,KAAK,SAA/B,EAA0C,OAAA,CAAA,QAAA,CAAS,UAAnD,CAAP;AACD;;AACD,WAAO,IAAI,qBAAA,CAAA,mBAAJ,CAAwB,QAAxB,EAAkC,KAAK,SAAvC,EAAkD,OAAA,CAAA,QAAA,CAAS,UAA3D,CAAP;AACD,GALD;AAOA;;;;;;;;;;AAUG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,WAAN,EAA8B;AAC5B,WAAO,IAAI,aAAA,CAAA,WAAJ,CAAgB,WAAW,CAAC,QAA5B,EAAsC,KAAK,SAA3C,EAAsD,OAAA,CAAA,QAAA,CAAS,UAA/D,CAAP;AACD,GAFD;AAIA;;;;;;;;;AASG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAAsB;AACpB,QAAM,MAAM,GAAG,IAAI,aAAA,CAAA,WAAJ,CAAgB,EAAhB,EAAoB,KAAK,SAAzB,EAAoC,OAAA,CAAA,QAAA,CAAS,UAA7C,CAAf;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,MAAf;AACA,WAAO,MAAP;AACD,GAJD;;AAKF,SAAA,kBAAA;AAAC,CA7ED,EAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * ## hhahaha\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar transaction_1 = require(\"./transaction\");\nvar shardingTransaction_1 = require(\"./shardingTransaction\");\nvar types_1 = require(\"./types\");\nvar TransactionFactory = /** @class */ (function () {\n    function TransactionFactory(messenger) {\n        this.messenger = messenger;\n    }\n    TransactionFactory.getContractAddress = function (tx) {\n        var _a = tx.txParams, from = _a.from, nonce = _a.nonce;\n        return crypto_1.getAddress(crypto_1.getContractAddress(crypto_1.getAddress(from).checksum, Number.parseInt(\"\" + nonce, 10))).checksum;\n    };\n    TransactionFactory.prototype.setMessenger = function (messenger) {\n        this.messenger = messenger;\n    };\n    /**\n     * Create a new Transaction\n     * @params\n     * ```\n     * // to: Address of the receiver\n     * // value: value transferred in wei\n     * // gasLimit: the maximum gas would pay, can use string\n     * // shardID: send token from shardID\n     * // toShardId: send token to shardID\n     * // gasPrice: you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const txn = hmy.transactions.newTx({\n     *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n     *   value: '10000',\n     *   gasLimit: '210000',\n     *   shardID: 0,\n     *   toShardID: 0,\n     *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n     * });\n     * ```\n     */\n    TransactionFactory.prototype.newTx = function (txParams, sharding) {\n        if (sharding === void 0) { sharding = false; }\n        if (!sharding) {\n            return new transaction_1.Transaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n        }\n        return new shardingTransaction_1.ShardingTransaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n    };\n    /**\n     * clone the transaction\n     *\n     * @param transaction\n     *\n     * @example\n     * ```javascript\n     * const cloneTxn = hmy.transactions.clone(txn);\n     * console.log(cloneTxn)\n     * ```\n     */\n    TransactionFactory.prototype.clone = function (transaction) {\n        return new transaction_1.Transaction(transaction.txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n    };\n    /**\n     *\n     * @example\n     * ```javascript\n     * txHash = '0xf8698085174876e8008252088080949d72989b68777a1f3ffd6f1db079f1928373ee52830186a08027a0ab8229ff5d5240948098f26372eaed9ab2e9be23e8594b08e358ca56a47f8ae9a0084e5c4d1fec496af444423d8a714f65c079260ff01a1be1de7005dd424adf44'\n     *\n     * const recoverTx = hmy.transactions.recover(txHash);\n     * console.log(recoverTx);\n     * ```\n     */\n    TransactionFactory.prototype.recover = function (txHash) {\n        var newTxn = new transaction_1.Transaction({}, this.messenger, types_1.TxStatus.INTIALIZED);\n        newTxn.recover(txHash);\n        return newTxn;\n    };\n    return TransactionFactory;\n}());\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=factory.js.map"]},"metadata":{},"sourceType":"script"}