{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthMethods = void 0;\n\nconst crypto_1 = require(\"@harmony-js/crypto\");\n\nconst utils_1 = require(\"../utils\");\n\nconst BN = require('bn.js');\n\nclass EthMethods {\n  constructor(params) {\n    this.useMetamask = false;\n\n    this.setUseMetamask = value => this.useMetamask = value;\n\n    this.approveEthManger = async (amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      return await this.ethTokenContract.methods.approve(this.ethManagerAddress, utils_1.withDecimals(amount, 18)).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gas: this.gasLimit,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', hash => sendTxCallback(hash));\n    };\n\n    this.lockToken = async (userAddr, amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const transaction = await this.ethManagerContract.methods.lockToken(utils_1.withDecimals(amount, 18), hmyAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gas: this.gasLimit,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', hash => sendTxCallback(hash));\n      return transaction;\n    };\n\n    this.checkEthBalance = async addr => {\n      return await this.ethTokenContract.methods.balanceOf(addr).call();\n    };\n\n    this.web3 = params.web3;\n    this.ethManagerContract = params.ethManagerContract;\n    this.ethTokenContract = params.ethTokenContract;\n    this.ethManagerAddress = params.ethManagerAddress;\n    this.gasPrice = params.gasPrice;\n    this.gasLimit = params.gasLimit;\n    this.gasApiKey = params.gasApiKey;\n  }\n\n}\n\nexports.EthMethods = EthMethods;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/eth/EthMethods.js"],"names":["Object","defineProperty","exports","value","EthMethods","crypto_1","require","utils_1","BN","constructor","params","useMetamask","setUseMetamask","approveEthManger","amount","sendTxCallback","accounts","ethereum","enable","ethTokenContract","methods","approve","ethManagerAddress","withDecimals","send","from","web3","eth","defaultAccount","gas","gasLimit","gasPrice","getGasPrice","mul","on","hash","lockToken","userAddr","hmyAddrHex","getAddress","checksum","transaction","ethManagerContract","checkEthBalance","addr","balanceOf","call","gasApiKey"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthMethods = void 0;\nconst crypto_1 = require(\"@harmony-js/crypto\");\nconst utils_1 = require(\"../utils\");\nconst BN = require('bn.js');\nclass EthMethods {\n    constructor(params) {\n        this.useMetamask = false;\n        this.setUseMetamask = (value) => (this.useMetamask = value);\n        this.approveEthManger = async (amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            return await this.ethTokenContract.methods\n                .approve(this.ethManagerAddress, utils_1.withDecimals(amount, 18))\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gas: this.gasLimit,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', (hash) => sendTxCallback(hash));\n        };\n        this.lockToken = async (userAddr, amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const transaction = await this.ethManagerContract.methods\n                .lockToken(utils_1.withDecimals(amount, 18), hmyAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gas: this.gasLimit,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', (hash) => sendTxCallback(hash));\n            return transaction;\n        };\n        this.checkEthBalance = async (addr) => {\n            return await this.ethTokenContract.methods.balanceOf(addr).call();\n        };\n        this.web3 = params.web3;\n        this.ethManagerContract = params.ethManagerContract;\n        this.ethTokenContract = params.ethTokenContract;\n        this.ethManagerAddress = params.ethManagerAddress;\n        this.gasPrice = params.gasPrice;\n        this.gasLimit = params.gasLimit;\n        this.gasApiKey = params.gasApiKey;\n    }\n}\nexports.EthMethods = EthMethods;\n"]},"metadata":{},"sourceType":"script"}