{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHmyClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst web3_1 = tslib_1.__importDefault(require(\"web3\"));\n\nconst HmyMethods_1 = require(\"./HmyMethods\");\n\nconst HmyMethodsWeb3_1 = require(\"./HmyMethodsWeb3\");\n\nconst HmyMethodsERC20_1 = require(\"./HmyMethodsERC20\");\n\nconst HmyMethodsERC20Web3_1 = require(\"./HmyMethodsERC20Web3\");\n\nconst {\n  Harmony\n} = require('@harmony-js/core');\n\nconst {\n  ChainType\n} = require('@harmony-js/utils');\n\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\n\nconst LINKHmyManager_1 = tslib_1.__importDefault(require(\"../out/LINKHmyManager\"));\n\nconst HmyManagerERC20_1 = tslib_1.__importDefault(require(\"../out/HmyManagerERC20\"));\n\nconst HmyManagerERC721_1 = tslib_1.__importDefault(require(\"../out/HmyManagerERC721\"));\n\nconst HmyDeposit_1 = tslib_1.__importDefault(require(\"../out/HmyDeposit\"));\n\nconst HmyMethodsDepositWeb3_1 = require(\"./HmyMethodsDepositWeb3\");\n\nconst HmyMethodsDeposit_1 = require(\"./HmyMethodsDeposit\");\n\nexports.getHmyClient = async params => {\n  const hmy = new Harmony(params.nodeURL, {\n    chainType: ChainType.Harmony,\n    chainId: Number(params.chainId)\n  });\n  const {\n    contracts\n  } = params;\n  let userAddress;\n  let hmyMethodsLINK, hmyMethodsBUSD, hmyMethodsERC20, hmyMethodsERC721, hmyMethodsDeposit;\n  const web3 = new web3_1.default(params.nodeURL);\n\n  if (params.sdk === 'web3') {\n    const hmyBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);\n    const hmyBUSDManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.busdManager);\n    const hmyLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);\n    const hmyLINKManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.linkManager);\n    const hmyManagerContract = new web3.eth.Contract(HmyManagerERC20_1.default, contracts.erc20Manager);\n    const hmyDepositContract = new web3.eth.Contract(HmyDeposit_1.default, contracts.depositManager);\n    hmyMethodsDeposit = new HmyMethodsDepositWeb3_1.HmyMethodsDepositWeb3({\n      hmy: web3,\n      hmyTokenContract: hmyBUSDContract,\n      hmyManagerContract: hmyDepositContract,\n      hmyManagerContractAddress: contracts.depositManager\n    });\n    hmyMethodsBUSD = new HmyMethodsWeb3_1.HmyMethodsWeb3({\n      hmy: web3,\n      hmyTokenContract: hmyBUSDContract,\n      hmyManagerContract: hmyBUSDManagerContract,\n      hmyManagerContractAddress: contracts.busdManager\n    });\n    hmyMethodsLINK = new HmyMethodsWeb3_1.HmyMethodsWeb3({\n      hmy: web3,\n      hmyTokenContract: hmyLINKContract,\n      hmyManagerContract: hmyLINKManagerContract,\n      hmyManagerContractAddress: contracts.linkManager\n    });\n    hmyMethodsERC20 = new HmyMethodsERC20Web3_1.HmyMethodsERC20Web3({\n      hmy: web3,\n      hmyManagerContract: hmyManagerContract,\n      hmyManagerContractAddress: contracts.erc20Manager\n    });\n  } else {\n    const hmyDepositContract = hmy.contracts.createContract(HmyDeposit_1.default, contracts.depositManager);\n    const hmyBUSDContract = hmy.contracts.createContract(MyERC20_1.default, contracts.busd);\n    const hmyBUSDManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.busdManager);\n    const hmyLINKContract = hmy.contracts.createContract(MyERC20_1.default, contracts.link);\n    const hmyLINKManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.linkManager);\n    const hmyManagerContract = hmy.contracts.createContract(HmyManagerERC20_1.default, contracts.erc20Manager);\n    const hmyManagerERC721Contract = hmy.contracts.createContract(HmyManagerERC721_1.default, contracts.erc721Manager);\n    hmyMethodsBUSD = new HmyMethods_1.HmyMethods({\n      hmy: hmy,\n      hmyTokenContract: hmyBUSDContract,\n      hmyManagerContract: hmyBUSDManagerContract\n    });\n    hmyMethodsDeposit = new HmyMethodsDeposit_1.HmyMethodsDeposit({\n      hmy: hmy,\n      hmyTokenContract: hmyBUSDContract,\n      hmyManagerContract: hmyDepositContract\n    });\n    hmyMethodsLINK = new HmyMethods_1.HmyMethods({\n      hmy: hmy,\n      hmyTokenContract: hmyLINKContract,\n      hmyManagerContract: hmyLINKManagerContract\n    });\n    hmyMethodsERC20 = new HmyMethodsERC20_1.HmyMethodsERC20({\n      hmy: hmy,\n      hmyManagerContract: hmyManagerContract\n    });\n    hmyMethodsERC721 = new HmyMethodsERC20_1.HmyMethodsERC20({\n      hmy: hmy,\n      hmyManagerContract: hmyManagerERC721Contract\n    });\n  }\n\n  return {\n    addWallet: async privateKey => {\n      if (params.sdk === 'web3') {\n        const ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);\n        web3.eth.accounts.wallet.add(ethUserAccount);\n        web3.eth.defaultAccount = ethUserAccount.address;\n        userAddress = ethUserAccount.address;\n      } else {\n        const account = await hmy.wallet.addByPrivateKey(privateKey);\n        userAddress = account.address;\n      }\n    },\n    getUserAddress: () => userAddress,\n    hmyMethodsBUSD,\n    hmyMethodsLINK,\n    hmyMethodsERC20,\n    hmyMethodsERC721,\n    hmyMethodsDeposit,\n    getBech32Address: address => hmy.crypto.getAddress(address).bech32,\n    getHmyBalance: address => hmy.blockchain.getBalance({\n      address\n    }),\n    setUseOneWallet: value => {\n      if (params.sdk === 'web3') {\n        hmyMethodsBUSD.setUseMetamask(value);\n        hmyMethodsLINK.setUseMetamask(value);\n        hmyMethodsERC20.setUseMetamask(value);\n      } else {\n        hmyMethodsBUSD.setUseOneWallet(value);\n        hmyMethodsLINK.setUseOneWallet(value);\n        hmyMethodsERC20.setUseOneWallet(value);\n      }\n    },\n    setUseMathWallet: value => {\n      if (params.sdk === 'web3') {\n        hmyMethodsBUSD.setUseMetamask(value);\n        hmyMethodsLINK.setUseMetamask(value);\n        hmyMethodsERC20.setUseMetamask(value);\n      } else {\n        hmyMethodsBUSD.setUseMathWallet(value);\n        hmyMethodsLINK.setUseMathWallet(value);\n        hmyMethodsERC20.setUseMathWallet(value);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/hmy/index.js"],"names":["Object","defineProperty","exports","value","getHmyClient","tslib_1","require","web3_1","__importDefault","HmyMethods_1","HmyMethodsWeb3_1","HmyMethodsERC20_1","HmyMethodsERC20Web3_1","Harmony","ChainType","MyERC20_1","LINKHmyManager_1","HmyManagerERC20_1","HmyManagerERC721_1","HmyDeposit_1","HmyMethodsDepositWeb3_1","HmyMethodsDeposit_1","params","hmy","nodeURL","chainType","chainId","Number","contracts","userAddress","hmyMethodsLINK","hmyMethodsBUSD","hmyMethodsERC20","hmyMethodsERC721","hmyMethodsDeposit","web3","default","sdk","hmyBUSDContract","eth","Contract","busd","hmyBUSDManagerContract","busdManager","hmyLINKContract","link","hmyLINKManagerContract","linkManager","hmyManagerContract","erc20Manager","hmyDepositContract","depositManager","HmyMethodsDepositWeb3","hmyTokenContract","hmyManagerContractAddress","HmyMethodsWeb3","HmyMethodsERC20Web3","createContract","hmyManagerERC721Contract","erc721Manager","HmyMethods","HmyMethodsDeposit","HmyMethodsERC20","addWallet","privateKey","ethUserAccount","accounts","privateKeyToAccount","wallet","add","defaultAccount","address","account","addByPrivateKey","getUserAddress","getBech32Address","crypto","getAddress","bech32","getHmyBalance","blockchain","getBalance","setUseOneWallet","setUseMetamask","setUseMathWallet"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHmyClient = void 0;\nconst tslib_1 = require(\"tslib\");\nconst web3_1 = tslib_1.__importDefault(require(\"web3\"));\nconst HmyMethods_1 = require(\"./HmyMethods\");\nconst HmyMethodsWeb3_1 = require(\"./HmyMethodsWeb3\");\nconst HmyMethodsERC20_1 = require(\"./HmyMethodsERC20\");\nconst HmyMethodsERC20Web3_1 = require(\"./HmyMethodsERC20Web3\");\nconst { Harmony } = require('@harmony-js/core');\nconst { ChainType } = require('@harmony-js/utils');\nconst MyERC20_1 = tslib_1.__importDefault(require(\"../out/MyERC20\"));\nconst LINKHmyManager_1 = tslib_1.__importDefault(require(\"../out/LINKHmyManager\"));\nconst HmyManagerERC20_1 = tslib_1.__importDefault(require(\"../out/HmyManagerERC20\"));\nconst HmyManagerERC721_1 = tslib_1.__importDefault(require(\"../out/HmyManagerERC721\"));\nconst HmyDeposit_1 = tslib_1.__importDefault(require(\"../out/HmyDeposit\"));\nconst HmyMethodsDepositWeb3_1 = require(\"./HmyMethodsDepositWeb3\");\nconst HmyMethodsDeposit_1 = require(\"./HmyMethodsDeposit\");\nexports.getHmyClient = async (params) => {\n    const hmy = new Harmony(params.nodeURL, {\n        chainType: ChainType.Harmony,\n        chainId: Number(params.chainId),\n    });\n    const { contracts } = params;\n    let userAddress;\n    let hmyMethodsLINK, hmyMethodsBUSD, hmyMethodsERC20, hmyMethodsERC721, hmyMethodsDeposit;\n    const web3 = new web3_1.default(params.nodeURL);\n    if (params.sdk === 'web3') {\n        const hmyBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);\n        const hmyBUSDManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.busdManager);\n        const hmyLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);\n        const hmyLINKManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.linkManager);\n        const hmyManagerContract = new web3.eth.Contract(HmyManagerERC20_1.default, contracts.erc20Manager);\n        const hmyDepositContract = new web3.eth.Contract(HmyDeposit_1.default, contracts.depositManager);\n        hmyMethodsDeposit = new HmyMethodsDepositWeb3_1.HmyMethodsDepositWeb3({\n            hmy: web3,\n            hmyTokenContract: hmyBUSDContract,\n            hmyManagerContract: hmyDepositContract,\n            hmyManagerContractAddress: contracts.depositManager,\n        });\n        hmyMethodsBUSD = new HmyMethodsWeb3_1.HmyMethodsWeb3({\n            hmy: web3,\n            hmyTokenContract: hmyBUSDContract,\n            hmyManagerContract: hmyBUSDManagerContract,\n            hmyManagerContractAddress: contracts.busdManager,\n        });\n        hmyMethodsLINK = new HmyMethodsWeb3_1.HmyMethodsWeb3({\n            hmy: web3,\n            hmyTokenContract: hmyLINKContract,\n            hmyManagerContract: hmyLINKManagerContract,\n            hmyManagerContractAddress: contracts.linkManager,\n        });\n        hmyMethodsERC20 = new HmyMethodsERC20Web3_1.HmyMethodsERC20Web3({\n            hmy: web3,\n            hmyManagerContract: hmyManagerContract,\n            hmyManagerContractAddress: contracts.erc20Manager,\n        });\n    }\n    else {\n        const hmyDepositContract = hmy.contracts.createContract(HmyDeposit_1.default, contracts.depositManager);\n        const hmyBUSDContract = hmy.contracts.createContract(MyERC20_1.default, contracts.busd);\n        const hmyBUSDManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.busdManager);\n        const hmyLINKContract = hmy.contracts.createContract(MyERC20_1.default, contracts.link);\n        const hmyLINKManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.linkManager);\n        const hmyManagerContract = hmy.contracts.createContract(HmyManagerERC20_1.default, contracts.erc20Manager);\n        const hmyManagerERC721Contract = hmy.contracts.createContract(HmyManagerERC721_1.default, contracts.erc721Manager);\n        hmyMethodsBUSD = new HmyMethods_1.HmyMethods({\n            hmy: hmy,\n            hmyTokenContract: hmyBUSDContract,\n            hmyManagerContract: hmyBUSDManagerContract,\n        });\n        hmyMethodsDeposit = new HmyMethodsDeposit_1.HmyMethodsDeposit({\n            hmy: hmy,\n            hmyTokenContract: hmyBUSDContract,\n            hmyManagerContract: hmyDepositContract,\n        });\n        hmyMethodsLINK = new HmyMethods_1.HmyMethods({\n            hmy: hmy,\n            hmyTokenContract: hmyLINKContract,\n            hmyManagerContract: hmyLINKManagerContract,\n        });\n        hmyMethodsERC20 = new HmyMethodsERC20_1.HmyMethodsERC20({\n            hmy: hmy,\n            hmyManagerContract: hmyManagerContract,\n        });\n        hmyMethodsERC721 = new HmyMethodsERC20_1.HmyMethodsERC20({\n            hmy: hmy,\n            hmyManagerContract: hmyManagerERC721Contract,\n        });\n    }\n    return {\n        addWallet: async (privateKey) => {\n            if (params.sdk === 'web3') {\n                const ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);\n                web3.eth.accounts.wallet.add(ethUserAccount);\n                web3.eth.defaultAccount = ethUserAccount.address;\n                userAddress = ethUserAccount.address;\n            }\n            else {\n                const account = await hmy.wallet.addByPrivateKey(privateKey);\n                userAddress = account.address;\n            }\n        },\n        getUserAddress: () => userAddress,\n        hmyMethodsBUSD,\n        hmyMethodsLINK,\n        hmyMethodsERC20,\n        hmyMethodsERC721,\n        hmyMethodsDeposit,\n        getBech32Address: address => hmy.crypto.getAddress(address).bech32,\n        getHmyBalance: address => hmy.blockchain.getBalance({ address }),\n        setUseOneWallet: (value) => {\n            if (params.sdk === 'web3') {\n                hmyMethodsBUSD.setUseMetamask(value);\n                hmyMethodsLINK.setUseMetamask(value);\n                hmyMethodsERC20.setUseMetamask(value);\n            }\n            else {\n                hmyMethodsBUSD.setUseOneWallet(value);\n                hmyMethodsLINK.setUseOneWallet(value);\n                hmyMethodsERC20.setUseOneWallet(value);\n            }\n        },\n        setUseMathWallet: (value) => {\n            if (params.sdk === 'web3') {\n                hmyMethodsBUSD.setUseMetamask(value);\n                hmyMethodsLINK.setUseMetamask(value);\n                hmyMethodsERC20.setUseMetamask(value);\n            }\n            else {\n                hmyMethodsBUSD.setUseMathWallet(value);\n                hmyMethodsLINK.setUseMathWallet(value);\n                hmyMethodsERC20.setUseMathWallet(value);\n            }\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"script"}