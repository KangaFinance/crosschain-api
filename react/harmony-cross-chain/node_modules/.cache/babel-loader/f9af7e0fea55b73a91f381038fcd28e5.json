{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar types_1 = require(\"./types\");\n\nvar utils_2 = require(\"./utils\");\n\nvar transactionBase_1 = require(\"./transactionBase\");\n\nvar Transaction = function (_super) {\n  tslib_1.__extends(Transaction, _super);\n  /**\n   *\n   * @Params\n   * ```javascript\n   * id:               string;\n    from:             string;\n    to:               string;\n    nonce:            number | string;\n    gasLimit:         number | string | BN;\n    gasPrice:         number | string | BN;\n    shardID:          number | string;\n    toShardID:        number | string;\n    data:             string;\n    value:            number | string | BN;\n    chainId:          number;\n    rawTransaction:   string;\n    unsignedRawTransaction: string;\n    signature:        Signature;\n    receipt?:         TransasctionReceipt;\n   * ```\n   */\n\n\n  function Transaction(params, messenger, txStatus) {\n    if (messenger === void 0) {\n      messenger = utils_2.defaultMessenger;\n    }\n\n    if (txStatus === void 0) {\n      txStatus = types_1.TxStatus.INTIALIZED;\n    }\n\n    var _this = _super.call(this, messenger, txStatus) || this; // intialize transaction\n\n\n    _this.id = params && params.id ? params.id : '0x';\n    _this.from = params && params.from ? params.from : '0x';\n    _this.nonce = params && params.nonce ? params.nonce : 0;\n    _this.gasPrice = params && params.gasPrice ? new utils_1.Unit(params.gasPrice).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    _this.gasLimit = params && params.gasLimit ? new utils_1.Unit(params.gasLimit).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    _this.shardID = params && params.shardID !== undefined ? params.shardID : _this.messenger.currentShard;\n    _this.toShardID = params && params.toShardID !== undefined ? params.toShardID : _this.messenger.currentShard;\n    _this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    _this.value = params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    _this.data = params && params.data ? params.data : '0x'; // chainid should change with different network settings\n\n    _this.chainId = params && params.chainId ? params.chainId : _this.messenger.chainId;\n    _this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    _this.unsignedRawTransaction = params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    _this.signature = params && params.signature ? params.signature : {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0\n    };\n    _this.receipt = params && params.receipt ? params.receipt : undefined;\n    _this.cxStatus = _this.isCrossShard() ? types_1.TxStatus.INTIALIZED : types_1.TxStatus.NONE;\n    return _this;\n  }\n  /**\n   *\n   * @example\n   * ```javascript\n   * const unsigned = txn.getRLPUnsigned(txn);\n   * console.log(unsigned);\n   * ```\n   */\n\n\n  Transaction.prototype.getRLPUnsigned = function () {\n    var _this = this;\n\n    var raw = []; // temp setting to be compatible with eth\n\n    var fields = this.messenger.chainType === utils_1.ChainType.Harmony ? utils_2.transactionFields : utils_2.transactionFieldsETH;\n    fields.forEach(function (field) {\n      var value = _this.txParams[field.name] || [];\n      value = crypto_1.arrayify(crypto_1.hexlify(field.transform === 'hex' ? utils_1.add0xToString(value.toString(16)) : value)); // Fixed-width field\n\n      if (field.fix === true && field.length && value.length !== field.length && value.length > 0) {\n        throw new Error(\"invalid length for \" + field.name);\n      } // Variable-width (with a maximum)\n\n\n      if (field.fix === false && field.length) {\n        value = crypto_1.stripZeros(value);\n\n        if (value.length > field.length) {\n          throw new Error(\"invalid length for \" + field.name);\n        }\n      }\n\n      raw.push(crypto_1.hexlify(value));\n    });\n\n    if (this.txParams.chainId != null && this.txParams.chainId !== 0) {\n      raw.push(crypto_1.hexlify(this.txParams.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n\n    return [crypto_1.encode(raw), raw];\n  };\n\n  Transaction.prototype.getRLPSigned = function (raw, signature) {\n    // temp setting to be compatible with eth\n    var rawLength = this.messenger.chainType === utils_1.ChainType.Harmony ? 11 : 9;\n    var sig = crypto_1.splitSignature(signature);\n    var v = 27 + (sig.recoveryParam || 0);\n\n    if (raw.length === rawLength) {\n      raw.pop();\n      raw.pop();\n      raw.pop();\n      v += this.chainId * 2 + 8;\n    }\n\n    raw.push(crypto_1.hexlify(v));\n    raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n    raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n    return crypto_1.encode(raw);\n  };\n  /**\n   * @example\n   * ```javascript\n   * console.log(txn.getRawTransaction());\n   * ```\n   */\n\n\n  Transaction.prototype.getRawTransaction = function () {\n    return this.rawTransaction;\n  };\n  /** @hidden */\n\n\n  Transaction.prototype.recover = function (rawTransaction) {\n    // temp setting to be compatible with eth\n    var recovered = this.messenger.chainType === utils_1.ChainType.Harmony ? utils_2.recover(rawTransaction) : utils_2.recoverETH(rawTransaction);\n    this.setParams(recovered);\n    return this;\n  };\n\n  Object.defineProperty(Transaction.prototype, \"txPayload\", {\n    /**\n     * get the payload of transaction\n     *\n     * @example\n     * ```\n     * const payload = txn.txPayload;\n     * console.log(payload);\n     * ```\n     */\n    get: function () {\n      return {\n        from: this.txParams.from || '0x',\n        to: this.txParams.to || '0x',\n        shardID: this.txParams.shardID ? utils_1.numberToHex(this.shardID) : '0x',\n        toShardID: this.txParams.toShardID ? utils_1.numberToHex(this.toShardID) : '0x',\n        gas: this.txParams.gasLimit ? utils_1.numberToHex(this.txParams.gasLimit) : '0x',\n        gasPrice: this.txParams.gasPrice ? utils_1.numberToHex(this.txParams.gasPrice) : '0x',\n        value: this.txParams.value ? utils_1.numberToHex(this.txParams.value) : '0x',\n        data: this.txParams.data || '0x',\n        nonce: this.txParams.nonce ? utils_1.numberToHex(this.nonce) : '0x'\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Transaction.prototype, \"txParams\", {\n    /**\n     * get transaction params\n     *\n     * @example\n     * ```\n     * const txParams = txn.txParams;\n     * console.log(txParams)\n     * ```\n     */\n    get: function () {\n      return {\n        id: this.id || '0x',\n        from: this.from || '',\n        nonce: this.nonce || 0,\n        gasPrice: this.gasPrice || new utils_1.Unit(0).asWei().toWei(),\n        gasLimit: this.gasLimit || new utils_1.Unit(0).asWei().toWei(),\n        shardID: this.shardID !== undefined ? this.shardID : this.messenger.currentShard,\n        toShardID: this.toShardID !== undefined ? this.toShardID : this.messenger.currentShard,\n        to: Transaction.normalizeAddress(this.to) || '0x',\n        value: this.value || new utils_1.Unit(0).asWei().toWei(),\n        data: this.data || '0x',\n        chainId: this.chainId || 0,\n        rawTransaction: this.rawTransaction || '0x',\n        unsignedRawTransaction: this.unsignedRawTransaction || '0x',\n        signature: this.signature || '0x'\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * set the params to the txn\n   *\n   * @example\n   * ```\n   * txn.setParams({\n   *   to: 'one1ew56rqrucu6p6n598fmjmnfh8dd4xpg6atne9c',\n   *   value: '1200',\n   *   gasLimit: '230000',\n   *   shardID: 1,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('101').asGwei().toWei(),\n   *   signature: {\n   *     r: '0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c042',\n   *     s: '0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b354',\n   *     v: 0\n   *   },\n   * });\n   * console.log(txn);\n   * ```\n   */\n\n  Transaction.prototype.setParams = function (params) {\n    this.id = params && params.id ? params.id : '0x';\n    this.from = params && params.from ? params.from : '0x';\n    this.nonce = params && params.nonce ? params.nonce : 0;\n    this.gasPrice = params && params.gasPrice ? new utils_1.Unit(params.gasPrice).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    this.gasLimit = params && params.gasLimit ? new utils_1.Unit(params.gasLimit).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    this.shardID = params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n    this.toShardID = params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n    this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    this.value = params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n    this.data = params && params.data ? params.data : '0x';\n    this.chainId = params && params.chainId ? params.chainId : 0;\n    this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    this.unsignedRawTransaction = params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    this.signature = params && params.signature ? params.signature : {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0\n    };\n\n    if (this.rawTransaction !== '0x') {\n      this.setTxStatus(types_1.TxStatus.SIGNED);\n    } else {\n      this.setTxStatus(types_1.TxStatus.INTIALIZED);\n    }\n  };\n  /** @hidden */\n\n\n  Transaction.prototype.map = function (fn) {\n    var newParams = fn(this.txParams);\n    this.setParams(newParams);\n    return this;\n  };\n  /**\n   * Check whether the transaction is cross shard\n   *\n   * @example\n   * ```javascript\n   * console.log(txn.isCrossShard());\n   * ```\n   */\n\n\n  Transaction.prototype.isCrossShard = function () {\n    return new crypto_1.BN(this.txParams.shardID).toString() !== new crypto_1.BN(this.txParams.toShardID).toString();\n  };\n  /**\n   *\n   * @example\n   * ```\n   * txn.sendTransaction().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n\n  Transaction.prototype.sendTransaction = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var res;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n              throw new Error('Transaction not signed');\n            }\n\n            if (!this.messenger) {\n              throw new Error('Messenger not found');\n            }\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.SendRawTransaction, this.rawTransaction, this.messenger.chainType, typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID)];\n\n          case 1:\n            res = _a.sent(); // temporarilly hard coded\n\n            if (res.isResult()) {\n              this.id = res.result;\n              this.emitTransactionHash(this.id);\n              this.setTxStatus(types_1.TxStatus.PENDING); // await this.confirm(this.id, 20, 1000);\n\n              return [2\n              /*return*/\n              , [this, res.result]];\n            } else if (res.isError()) {\n              this.emitConfirm(\"transaction failed:\" + res.error.message);\n              this.setTxStatus(types_1.TxStatus.REJECTED);\n              return [2\n              /*return*/\n              , [this, \"transaction failed:\" + res.error.message]];\n            } else {\n              this.emitError('transaction failed');\n              throw new Error('transaction failed');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Transaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    if (interval === void 0) {\n      interval = 1000;\n    }\n\n    if (shardID === void 0) {\n      shardID = this.txParams.shardID;\n    }\n\n    if (toShardID === void 0) {\n      toShardID = this.txParams.toShardID;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var txConfirmed, cxConfirmed;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.txConfirm(txHash, maxAttempts, interval, shardID)];\n\n          case 1:\n            txConfirmed = _a.sent();\n\n            if (!this.isCrossShard()) {\n              return [2\n              /*return*/\n              , txConfirmed];\n            }\n\n            if (!txConfirmed.isConfirmed()) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n\n          case 2:\n            cxConfirmed = _a.sent();\n            return [2\n            /*return*/\n            , cxConfirmed];\n\n          case 3:\n            return [2\n            /*return*/\n            , txConfirmed];\n        }\n      });\n    });\n  };\n\n  return Transaction;\n}(transactionBase_1.TransactionBase);\n\nexports.Transaction = Transaction;","map":{"version":3,"sources":["../src/transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar network_1 = require(\"@harmony-js/network\");\nvar types_1 = require(\"./types\");\nvar utils_2 = require(\"./utils\");\nvar transactionBase_1 = require(\"./transactionBase\");\nvar Transaction = /** @class */ (function (_super) {\n    tslib_1.__extends(Transaction, _super);\n    /**\n     *\n     * @Params\n     * ```javascript\n     * id:               string;\n      from:             string;\n      to:               string;\n      nonce:            number | string;\n      gasLimit:         number | string | BN;\n      gasPrice:         number | string | BN;\n      shardID:          number | string;\n      toShardID:        number | string;\n      data:             string;\n      value:            number | string | BN;\n      chainId:          number;\n      rawTransaction:   string;\n      unsignedRawTransaction: string;\n      signature:        Signature;\n      receipt?:         TransasctionReceipt;\n     * ```\n     */\n    function Transaction(params, messenger, txStatus) {\n        if (messenger === void 0) { messenger = utils_2.defaultMessenger; }\n        if (txStatus === void 0) { txStatus = types_1.TxStatus.INTIALIZED; }\n        var _this = _super.call(this, messenger, txStatus) || this;\n        // intialize transaction\n        _this.id = params && params.id ? params.id : '0x';\n        _this.from = params && params.from ? params.from : '0x';\n        _this.nonce = params && params.nonce ? params.nonce : 0;\n        _this.gasPrice =\n            params && params.gasPrice\n                ? new utils_1.Unit(params.gasPrice).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        _this.gasLimit =\n            params && params.gasLimit\n                ? new utils_1.Unit(params.gasLimit).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        _this.shardID =\n            params && params.shardID !== undefined ? params.shardID : _this.messenger.currentShard;\n        _this.toShardID =\n            params && params.toShardID !== undefined ? params.toShardID : _this.messenger.currentShard;\n        _this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n        _this.value =\n            params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n        _this.data = params && params.data ? params.data : '0x';\n        // chainid should change with different network settings\n        _this.chainId = params && params.chainId ? params.chainId : _this.messenger.chainId;\n        _this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n        _this.unsignedRawTransaction =\n            params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n        _this.signature =\n            params && params.signature\n                ? params.signature\n                : {\n                    r: '',\n                    s: '',\n                    recoveryParam: 0,\n                    v: 0,\n                };\n        _this.receipt = params && params.receipt ? params.receipt : undefined;\n        _this.cxStatus = _this.isCrossShard() ? types_1.TxStatus.INTIALIZED : types_1.TxStatus.NONE;\n        return _this;\n    }\n    /**\n     *\n     * @example\n     * ```javascript\n     * const unsigned = txn.getRLPUnsigned(txn);\n     * console.log(unsigned);\n     * ```\n     */\n    Transaction.prototype.getRLPUnsigned = function () {\n        var _this = this;\n        var raw = [];\n        // temp setting to be compatible with eth\n        var fields = this.messenger.chainType === utils_1.ChainType.Harmony ? utils_2.transactionFields : utils_2.transactionFieldsETH;\n        fields.forEach(function (field) {\n            var value = _this.txParams[field.name] || [];\n            value = crypto_1.arrayify(crypto_1.hexlify(field.transform === 'hex' ? utils_1.add0xToString(value.toString(16)) : value));\n            // Fixed-width field\n            if (field.fix === true && field.length && value.length !== field.length && value.length > 0) {\n                throw new Error(\"invalid length for \" + field.name);\n            }\n            // Variable-width (with a maximum)\n            if (field.fix === false && field.length) {\n                value = crypto_1.stripZeros(value);\n                if (value.length > field.length) {\n                    throw new Error(\"invalid length for \" + field.name);\n                }\n            }\n            raw.push(crypto_1.hexlify(value));\n        });\n        if (this.txParams.chainId != null && this.txParams.chainId !== 0) {\n            raw.push(crypto_1.hexlify(this.txParams.chainId));\n            raw.push('0x');\n            raw.push('0x');\n        }\n        return [crypto_1.encode(raw), raw];\n    };\n    Transaction.prototype.getRLPSigned = function (raw, signature) {\n        // temp setting to be compatible with eth\n        var rawLength = this.messenger.chainType === utils_1.ChainType.Harmony ? 11 : 9;\n        var sig = crypto_1.splitSignature(signature);\n        var v = 27 + (sig.recoveryParam || 0);\n        if (raw.length === rawLength) {\n            raw.pop();\n            raw.pop();\n            raw.pop();\n            v += this.chainId * 2 + 8;\n        }\n        raw.push(crypto_1.hexlify(v));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n        return crypto_1.encode(raw);\n    };\n    /**\n     * @example\n     * ```javascript\n     * console.log(txn.getRawTransaction());\n     * ```\n     */\n    Transaction.prototype.getRawTransaction = function () {\n        return this.rawTransaction;\n    };\n    /** @hidden */\n    Transaction.prototype.recover = function (rawTransaction) {\n        // temp setting to be compatible with eth\n        var recovered = this.messenger.chainType === utils_1.ChainType.Harmony\n            ? utils_2.recover(rawTransaction)\n            : utils_2.recoverETH(rawTransaction);\n        this.setParams(recovered);\n        return this;\n    };\n    Object.defineProperty(Transaction.prototype, \"txPayload\", {\n        /**\n         * get the payload of transaction\n         *\n         * @example\n         * ```\n         * const payload = txn.txPayload;\n         * console.log(payload);\n         * ```\n         */\n        get: function () {\n            return {\n                from: this.txParams.from || '0x',\n                to: this.txParams.to || '0x',\n                shardID: this.txParams.shardID ? utils_1.numberToHex(this.shardID) : '0x',\n                toShardID: this.txParams.toShardID ? utils_1.numberToHex(this.toShardID) : '0x',\n                gas: this.txParams.gasLimit ? utils_1.numberToHex(this.txParams.gasLimit) : '0x',\n                gasPrice: this.txParams.gasPrice ? utils_1.numberToHex(this.txParams.gasPrice) : '0x',\n                value: this.txParams.value ? utils_1.numberToHex(this.txParams.value) : '0x',\n                data: this.txParams.data || '0x',\n                nonce: this.txParams.nonce ? utils_1.numberToHex(this.nonce) : '0x',\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"txParams\", {\n        /**\n         * get transaction params\n         *\n         * @example\n         * ```\n         * const txParams = txn.txParams;\n         * console.log(txParams)\n         * ```\n         */\n        get: function () {\n            return {\n                id: this.id || '0x',\n                from: this.from || '',\n                nonce: this.nonce || 0,\n                gasPrice: this.gasPrice || new utils_1.Unit(0).asWei().toWei(),\n                gasLimit: this.gasLimit || new utils_1.Unit(0).asWei().toWei(),\n                shardID: this.shardID !== undefined ? this.shardID : this.messenger.currentShard,\n                toShardID: this.toShardID !== undefined ? this.toShardID : this.messenger.currentShard,\n                to: Transaction.normalizeAddress(this.to) || '0x',\n                value: this.value || new utils_1.Unit(0).asWei().toWei(),\n                data: this.data || '0x',\n                chainId: this.chainId || 0,\n                rawTransaction: this.rawTransaction || '0x',\n                unsignedRawTransaction: this.unsignedRawTransaction || '0x',\n                signature: this.signature || '0x',\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * set the params to the txn\n     *\n     * @example\n     * ```\n     * txn.setParams({\n     *   to: 'one1ew56rqrucu6p6n598fmjmnfh8dd4xpg6atne9c',\n     *   value: '1200',\n     *   gasLimit: '230000',\n     *   shardID: 1,\n     *   toShardID: 0,\n     *   gasPrice: new hmy.utils.Unit('101').asGwei().toWei(),\n     *   signature: {\n     *     r: '0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c042',\n     *     s: '0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b354',\n     *     v: 0\n     *   },\n     * });\n     * console.log(txn);\n     * ```\n     */\n    Transaction.prototype.setParams = function (params) {\n        this.id = params && params.id ? params.id : '0x';\n        this.from = params && params.from ? params.from : '0x';\n        this.nonce = params && params.nonce ? params.nonce : 0;\n        this.gasPrice =\n            params && params.gasPrice\n                ? new utils_1.Unit(params.gasPrice).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        this.gasLimit =\n            params && params.gasLimit\n                ? new utils_1.Unit(params.gasLimit).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        this.shardID =\n            params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n        this.toShardID =\n            params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n        this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n        this.value =\n            params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n        this.data = params && params.data ? params.data : '0x';\n        this.chainId = params && params.chainId ? params.chainId : 0;\n        this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n        this.unsignedRawTransaction =\n            params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n        this.signature =\n            params && params.signature\n                ? params.signature\n                : {\n                    r: '',\n                    s: '',\n                    recoveryParam: 0,\n                    v: 0,\n                };\n        if (this.rawTransaction !== '0x') {\n            this.setTxStatus(types_1.TxStatus.SIGNED);\n        }\n        else {\n            this.setTxStatus(types_1.TxStatus.INTIALIZED);\n        }\n    };\n    /** @hidden */\n    Transaction.prototype.map = function (fn) {\n        var newParams = fn(this.txParams);\n        this.setParams(newParams);\n        return this;\n    };\n    /**\n     * Check whether the transaction is cross shard\n     *\n     * @example\n     * ```javascript\n     * console.log(txn.isCrossShard());\n     * ```\n     */\n    Transaction.prototype.isCrossShard = function () {\n        return new crypto_1.BN(this.txParams.shardID).toString() !== new crypto_1.BN(this.txParams.toShardID).toString();\n    };\n    /**\n     *\n     * @example\n     * ```\n     * txn.sendTransaction().then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Transaction.prototype.sendTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n                            throw new Error('Transaction not signed');\n                        }\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.SendRawTransaction, this.rawTransaction, this.messenger.chainType, typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID)];\n                    case 1:\n                        res = _a.sent();\n                        // temporarilly hard coded\n                        if (res.isResult()) {\n                            this.id = res.result;\n                            this.emitTransactionHash(this.id);\n                            this.setTxStatus(types_1.TxStatus.PENDING);\n                            // await this.confirm(this.id, 20, 1000);\n                            return [2 /*return*/, [this, res.result]];\n                        }\n                        else if (res.isError()) {\n                            this.emitConfirm(\"transaction failed:\" + res.error.message);\n                            this.setTxStatus(types_1.TxStatus.REJECTED);\n                            return [2 /*return*/, [this, \"transaction failed:\" + res.error.message]];\n                        }\n                        else {\n                            this.emitError('transaction failed');\n                            throw new Error('transaction failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Transaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        if (shardID === void 0) { shardID = this.txParams.shardID; }\n        if (toShardID === void 0) { toShardID = this.txParams.toShardID; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var txConfirmed, cxConfirmed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.txConfirm(txHash, maxAttempts, interval, shardID)];\n                    case 1:\n                        txConfirmed = _a.sent();\n                        if (!this.isCrossShard()) {\n                            return [2 /*return*/, txConfirmed];\n                        }\n                        if (!txConfirmed.isConfirmed()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n                    case 2:\n                        cxConfirmed = _a.sent();\n                        return [2 /*return*/, cxConfirmed];\n                    case 3: return [2 /*return*/, txConfirmed];\n                }\n            });\n        });\n    };\n    return Transaction;\n}(transactionBase_1.TransactionBase));\nexports.Transaction = Transaction;\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}