{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bnToString = exports.flattenTypes = exports.jsonInterfaceMethodToString = void 0;\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nexports.jsonInterfaceMethodToString = function (json) {\n  if (utils_1.isObject(json) && json.name && json.name.includes('(')) {\n    return json.name;\n  }\n\n  return json.name + \"(\" + exports.flattenTypes(false, json.inputs).join(',') + \")\";\n};\n\nexports.flattenTypes = function (includeTuple, puts) {\n  // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n  var types = [];\n  puts.forEach(function (param) {\n    if (typeof param.components === 'object') {\n      if (param.type.substring(0, 5) !== 'tuple') {\n        throw new Error('components found but type is not tuple; report on GitHub');\n      }\n\n      var suffix = '';\n      var arrayBracket = param.type.indexOf('[');\n\n      if (arrayBracket >= 0) {\n        suffix = param.type.substring(arrayBracket);\n      }\n\n      var result = exports.flattenTypes(includeTuple, param.components); // console.log(\"result should have things: \" + result)\n\n      if (utils_1.isArray(result) && includeTuple) {\n        // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n        types.push(\"tuple(\" + result.join(',') + \")\" + suffix);\n      } else if (!includeTuple) {\n        // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n        types.push(\"(\" + result.join(',') + \")\" + suffix);\n      } else {\n        // console.log(\"its a single type within a tuple: \" + result.types)\n        types.push(\"(\" + result + \")\");\n      }\n    } else {\n      // console.log(\"its a type and not directly in a tuple: \" + param.type)\n      types.push(param.type);\n    }\n  });\n  return types;\n};\n\nfunction bnToString(result) {\n  if (crypto_1.BN.isBN(result)) {\n    return result.toString();\n  } else {\n    return result;\n  }\n}\n\nexports.bnToString = bnToString;","map":{"version":3,"sources":["../../src/abi/utils.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;;AAEH,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEa,OAAA,CAAA,2BAAA,GAA8B,UAAC,IAAD,EAAU;AACnD,MAAI,OAAA,CAAA,QAAA,CAAS,IAAT,KAAkB,IAAI,CAAC,IAAvB,IAA+B,IAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,GAAnB,CAAnC,EAA4D;AAC1D,WAAO,IAAI,CAAC,IAAZ;AACD;;AAED,SAAU,IAAI,CAAC,IAAL,GAAS,GAAT,GAAa,OAAA,CAAA,YAAA,CAAa,KAAb,EAAoB,IAAI,CAAC,MAAzB,EAAiC,IAAjC,CAAsC,GAAtC,CAAb,GAAuD,GAAjE;AACD,CANY;;AAQA,OAAA,CAAA,YAAA,GAAe,UAAC,YAAD,EAAoB,IAApB,EAA+B;AACzD;AACA,MAAM,KAAK,GAAU,EAArB;AAEA,EAAA,IAAI,CAAC,OAAL,CAAa,UAAC,KAAD,EAAW;AACtB,QAAI,OAAO,KAAK,CAAC,UAAb,KAA4B,QAAhC,EAA0C;AACxC,UAAI,KAAK,CAAC,IAAN,CAAW,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,OAAnC,EAA4C;AAC1C,cAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACD,UAAI,MAAM,GAAG,EAAb;AACA,UAAM,YAAY,GAAG,KAAK,CAAC,IAAN,CAAW,OAAX,CAAmB,GAAnB,CAArB;;AACA,UAAI,YAAY,IAAI,CAApB,EAAuB;AACrB,QAAA,MAAM,GAAG,KAAK,CAAC,IAAN,CAAW,SAAX,CAAqB,YAArB,CAAT;AACD;;AACD,UAAM,MAAM,GAAG,OAAA,CAAA,YAAA,CAAa,YAAb,EAA2B,KAAK,CAAC,UAAjC,CAAf,CATwC,CAUxC;;AACA,UAAI,OAAA,CAAA,OAAA,CAAQ,MAAR,KAAmB,YAAvB,EAAqC;AACnC;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,WAAS,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAT,GAAyB,GAAzB,GAA6B,MAAxC;AACD,OAHD,MAGO,IAAI,CAAC,YAAL,EAAmB;AACxB;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,MAAI,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAJ,GAAoB,GAApB,GAAwB,MAAnC;AACD,OAHM,MAGA;AACL;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,MAAI,MAAJ,GAAU,GAArB;AACD;AACF,KArBD,MAqBO;AACL;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,IAAjB;AACD;AACF,GA1BD;AA4BA,SAAO,KAAP;AACD,CAjCY;;AAmCb,SAAgB,UAAhB,CAA2B,MAA3B,EAAsC;AACpC,MAAI,QAAA,CAAA,EAAA,CAAG,IAAH,CAAQ,MAAR,CAAJ,EAAqB;AACnB,WAAO,MAAM,CAAC,QAAP,EAAP;AACD,GAFD,MAEO;AACL,WAAO,MAAP;AACD;AACF;;AAND,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bnToString = exports.flattenTypes = exports.jsonInterfaceMethodToString = void 0;\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nexports.jsonInterfaceMethodToString = function (json) {\n    if (utils_1.isObject(json) && json.name && json.name.includes('(')) {\n        return json.name;\n    }\n    return json.name + \"(\" + exports.flattenTypes(false, json.inputs).join(',') + \")\";\n};\nexports.flattenTypes = function (includeTuple, puts) {\n    // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n    var types = [];\n    puts.forEach(function (param) {\n        if (typeof param.components === 'object') {\n            if (param.type.substring(0, 5) !== 'tuple') {\n                throw new Error('components found but type is not tuple; report on GitHub');\n            }\n            var suffix = '';\n            var arrayBracket = param.type.indexOf('[');\n            if (arrayBracket >= 0) {\n                suffix = param.type.substring(arrayBracket);\n            }\n            var result = exports.flattenTypes(includeTuple, param.components);\n            // console.log(\"result should have things: \" + result)\n            if (utils_1.isArray(result) && includeTuple) {\n                // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n                types.push(\"tuple(\" + result.join(',') + \")\" + suffix);\n            }\n            else if (!includeTuple) {\n                // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n                types.push(\"(\" + result.join(',') + \")\" + suffix);\n            }\n            else {\n                // console.log(\"its a single type within a tuple: \" + result.types)\n                types.push(\"(\" + result + \")\");\n            }\n        }\n        else {\n            // console.log(\"its a type and not directly in a tuple: \" + param.type)\n            types.push(param.type);\n        }\n    });\n    return types;\n};\nfunction bnToString(result) {\n    if (crypto_1.BN.isBN(result)) {\n        return result.toString();\n    }\n    else {\n        return result;\n    }\n}\nexports.bnToString = bnToString;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}