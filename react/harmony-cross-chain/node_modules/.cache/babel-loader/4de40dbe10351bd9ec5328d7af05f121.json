{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n * @ignore\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keccak256 = void 0;\n\nvar tslib_1 = require(\"tslib\"); // this file is ported from 'ether.js' and done some fixes\n\n\nvar sha3 = tslib_1.__importStar(require(\"js-sha3\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nfunction keccak256(data) {\n  var arrayified = bytes_1.arrayify(data);\n\n  if (arrayified) {\n    return '0x' + sha3.keccak_256(arrayified);\n  }\n\n  throw new Error('arrayify failed');\n}\n\nexports.keccak256 = keccak256; // export function sha3_256(data: Arrayish): string {\n//   const arrayified = arrayify(data);\n//   if (arrayified) {\n//     return '0x' + sha3.sha3_256(arrayified);\n//   }\n//   throw new Error('arrayify failed');\n// }","map":{"version":3,"sources":["../src/keccak256.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;;gCAEH;;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,SAAgB,SAAhB,CAA0B,IAA1B,EAAwC;AACtC,MAAM,UAAU,GAAG,OAAA,CAAA,QAAA,CAAS,IAAT,CAAnB;;AACA,MAAI,UAAJ,EAAgB;AACd,WAAO,OAAO,IAAI,CAAC,UAAL,CAAgB,UAAhB,CAAd;AACD;;AACD,QAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAND,OAAA,CAAA,SAAA,GAAA,SAAA,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n * @ignore\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak256 = void 0;\nvar tslib_1 = require(\"tslib\");\n// this file is ported from 'ether.js' and done some fixes\nvar sha3 = tslib_1.__importStar(require(\"js-sha3\"));\nvar bytes_1 = require(\"./bytes\");\nfunction keccak256(data) {\n    var arrayified = bytes_1.arrayify(data);\n    if (arrayified) {\n        return '0x' + sha3.keccak_256(arrayified);\n    }\n    throw new Error('arrayify failed');\n}\nexports.keccak256 = keccak256;\n// export function sha3_256(data: Arrayish): string {\n//   const arrayified = arrayify(data);\n//   if (arrayified) {\n//     return '0x' + sha3.sha3_256(arrayified);\n//   }\n//   throw new Error('arrayify failed');\n// }\n//# sourceMappingURL=keccak256.js.map"]},"metadata":{},"sourceType":"script"}