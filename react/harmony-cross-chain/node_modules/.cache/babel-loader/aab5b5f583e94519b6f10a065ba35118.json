{"ast":null,"code":"\"use strict\";\n/**\n * # @harmony-js/staking\n\nThis package provides a collection of apis to create, sign/send staking transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install @harmony-js/staking\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\nBelow, examples show how to send delegate, undelegate, and collect rewards staking transactions. First, set the chainId, gasLimit, gasPrice for all subsequent staking transactions\n```javascript\n* hmy.stakings.setTxParams({\n*   gasLimit: 25000,\n*   gasPrice: numberToHex(new hmy.utils.Unit('1').asGwei().toWei()),\n*   chainId: 2\n* });\n```\n<span style=\"color:red\">Note: create and edit validator transactions are not fully supported in the sdk</span>\n\nCreate delegate staking transaction\n```javascript\n* const delegate = hmy.stakings.delegate({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'one1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asOne().toWei())\n* });\n* const delegateStakingTx = delegate.build();\n```\n\nSign and send the delegate transaction and receive confirmation\n```javascript\n* // key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signStaking(delegateStakingTx).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log(hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nSimilarily, undelegate and collect reward transactions can be composed, signed and sent\nCreate undelegate staking transaction\n```javascript\n* const undelegate = hmy.stakings.undelegate({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'one1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asOne().toWei())\n* });\n* const undelegateStakingTx = undelegate.build();\n```\n\nCreate collect rewards staking transaction\n```javascript\n* const collectRewards = hmy.stakings.collectRewards({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n* });\n* const collectRewardsStakingTx = collectRewards.build();\n```\n\nAlso, similar to normal transaction, signing and sending can be performed asynchronously.\n * @packageDocumentation\n * @module harmony-staking\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectRewards = exports.Undelegate = exports.Delegate = exports.EditValidator = exports.CreateValidator = exports.CommissionRate = exports.Decimal = exports.Description = exports.StakingTransaction = exports.Directive = exports.StakingSettings = void 0;\n\nvar tslib_1 = require(\"tslib\"); // tslint:disable: max-classes-per-file\n\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar transaction_1 = require(\"@harmony-js/transaction\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar text_encoding_1 = require(\"text-encoding\");\n/** @hidden */\n\n\nvar StakingSettings = function () {\n  function StakingSettings() {}\n\n  StakingSettings.PRECISION = 18;\n  StakingSettings.MAX_DECIMAL = 1000000000000000000;\n  return StakingSettings;\n}();\n\nexports.StakingSettings = StakingSettings;\n/** @hidden */\n\nvar Directive;\n\n(function (Directive) {\n  Directive[Directive[\"DirectiveCreateValidator\"] = 0] = \"DirectiveCreateValidator\";\n  Directive[Directive[\"DirectiveEditValidator\"] = 1] = \"DirectiveEditValidator\";\n  Directive[Directive[\"DirectiveDelegate\"] = 2] = \"DirectiveDelegate\";\n  Directive[Directive[\"DirectiveUndelegate\"] = 3] = \"DirectiveUndelegate\";\n  Directive[Directive[\"DirectiveCollectRewards\"] = 4] = \"DirectiveCollectRewards\";\n})(Directive = exports.Directive || (exports.Directive = {}));\n\nvar StakingTransaction = function (_super) {\n  tslib_1.__extends(StakingTransaction, _super);\n\n  function StakingTransaction(directive, stakeMsg, nonce, gasPrice, gasLimit, chainID, messenger, txStatus) {\n    if (messenger === void 0) {\n      messenger = transaction_1.defaultMessenger;\n    }\n\n    if (txStatus === void 0) {\n      txStatus = transaction_1.TxStatus.INTIALIZED;\n    }\n\n    var _this = _super.call(this, messenger, txStatus) || this;\n\n    _this.directive = directive;\n    _this.stakeMsg = stakeMsg;\n    _this.nonce = nonce;\n    _this.gasLimit = gasLimit;\n    _this.gasPrice = gasPrice;\n    _this.rawTransaction = '0x';\n    _this.unsignedRawTransaction = '0x';\n    _this.signature = {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0\n    };\n    _this.chainId = chainID;\n    _this.from = '0x';\n    return _this;\n  }\n\n  StakingTransaction.prototype.encode = function () {\n    var raw = []; // TODO: temporary hack for converting 0x00 to 0x\n\n    if (!this.directive) {\n      raw.push('0x');\n    } else {\n      raw.push(crypto_1.hexlify(this.directive));\n    }\n\n    raw.push(this.stakeMsg.encode());\n\n    if (!this.nonce) {\n      raw.push('0x');\n    } else {\n      raw.push(crypto_1.hexlify(this.nonce));\n    }\n\n    raw.push(crypto_1.hexlify(this.gasPrice));\n    raw.push(crypto_1.hexlify(this.gasLimit));\n\n    if (this.chainId != null && this.chainId !== 0) {\n      raw.push(crypto_1.hexlify(this.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n\n    return [crypto_1.encode(raw), raw];\n  };\n\n  StakingTransaction.prototype.rlpSign = function (prv) {\n    var _a = tslib_1.__read(this.encode(), 2),\n        unsignedRawTransaction = _a[0],\n        raw = _a[1];\n\n    this.setUnsigned(unsignedRawTransaction);\n    var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n    var signed = this.getRLPSigned(raw, signature);\n    return [signature, signed];\n  };\n\n  StakingTransaction.prototype.getRLPSigned = function (raw, signature) {\n    var sig = crypto_1.splitSignature(signature);\n    var v = 27 + (sig.recoveryParam || 0);\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += this.chainId * 2 + 8;\n    raw.push(crypto_1.hexlify(v));\n    raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n    raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n    return crypto_1.encode(raw);\n  };\n\n  StakingTransaction.prototype.sendTransaction = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var res;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n              throw new Error('Transaction not signed');\n            }\n\n            if (!this.messenger) {\n              throw new Error('Messenger not found');\n            }\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.SendRawStakingTransaction, this.rawTransaction, this.messenger.chainType, this.messenger.currentShard)];\n\n          case 1:\n            res = _a.sent();\n\n            if (res.isResult()) {\n              this.id = res.result;\n              this.emitTransactionHash(this.id);\n              this.setTxStatus(transaction_1.TxStatus.PENDING);\n              return [2\n              /*return*/\n              , [this, res.result]];\n            } else if (res.isError()) {\n              this.emitConfirm(\"transaction failed:\" + res.error.message);\n              this.setTxStatus(transaction_1.TxStatus.REJECTED);\n              return [2\n              /*return*/\n              , [this, \"transaction failed:\" + res.error.message]];\n            } else {\n              this.emitError('transaction failed');\n              throw new Error('transaction failed');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StakingTransaction.prototype.setUnsigned = function (unSigned) {\n    this.unsignedRawTransaction = unSigned;\n  };\n\n  StakingTransaction.prototype.setRawTransaction = function (rawTransaction) {\n    this.rawTransaction = rawTransaction;\n  };\n\n  StakingTransaction.prototype.setSignature = function (signature) {\n    this.signature = {\n      r: signature.r,\n      s: signature.s,\n      v: signature.v,\n      recoveryParam: signature.recoveryParam\n    };\n  };\n\n  StakingTransaction.prototype.setNonce = function (nonce) {\n    this.nonce = nonce;\n  };\n\n  StakingTransaction.prototype.setFromAddress = function (address) {\n    this.from = address;\n  };\n\n  StakingTransaction.prototype.getUnsignedRawTransaction = function () {\n    return this.unsignedRawTransaction;\n  };\n\n  StakingTransaction.prototype.getRawTransaction = function () {\n    return this.rawTransaction;\n  };\n\n  StakingTransaction.prototype.getSignature = function () {\n    return this.signature;\n  };\n\n  StakingTransaction.prototype.getFromAddress = function () {\n    return this.from;\n  };\n\n  StakingTransaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    if (interval === void 0) {\n      interval = 1000;\n    }\n\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    if (toShardID === void 0) {\n      toShardID = 0;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var txConfirmed, cxConfirmed;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.txConfirm(txHash, maxAttempts, interval, shardID)];\n\n          case 1:\n            txConfirmed = _a.sent();\n\n            if (shardID === toShardID) {\n              return [2\n              /*return*/\n              , txConfirmed];\n            }\n\n            if (!txConfirmed.isConfirmed()) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n\n          case 2:\n            cxConfirmed = _a.sent();\n            return [2\n            /*return*/\n            , cxConfirmed];\n\n          case 3:\n            return [2\n            /*return*/\n            , txConfirmed];\n        }\n      });\n    });\n  };\n\n  return StakingTransaction;\n}(transaction_1.TransactionBase);\n\nexports.StakingTransaction = StakingTransaction;\n/** @hidden */\n\nvar Description = function () {\n  function Description(name, identity, website, securityContact, details) {\n    this.name = name;\n    this.identity = identity;\n    this.website = website;\n    this.securityContact = securityContact;\n    this.details = details;\n  }\n\n  Description.prototype.encode = function () {\n    var raw = [];\n    var enc = new text_encoding_1.TextEncoder();\n    raw.push(enc.encode(this.name));\n    raw.push(enc.encode(this.identity));\n    raw.push(enc.encode(this.website));\n    raw.push(enc.encode(this.securityContact));\n    raw.push(enc.encode(this.details));\n    return raw;\n  };\n\n  return Description;\n}();\n\nexports.Description = Description;\n/** @hidden */\n\nvar Decimal = function () {\n  function Decimal(value) {\n    if (value.length === 0) {\n      throw new Error(\"decimal string is empty\");\n    }\n\n    var value1 = value;\n\n    if (value[0] === '-') {\n      throw new Error(\"decimal fraction should be be between [0, 1]\");\n    }\n\n    if (value[0] === '+') {\n      value1 = value.substr(1);\n    }\n\n    if (value1.length === 0) {\n      throw new Error(\"decimal string is empty\");\n    }\n\n    var spaced = value1.split(' ');\n\n    if (spaced.length > 1) {\n      throw new Error(\"bad decimal string\");\n    }\n\n    var splitted = value1.split('.');\n    var len = 0;\n    var combinedStr = splitted[0];\n\n    if (splitted.length === 2) {\n      len = splitted[1].length;\n\n      if (len === 0 || combinedStr.length === 0) {\n        throw new Error(\"bad decimal length\");\n      }\n\n      if (splitted[1][0] === '-') {\n        throw new Error(\"bad decimal string\");\n      }\n\n      combinedStr += splitted[1];\n    } else if (splitted.length > 2) {\n      throw new Error(\"too many periods to be a decimal string\");\n    }\n\n    if (len > StakingSettings.PRECISION) {\n      throw new Error(\"too much precision: precision should be less than \" + StakingSettings.PRECISION);\n    }\n\n    var zerosToAdd = StakingSettings.PRECISION - len;\n    combinedStr += '0'.repeat(zerosToAdd);\n    combinedStr = combinedStr.replace(/^0+/, '');\n    var val = new utils_1.Unit(combinedStr).asWei().toWei();\n\n    if (val.gt(new utils_1.Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n      throw new Error(\"too large decimal fraction\");\n    }\n\n    this.value = val;\n  }\n\n  Decimal.prototype.encode = function () {\n    var raw = [];\n    raw.push(utils_1.numberToHex(this.value));\n    return raw;\n  };\n\n  return Decimal;\n}();\n\nexports.Decimal = Decimal;\n/** @hidden */\n\nvar CommissionRate = function () {\n  function CommissionRate(rate, maxRate, maxChangeRate) {\n    this.rate = rate;\n    this.maxRate = maxRate;\n    this.maxChangeRate = maxChangeRate;\n  }\n\n  CommissionRate.prototype.encode = function () {\n    var raw = [];\n    raw.push(this.rate.encode());\n    raw.push(this.maxRate.encode());\n    raw.push(this.maxChangeRate.encode());\n    return raw;\n  };\n\n  return CommissionRate;\n}();\n\nexports.CommissionRate = CommissionRate;\n\nvar CreateValidator = function () {\n  function CreateValidator(validatorAddress, description, commissionRates, minSelfDelegation, maxTotalDelegation, slotPubKeys, amount) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRates = commissionRates;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotPubKeys = slotPubKeys;\n    this.amount = amount;\n  }\n\n  CreateValidator.prototype.encode = function () {\n    var raw = [];\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRates.encode());\n    raw.push(crypto_1.hexlify(this.minSelfDelegation));\n    raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n    raw.push(this.encodeArr());\n    raw.push(crypto_1.hexlify(this.amount));\n    return raw;\n  };\n\n  CreateValidator.prototype.encodeArr = function () {\n    var raw = [];\n    this.slotPubKeys.forEach(function (pubKey) {\n      raw.push(pubKey);\n    });\n    return raw;\n  };\n\n  return CreateValidator;\n}();\n\nexports.CreateValidator = CreateValidator;\n\nvar EditValidator = function () {\n  function EditValidator(validatorAddress, description, commissionRate, minSelfDelegation, maxTotalDelegation, slotKeyToRemove, slotKeyToAdd) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRate = commissionRate;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotKeyToRemove = slotKeyToRemove;\n    this.slotKeyToAdd = slotKeyToAdd;\n  }\n\n  EditValidator.prototype.encode = function () {\n    var raw = [];\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRate.encode());\n    raw.push(crypto_1.hexlify(this.minSelfDelegation));\n    raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n    raw.push(this.slotKeyToRemove);\n    raw.push(this.slotKeyToAdd);\n    return raw;\n  };\n\n  return EditValidator;\n}();\n\nexports.EditValidator = EditValidator;\n\nvar Delegate = function () {\n  function Delegate(delegatorAddress, validatorAddress, amount) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n\n  Delegate.prototype.encode = function () {\n    var raw = [];\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(crypto_1.hexlify(this.amount));\n    return raw;\n  };\n\n  return Delegate;\n}();\n\nexports.Delegate = Delegate;\n\nvar Undelegate = function () {\n  function Undelegate(delegatorAddress, validatorAddress, amount) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n\n  Undelegate.prototype.encode = function () {\n    var raw = [];\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(crypto_1.hexlify(this.amount));\n    return raw;\n  };\n\n  return Undelegate;\n}();\n\nexports.Undelegate = Undelegate;\n\nvar CollectRewards = function () {\n  function CollectRewards(delegatorAddress) {\n    this.delegatorAddress = delegatorAddress;\n  }\n\n  CollectRewards.prototype.encode = function () {\n    var raw = [];\n    raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n    return raw;\n  };\n\n  return CollectRewards;\n}();\n\nexports.CollectRewards = CollectRewards;","map":{"version":3,"sources":["../src/stakingTransaction.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FG;;;;;;;gCAEH;;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAWA,IAAA,SAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA;;;AACA,IAAA,eAAA,GAAA,YAAA;AAAA,WAAA,eAAA,GAAA,CAGC;;AAFe,EAAA,eAAA,CAAA,SAAA,GAAY,EAAZ;AACA,EAAA,eAAA,CAAA,WAAA,GAAc,mBAAd;AAChB,SAAA,eAAA;AAAC,CAHD,EAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA;AAKb;;AACA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACnB,EAAA,SAAA,CAAA,SAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,0BAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,yBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,yBAAA;AACD,CAND,EAAY,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;;AAQA,IAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAA,MAAA;;AAYtC,WAAA,kBAAA,CACE,SADF,EAEE,QAFF,EAGE,KAHF,EAIE,QAJF,EAKE,QALF,EAME,OANF,EAOE,SAPF,EAQE,QARF,EAQgC;AAD9B,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAuB,aAAA,CAAA,gBAAvB;AAAuC;;AACvC,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAW,aAAA,CAAA,QAAA,CAAS,UAApB;AAA8B;;AARhC,QAAA,KAAA,GAUE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,QAAjB,KAA0B,IAV5B;;AAYE,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;AACA,IAAA,KAAI,CAAC,sBAAL,GAA8B,IAA9B;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB;AACf,MAAA,CAAC,EAAE,EADY;AAEf,MAAA,CAAC,EAAE,EAFY;AAGf,MAAA,aAAa,EAAE,CAHA;AAIf,MAAA,CAAC,EAAE;AAJY,KAAjB;AAMA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;;AACD;;AAED,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA4D,EAArE,CADF,CAEE;;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,SAAb,CAAT;AACD;;AACD,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,QAAL,CAAc,MAAd,EAAT;;AACA,QAAI,CAAC,KAAK,KAAV,EAAiB;AACf,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,KAAb,CAAT;AACD;;AACD,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,QAAb,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,QAAb,CAAT;;AACA,QAAI,KAAK,OAAL,IAAgB,IAAhB,IAAwB,KAAK,OAAL,KAAiB,CAA7C,EAAgD;AAC9C,MAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,OAAb,CAAT;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACD;;AACD,WAAO,CAAC,QAAA,CAAA,MAAA,CAAO,GAAP,CAAD,EAAc,GAAd,CAAP;AACD,GAtBD;;AAwBA,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,GAAR,EAAmB;AACX,QAAA,EAAA,GAAA,OAAA,CAAA,MAAA,CAAgC,KAAK,MAAL,EAAhC,EAA6C,CAA7C,CAAA;AAAA,QAAC,sBAAsB,GAAA,EAAA,CAAA,CAAA,CAAvB;AAAA,QAAyB,GAAG,GAAA,EAAA,CAAA,CAAA,CAA5B;;AACN,SAAK,WAAL,CAAiB,sBAAjB;AACA,QAAM,SAAS,GAAG,QAAA,CAAA,IAAA,CAAK,QAAA,CAAA,SAAA,CAAU,sBAAV,CAAL,EAAwC,GAAxC,CAAlB;AACA,QAAM,MAAM,GAAG,KAAK,YAAL,CAAkB,GAAlB,EAAuB,SAAvB,CAAf;AACA,WAAO,CAAC,SAAD,EAAY,MAAZ,CAAP;AACD,GAND;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,GAAb,EAAyB,SAAzB,EAA6C;AAC3C,QAAM,GAAG,GAAG,QAAA,CAAA,cAAA,CAAe,SAAf,CAAZ;AACA,QAAI,CAAC,GAAG,MAAM,GAAG,CAAC,aAAJ,IAAqB,CAA3B,CAAR;AACA,IAAA,GAAG,CAAC,GAAJ;AACA,IAAA,GAAG,CAAC,GAAJ;AACA,IAAA,GAAG,CAAC,GAAJ;AACA,IAAA,CAAC,IAAI,KAAK,OAAL,GAAe,CAAf,GAAmB,CAAxB;AAEA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,UAAA,CAAW,QAAA,CAAA,QAAA,CAAS,GAAG,CAAC,CAAb,KAAmB,EAA9B,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,UAAA,CAAW,QAAA,CAAA,QAAA,CAAS,GAAG,CAAC,CAAb,KAAmB,EAA9B,CAAT;AAEA,WAAO,QAAA,CAAA,MAAA,CAAO,GAAP,CAAP;AACD,GAbD;;AAea,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAb,YAAA;;;;;;AACE,gBAAI,KAAK,cAAL,KAAwB,IAAxB,IAAgC,KAAK,cAAL,KAAwB,SAA5D,EAAuE;AACrE,oBAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,gBAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,oBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEW,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,IAAf,CAChB,SAAA,CAAA,SAAA,CAAU,yBADM,EAEhB,KAAK,cAFW,EAGhB,KAAK,SAAL,CAAe,SAHC,EAIhB,KAAK,SAAL,CAAe,YAJC,CAAN,CAAA;;;AAAN,YAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;;AAQN,gBAAI,GAAG,CAAC,QAAJ,EAAJ,EAAoB;AAClB,mBAAK,EAAL,GAAU,GAAG,CAAC,MAAd;AACA,mBAAK,mBAAL,CAAyB,KAAK,EAA9B;AACA,mBAAK,WAAL,CAAiB,aAAA,CAAA,QAAA,CAAS,OAA1B;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,CAAC,IAAD,EAAO,GAAG,CAAC,MAAX,CAAP,CAAA;AACD,aALD,MAKO,IAAI,GAAG,CAAC,OAAJ,EAAJ,EAAmB;AACxB,mBAAK,WAAL,CAAiB,wBAAsB,GAAG,CAAC,KAAJ,CAAU,OAAjD;AACA,mBAAK,WAAL,CAAiB,aAAA,CAAA,QAAA,CAAS,QAA1B;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,CAAC,IAAD,EAAO,wBAAsB,GAAG,CAAC,KAAJ,CAAU,OAAvC,CAAP,CAAA;AACD,aAJM,MAIA;AACL,mBAAK,SAAL,CAAe,oBAAf;AACA,oBAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;;;;;;;AACF,GA7BY;;AA+Bb,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA4B;AAC1B,SAAK,sBAAL,GAA8B,QAA9B;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,cAAlB,EAAwC;AACtC,SAAK,cAAL,GAAsB,cAAtB;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,SAAb,EAAiC;AAC/B,SAAK,SAAL,GAAiB;AACf,MAAA,CAAC,EAAE,SAAS,CAAC,CADE;AAEf,MAAA,CAAC,EAAE,SAAS,CAAC,CAFE;AAGf,MAAA,CAAC,EAAE,SAAS,CAAC,CAHE;AAIf,MAAA,aAAa,EAAE,SAAS,CAAC;AAJV,KAAjB;AAMD,GAPD;;AAQA,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAsB;AACpB,SAAK,KAAL,GAAa,KAAb;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,OAAf,EAA8B;AAC5B,SAAK,IAAL,GAAY,OAAZ;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,YAAA;AACE,WAAO,KAAK,sBAAZ;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,WAAO,KAAK,cAAZ;AACD,GAFD;;AAGA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAZ;AACD,GAFD;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAZ;AACD,GAFD;;AAGM,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAN,UACE,MADF,EAEE,WAFF,EAGE,QAHF,EAIE,OAJF,EAKE,SALF,EAKgC;AAH9B,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,EAAA;AAAwB;;AACxB,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAAuB;;AACvB,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAA2B,KAAK,SAAL,CAAe,YAA1C;AAAsD;;AACtD,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,CAAA;AAA8B;;;;;;;AAEV,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,MAAf,EAAuB,WAAvB,EAAoC,QAApC,EAA8C,OAA9C,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;AACN,gBAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,qBAAA,CAAA;AAAA;AAAA,gBAAO,WAAP,CAAA;AACD;;iBACG,WAAW,CAAC,WAAZ,E,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACkB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,MAAf,EAAuB,WAAvB,EAAoC,QAApC,EAA8C,SAA9C,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,WAAP,CAAA;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,WAAP,CAAA;;;;AAEH,GAjBK;;AAkBR,SAAA,kBAAA;AAAC,CA1KD,CAAwC,aAAA,CAAA,eAAxC,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA;AA4Kb;;AACA,IAAA,WAAA,GAAA,YAAA;AAOE,WAAA,WAAA,CACE,IADF,EAEE,QAFF,EAGE,OAHF,EAIE,eAJF,EAKE,OALF,EAKiB;AAEf,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA+B,EAAxC;AACA,QAAM,GAAG,GAAG,IAAI,eAAA,CAAA,WAAJ,EAAZ;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAJ,CAAW,KAAK,IAAhB,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAJ,CAAW,KAAK,QAAhB,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAJ,CAAW,KAAK,OAAhB,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAJ,CAAW,KAAK,eAAhB,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAJ,CAAW,KAAK,OAAhB,CAAT;AACA,WAAO,GAAP;AACD,GATD;;AAUF,SAAA,WAAA;AAAC,CA/BD,EAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA;AAiCb;;AACA,IAAA,OAAA,GAAA,YAAA;AAGE,WAAA,OAAA,CAAY,KAAZ,EAAyB;AACvB,QAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAI,MAAM,GAAG,KAAb;;AACA,QAAI,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,QAAI,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpB,MAAA,MAAM,GAAG,KAAK,CAAC,MAAN,CAAa,CAAb,CAAT;AACD;;AACD,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,GAAb,CAAf;;AACA,QAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,QAAM,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,GAAb,CAAjB;AACA,QAAI,GAAG,GAAG,CAAV;AACA,QAAI,WAAW,GAAG,QAAQ,CAAC,CAAD,CAA1B;;AACA,QAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,MAAA,GAAG,GAAG,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAlB;;AACA,UAAI,GAAG,KAAK,CAAR,IAAa,WAAW,CAAC,MAAZ,KAAuB,CAAxC,EAA2C;AACzC,cAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,UAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,MAAA,WAAW,IAAI,QAAQ,CAAC,CAAD,CAAvB;AACD,KATD,MASO,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AAC9B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,QAAI,GAAG,GAAG,eAAe,CAAC,SAA1B,EAAqC;AACnC,YAAM,IAAI,KAAJ,CACJ,uDAAqD,eAAe,CAAC,SADjE,CAAN;AAGD;;AACD,QAAM,UAAU,GAAG,eAAe,CAAC,SAAhB,GAA4B,GAA/C;AACA,IAAA,WAAW,IAAI,IAAI,MAAJ,CAAW,UAAX,CAAf;AACA,IAAA,WAAW,GAAG,WAAW,CAAC,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;AACA,QAAM,GAAG,GAAG,IAAI,OAAA,CAAA,IAAJ,CAAS,WAAT,EAAsB,KAAtB,GAA8B,KAA9B,EAAZ;;AACA,QAAI,GAAG,CAAC,EAAJ,CAAO,IAAI,OAAA,CAAA,IAAJ,CAAS,eAAe,CAAC,WAAhB,CAA4B,QAA5B,EAAT,EAAiD,KAAjD,GAAyD,KAAzD,EAAP,CAAJ,EAA8E;AAC5E,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,SAAK,KAAL,GAAa,GAAb;AACD;;AAED,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA+B,EAAxC;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,OAAA,CAAA,WAAA,CAAY,KAAK,KAAjB,CAAT;AACA,WAAO,GAAP;AACD,GAJD;;AAKF,SAAA,OAAA;AAAC,CAxDD,EAAA;;AAAa,OAAA,CAAA,OAAA,GAAA,OAAA;AA0Db;;AACA,IAAA,cAAA,GAAA,YAAA;AAIE,WAAA,cAAA,CAAY,IAAZ,EAA2B,OAA3B,EAA6C,aAA7C,EAAmE;AACjE,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,aAAL,GAAqB,aAArB;AACD;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA4D,EAArE;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,IAAL,CAAU,MAAV,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,OAAL,CAAa,MAAb,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,aAAL,CAAmB,MAAnB,EAAT;AACA,WAAO,GAAP;AACD,GAND;;AAOF,SAAA,cAAA;AAAC,CAjBD,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA;;AAmBb,IAAA,eAAA,GAAA,YAAA;AAQE,WAAA,eAAA,CACE,gBADF,EAEE,WAFF,EAGE,eAHF,EAIE,iBAJF,EAKE,kBALF,EAME,WANF,EAOE,MAPF,EAOgB;AAEd,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,kBAAL,GAA0B,kBAA1B;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAED,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA4D,EAArE;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,WAAL,CAAiB,MAAjB,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,eAAL,CAAqB,MAArB,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,iBAAb,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,kBAAb,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,SAAL,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,MAAb,CAAT;AACA,WAAO,GAAP;AACD,GAVD;;AAYA,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA4D,EAArE;AACA,SAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAC,MAAD,EAAO;AAC9B,MAAA,GAAG,CAAC,IAAJ,CAAS,MAAT;AACD,KAFD;AAGA,WAAO,GAAP;AACD,GAND;;AAOF,SAAA,eAAA;AAAC,CA7CD,EAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA;;AA+Cb,IAAA,aAAA,GAAA,YAAA;AAQE,WAAA,aAAA,CACE,gBADF,EAEE,WAFF,EAGE,cAHF,EAIE,iBAJF,EAKE,kBALF,EAME,eANF,EAOE,YAPF,EAOsB;AAEpB,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,kBAAL,GAA0B,kBAA1B;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,YAAL,GAAoB,YAApB;AACD;;AACD,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA4D,EAArE;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,WAAL,CAAiB,MAAjB,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,cAAL,CAAoB,MAApB,EAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,iBAAb,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,kBAAb,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,eAAd;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,YAAd;AACA,WAAO,GAAP;AACD,GAVD;;AAWF,SAAA,aAAA;AAAC,CApCD,EAAA;;AAAa,OAAA,CAAA,aAAA,GAAA,aAAA;;AAsCb,IAAA,QAAA,GAAA,YAAA;AAIE,WAAA,QAAA,CAAY,gBAAZ,EAAsC,gBAAtC,EAAgE,MAAhE,EAA8E;AAC5E,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AACD,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA+B,EAAxC;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,MAAb,CAAT;AACA,WAAO,GAAP;AACD,GAND;;AAOF,SAAA,QAAA;AAAC,CAhBD,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA;;AAkBb,IAAA,UAAA,GAAA,YAAA;AAIE,WAAA,UAAA,CAAY,gBAAZ,EAAsC,gBAAtC,EAAgE,MAAhE,EAA8E;AAC5E,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AACD,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA+B,EAAxC;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,KAAK,MAAb,CAAT;AACA,WAAO,GAAP;AACD,GAND;;AAOF,SAAA,UAAA;AAAC,CAhBD,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA;;AAkBb,IAAA,cAAA,GAAA,YAAA;AAEE,WAAA,cAAA,CAAY,gBAAZ,EAAoC;AAClC,SAAK,gBAAL,GAAwB,gBAAxB;AACD;;AACD,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAA+B,EAAxC;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,QAAA,CAAA,OAAA,CAAQ,aAAA,CAAA,eAAA,CAAgB,gBAAhB,CAAiC,KAAK,gBAAtC,CAAR,CAAT;AACA,WAAO,GAAP;AACD,GAJD;;AAKF,SAAA,cAAA;AAAC,CAVD,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * # @harmony-js/staking\n\nThis package provides a collection of apis to create, sign/send staking transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install @harmony-js/staking\n```\n\n## Usage\n\nCreate a Harmony instance connecting to testnet\n\n```javascript\n* const { Harmony } = require('@harmony-js/core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('@harmony-js/utils');\n\n* const hmy = new Harmony(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Harmony,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\nBelow, examples show how to send delegate, undelegate, and collect rewards staking transactions. First, set the chainId, gasLimit, gasPrice for all subsequent staking transactions\n```javascript\n* hmy.stakings.setTxParams({\n*   gasLimit: 25000,\n*   gasPrice: numberToHex(new hmy.utils.Unit('1').asGwei().toWei()),\n*   chainId: 2\n* });\n```\n<span style=\"color:red\">Note: create and edit validator transactions are not fully supported in the sdk</span>\n\nCreate delegate staking transaction\n```javascript\n* const delegate = hmy.stakings.delegate({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'one1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asOne().toWei())\n* });\n* const delegateStakingTx = delegate.build();\n```\n\nSign and send the delegate transaction and receive confirmation\n```javascript\n* // key corresponds to one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signStaking(delegateStakingTx).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log(hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nSimilarily, undelegate and collect reward transactions can be composed, signed and sent\nCreate undelegate staking transaction\n```javascript\n* const undelegate = hmy.stakings.undelegate({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'one1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asOne().toWei())\n* });\n* const undelegateStakingTx = undelegate.build();\n```\n\nCreate collect rewards staking transaction\n```javascript\n* const collectRewards = hmy.stakings.collectRewards({\n*   delegatorAddress: 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n* });\n* const collectRewardsStakingTx = collectRewards.build();\n```\n\nAlso, similar to normal transaction, signing and sending can be performed asynchronously.\n * @packageDocumentation\n * @module harmony-staking\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectRewards = exports.Undelegate = exports.Delegate = exports.EditValidator = exports.CreateValidator = exports.CommissionRate = exports.Decimal = exports.Description = exports.StakingTransaction = exports.Directive = exports.StakingSettings = void 0;\nvar tslib_1 = require(\"tslib\");\n// tslint:disable: max-classes-per-file\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar text_encoding_1 = require(\"text-encoding\");\n/** @hidden */\nvar StakingSettings = /** @class */ (function () {\n    function StakingSettings() {\n    }\n    StakingSettings.PRECISION = 18;\n    StakingSettings.MAX_DECIMAL = 1000000000000000000;\n    return StakingSettings;\n}());\nexports.StakingSettings = StakingSettings;\n/** @hidden */\nvar Directive;\n(function (Directive) {\n    Directive[Directive[\"DirectiveCreateValidator\"] = 0] = \"DirectiveCreateValidator\";\n    Directive[Directive[\"DirectiveEditValidator\"] = 1] = \"DirectiveEditValidator\";\n    Directive[Directive[\"DirectiveDelegate\"] = 2] = \"DirectiveDelegate\";\n    Directive[Directive[\"DirectiveUndelegate\"] = 3] = \"DirectiveUndelegate\";\n    Directive[Directive[\"DirectiveCollectRewards\"] = 4] = \"DirectiveCollectRewards\";\n})(Directive = exports.Directive || (exports.Directive = {}));\nvar StakingTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(StakingTransaction, _super);\n    function StakingTransaction(directive, stakeMsg, nonce, gasPrice, gasLimit, chainID, messenger, txStatus) {\n        if (messenger === void 0) { messenger = transaction_1.defaultMessenger; }\n        if (txStatus === void 0) { txStatus = transaction_1.TxStatus.INTIALIZED; }\n        var _this = _super.call(this, messenger, txStatus) || this;\n        _this.directive = directive;\n        _this.stakeMsg = stakeMsg;\n        _this.nonce = nonce;\n        _this.gasLimit = gasLimit;\n        _this.gasPrice = gasPrice;\n        _this.rawTransaction = '0x';\n        _this.unsignedRawTransaction = '0x';\n        _this.signature = {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        };\n        _this.chainId = chainID;\n        _this.from = '0x';\n        return _this;\n    }\n    StakingTransaction.prototype.encode = function () {\n        var raw = [];\n        // TODO: temporary hack for converting 0x00 to 0x\n        if (!this.directive) {\n            raw.push('0x');\n        }\n        else {\n            raw.push(crypto_1.hexlify(this.directive));\n        }\n        raw.push(this.stakeMsg.encode());\n        if (!this.nonce) {\n            raw.push('0x');\n        }\n        else {\n            raw.push(crypto_1.hexlify(this.nonce));\n        }\n        raw.push(crypto_1.hexlify(this.gasPrice));\n        raw.push(crypto_1.hexlify(this.gasLimit));\n        if (this.chainId != null && this.chainId !== 0) {\n            raw.push(crypto_1.hexlify(this.chainId));\n            raw.push('0x');\n            raw.push('0x');\n        }\n        return [crypto_1.encode(raw), raw];\n    };\n    StakingTransaction.prototype.rlpSign = function (prv) {\n        var _a = tslib_1.__read(this.encode(), 2), unsignedRawTransaction = _a[0], raw = _a[1];\n        this.setUnsigned(unsignedRawTransaction);\n        var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n        var signed = this.getRLPSigned(raw, signature);\n        return [signature, signed];\n    };\n    StakingTransaction.prototype.getRLPSigned = function (raw, signature) {\n        var sig = crypto_1.splitSignature(signature);\n        var v = 27 + (sig.recoveryParam || 0);\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += this.chainId * 2 + 8;\n        raw.push(crypto_1.hexlify(v));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n        return crypto_1.encode(raw);\n    };\n    StakingTransaction.prototype.sendTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n                            throw new Error('Transaction not signed');\n                        }\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.SendRawStakingTransaction, this.rawTransaction, this.messenger.chainType, this.messenger.currentShard)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.isResult()) {\n                            this.id = res.result;\n                            this.emitTransactionHash(this.id);\n                            this.setTxStatus(transaction_1.TxStatus.PENDING);\n                            return [2 /*return*/, [this, res.result]];\n                        }\n                        else if (res.isError()) {\n                            this.emitConfirm(\"transaction failed:\" + res.error.message);\n                            this.setTxStatus(transaction_1.TxStatus.REJECTED);\n                            return [2 /*return*/, [this, \"transaction failed:\" + res.error.message]];\n                        }\n                        else {\n                            this.emitError('transaction failed');\n                            throw new Error('transaction failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StakingTransaction.prototype.setUnsigned = function (unSigned) {\n        this.unsignedRawTransaction = unSigned;\n    };\n    StakingTransaction.prototype.setRawTransaction = function (rawTransaction) {\n        this.rawTransaction = rawTransaction;\n    };\n    StakingTransaction.prototype.setSignature = function (signature) {\n        this.signature = {\n            r: signature.r,\n            s: signature.s,\n            v: signature.v,\n            recoveryParam: signature.recoveryParam,\n        };\n    };\n    StakingTransaction.prototype.setNonce = function (nonce) {\n        this.nonce = nonce;\n    };\n    StakingTransaction.prototype.setFromAddress = function (address) {\n        this.from = address;\n    };\n    StakingTransaction.prototype.getUnsignedRawTransaction = function () {\n        return this.unsignedRawTransaction;\n    };\n    StakingTransaction.prototype.getRawTransaction = function () {\n        return this.rawTransaction;\n    };\n    StakingTransaction.prototype.getSignature = function () {\n        return this.signature;\n    };\n    StakingTransaction.prototype.getFromAddress = function () {\n        return this.from;\n    };\n    StakingTransaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (toShardID === void 0) { toShardID = 0; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var txConfirmed, cxConfirmed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.txConfirm(txHash, maxAttempts, interval, shardID)];\n                    case 1:\n                        txConfirmed = _a.sent();\n                        if (shardID === toShardID) {\n                            return [2 /*return*/, txConfirmed];\n                        }\n                        if (!txConfirmed.isConfirmed()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n                    case 2:\n                        cxConfirmed = _a.sent();\n                        return [2 /*return*/, cxConfirmed];\n                    case 3: return [2 /*return*/, txConfirmed];\n                }\n            });\n        });\n    };\n    return StakingTransaction;\n}(transaction_1.TransactionBase));\nexports.StakingTransaction = StakingTransaction;\n/** @hidden */\nvar Description = /** @class */ (function () {\n    function Description(name, identity, website, securityContact, details) {\n        this.name = name;\n        this.identity = identity;\n        this.website = website;\n        this.securityContact = securityContact;\n        this.details = details;\n    }\n    Description.prototype.encode = function () {\n        var raw = [];\n        var enc = new text_encoding_1.TextEncoder();\n        raw.push(enc.encode(this.name));\n        raw.push(enc.encode(this.identity));\n        raw.push(enc.encode(this.website));\n        raw.push(enc.encode(this.securityContact));\n        raw.push(enc.encode(this.details));\n        return raw;\n    };\n    return Description;\n}());\nexports.Description = Description;\n/** @hidden */\nvar Decimal = /** @class */ (function () {\n    function Decimal(value) {\n        if (value.length === 0) {\n            throw new Error(\"decimal string is empty\");\n        }\n        var value1 = value;\n        if (value[0] === '-') {\n            throw new Error(\"decimal fraction should be be between [0, 1]\");\n        }\n        if (value[0] === '+') {\n            value1 = value.substr(1);\n        }\n        if (value1.length === 0) {\n            throw new Error(\"decimal string is empty\");\n        }\n        var spaced = value1.split(' ');\n        if (spaced.length > 1) {\n            throw new Error(\"bad decimal string\");\n        }\n        var splitted = value1.split('.');\n        var len = 0;\n        var combinedStr = splitted[0];\n        if (splitted.length === 2) {\n            len = splitted[1].length;\n            if (len === 0 || combinedStr.length === 0) {\n                throw new Error(\"bad decimal length\");\n            }\n            if (splitted[1][0] === '-') {\n                throw new Error(\"bad decimal string\");\n            }\n            combinedStr += splitted[1];\n        }\n        else if (splitted.length > 2) {\n            throw new Error(\"too many periods to be a decimal string\");\n        }\n        if (len > StakingSettings.PRECISION) {\n            throw new Error(\"too much precision: precision should be less than \" + StakingSettings.PRECISION);\n        }\n        var zerosToAdd = StakingSettings.PRECISION - len;\n        combinedStr += '0'.repeat(zerosToAdd);\n        combinedStr = combinedStr.replace(/^0+/, '');\n        var val = new utils_1.Unit(combinedStr).asWei().toWei();\n        if (val.gt(new utils_1.Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n            throw new Error(\"too large decimal fraction\");\n        }\n        this.value = val;\n    }\n    Decimal.prototype.encode = function () {\n        var raw = [];\n        raw.push(utils_1.numberToHex(this.value));\n        return raw;\n    };\n    return Decimal;\n}());\nexports.Decimal = Decimal;\n/** @hidden */\nvar CommissionRate = /** @class */ (function () {\n    function CommissionRate(rate, maxRate, maxChangeRate) {\n        this.rate = rate;\n        this.maxRate = maxRate;\n        this.maxChangeRate = maxChangeRate;\n    }\n    CommissionRate.prototype.encode = function () {\n        var raw = [];\n        raw.push(this.rate.encode());\n        raw.push(this.maxRate.encode());\n        raw.push(this.maxChangeRate.encode());\n        return raw;\n    };\n    return CommissionRate;\n}());\nexports.CommissionRate = CommissionRate;\nvar CreateValidator = /** @class */ (function () {\n    function CreateValidator(validatorAddress, description, commissionRates, minSelfDelegation, maxTotalDelegation, slotPubKeys, amount) {\n        this.validatorAddress = validatorAddress;\n        this.description = description;\n        this.commissionRates = commissionRates;\n        this.minSelfDelegation = minSelfDelegation;\n        this.maxTotalDelegation = maxTotalDelegation;\n        this.slotPubKeys = slotPubKeys;\n        this.amount = amount;\n    }\n    CreateValidator.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(this.description.encode());\n        raw.push(this.commissionRates.encode());\n        raw.push(crypto_1.hexlify(this.minSelfDelegation));\n        raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n        raw.push(this.encodeArr());\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    CreateValidator.prototype.encodeArr = function () {\n        var raw = [];\n        this.slotPubKeys.forEach(function (pubKey) {\n            raw.push(pubKey);\n        });\n        return raw;\n    };\n    return CreateValidator;\n}());\nexports.CreateValidator = CreateValidator;\nvar EditValidator = /** @class */ (function () {\n    function EditValidator(validatorAddress, description, commissionRate, minSelfDelegation, maxTotalDelegation, slotKeyToRemove, slotKeyToAdd) {\n        this.validatorAddress = validatorAddress;\n        this.description = description;\n        this.commissionRate = commissionRate;\n        this.minSelfDelegation = minSelfDelegation;\n        this.maxTotalDelegation = maxTotalDelegation;\n        this.slotKeyToRemove = slotKeyToRemove;\n        this.slotKeyToAdd = slotKeyToAdd;\n    }\n    EditValidator.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(this.description.encode());\n        raw.push(this.commissionRate.encode());\n        raw.push(crypto_1.hexlify(this.minSelfDelegation));\n        raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n        raw.push(this.slotKeyToRemove);\n        raw.push(this.slotKeyToAdd);\n        return raw;\n    };\n    return EditValidator;\n}());\nexports.EditValidator = EditValidator;\nvar Delegate = /** @class */ (function () {\n    function Delegate(delegatorAddress, validatorAddress, amount) {\n        this.delegatorAddress = delegatorAddress;\n        this.validatorAddress = validatorAddress;\n        this.amount = amount;\n    }\n    Delegate.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    return Delegate;\n}());\nexports.Delegate = Delegate;\nvar Undelegate = /** @class */ (function () {\n    function Undelegate(delegatorAddress, validatorAddress, amount) {\n        this.delegatorAddress = delegatorAddress;\n        this.validatorAddress = validatorAddress;\n        this.amount = amount;\n    }\n    Undelegate.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    return Undelegate;\n}());\nexports.Undelegate = Undelegate;\nvar CollectRewards = /** @class */ (function () {\n    function CollectRewards(delegatorAddress) {\n        this.delegatorAddress = delegatorAddress;\n    }\n    CollectRewards.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        return raw;\n    };\n    return CollectRewards;\n}());\nexports.CollectRewards = CollectRewards;\n//# sourceMappingURL=stakingTransaction.js.map"]},"metadata":{},"sourceType":"script"}