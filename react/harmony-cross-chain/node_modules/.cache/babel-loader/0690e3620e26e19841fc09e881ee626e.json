{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operation = void 0;\n\nconst logs_1 = require(\"./utils/logs\");\n\nconst interfaces_1 = require(\"./interfaces\");\n\nconst operation_helpers_1 = require(\"./operation-helpers\");\n\nconst ethToOne_1 = require(\"./operations/ethToOne\");\n\nconst oneToEth_1 = require(\"./operations/oneToEth\");\n\nconst oneToEthErc20_1 = require(\"./operations/oneToEthErc20\");\n\nconst ethToOneErc20_1 = require(\"./operations/ethToOneErc20\");\n\nconst oneDeposit_1 = require(\"./operations/oneDeposit\");\n\nconst ethToOneErc721_1 = require(\"./operations/ethToOneErc721\");\n\nconst oneToEthErc721_1 = require(\"./operations/oneToEthErc721\");\n\nexports.operation = async (params, callback) => {\n  const {\n    api,\n    oneAddress,\n    ethAddress,\n    web3Client,\n    hmyClient,\n    token,\n    type,\n    amount,\n    erc20Address,\n    maxWaitingTime\n  } = params;\n  const prefix = `[${token.toUpperCase()}: ${type.toUpperCase()}]`;\n\n  try {\n    logs_1.logger.start({\n      prefix,\n      message: `test ${token.toUpperCase()}: ${type.toUpperCase()}`\n    });\n    const ethBalanceBefore = await operation_helpers_1.getEthBalance(web3Client, token, ethAddress, erc20Address);\n    const oneBalanceBefore = await operation_helpers_1.getOneBalance(hmyClient, web3Client, token, oneAddress, erc20Address);\n    const operationParams = {\n      oneAddress,\n      ethAddress,\n      amount,\n      type,\n      token,\n      erc20Address,\n      network: params.network\n    };\n    logs_1.logger.info({\n      prefix,\n      message: 'ONE balance before: ' + oneBalanceBefore\n    });\n    logs_1.logger.info({\n      prefix,\n      message: 'ETH balance before: ' + ethBalanceBefore\n    });\n    logs_1.logger.pending({\n      prefix,\n      message: 'create operation'\n    });\n    let operation;\n    operation = await api.createOperation(operationParams);\n\n    if (operation && callback) {\n      callback(operation.id);\n    }\n\n    operation_helpers_1.logOperationParams(operation, prefix);\n    logs_1.logger.success({\n      prefix,\n      message: 'create operation'\n    });\n    logs_1.logger.info({\n      prefix,\n      message: 'operation ID: ' + operation.id\n    });\n    let ethMethods, hmyMethods;\n\n    if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n      await oneDeposit_1.depositOne(api, operation, ethMethods, hmyClient.hmyMethodsDeposit, prefix);\n    }\n\n    switch (token) {\n      case interfaces_1.TOKEN.BUSD:\n        hmyMethods = hmyClient.hmyMethodsBUSD;\n        ethMethods = web3Client.ethMethodsBUSD;\n        break;\n\n      case interfaces_1.TOKEN.LINK:\n        hmyMethods = hmyClient.hmyMethodsLINK;\n        ethMethods = web3Client.ethMethodsLINK;\n        break;\n    }\n\n    let res = false;\n\n    if (token === interfaces_1.TOKEN.ERC20) {\n      if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n        res = await ethToOneErc20_1.ethToOneErc20(api, operation, web3Client.ethMethodsERC20, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n      }\n\n      if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n        res = await oneToEthErc20_1.oneToEthErc20(api, operation, web3Client.ethMethodsERC20, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n      }\n    }\n\n    if (token === interfaces_1.TOKEN.ERC721) {\n      if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n        res = await ethToOneErc721_1.ethToOneErc721(api, operation, web3Client.ethMethodsERС721, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n      }\n\n      if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n        res = await oneToEthErc721_1.oneToEthErc721(api, operation, web3Client.ethMethodsERС721, hmyClient.hmyMethodsERC721, prefix, maxWaitingTime);\n      }\n    }\n\n    if ([interfaces_1.TOKEN.BUSD, interfaces_1.TOKEN.LINK].includes(token)) {\n      if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n        res = await ethToOne_1.ethToOne(api, operation, ethMethods, prefix, maxWaitingTime);\n      }\n\n      if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n        res = await oneToEth_1.oneToEth(api, operation, ethMethods, hmyMethods, prefix, maxWaitingTime);\n      }\n    }\n\n    if (!res) {\n      return false;\n    }\n\n    operation = await api.getOperation(operation.id);\n\n    if (!operation_helpers_1.checkStatus(operation, prefix, 'operation')) {\n      return false;\n    }\n\n    logs_1.logger.success({\n      prefix,\n      message: 'operation OK'\n    });\n    return true;\n  } catch (e) {\n    console.log(e);\n    let error;\n\n    if (e && e.status && e.response.body) {\n      error = e.response.body.message;\n    } else {\n      error = e ? e.message : 'unknown';\n    }\n\n    logs_1.logger.error({\n      prefix,\n      message: error\n    });\n    throw new Error(error);\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operation.js"],"names":["Object","defineProperty","exports","value","operation","logs_1","require","interfaces_1","operation_helpers_1","ethToOne_1","oneToEth_1","oneToEthErc20_1","ethToOneErc20_1","oneDeposit_1","ethToOneErc721_1","oneToEthErc721_1","params","callback","api","oneAddress","ethAddress","web3Client","hmyClient","token","type","amount","erc20Address","maxWaitingTime","prefix","toUpperCase","logger","start","message","ethBalanceBefore","getEthBalance","oneBalanceBefore","getOneBalance","operationParams","network","info","pending","createOperation","id","logOperationParams","success","ethMethods","hmyMethods","EXCHANGE_MODE","ONE_TO_ETH","depositOne","hmyMethodsDeposit","TOKEN","BUSD","hmyMethodsBUSD","ethMethodsBUSD","LINK","hmyMethodsLINK","ethMethodsLINK","res","ERC20","ETH_TO_ONE","ethToOneErc20","ethMethodsERC20","hmyMethodsERC20","oneToEthErc20","ERC721","ethToOneErc721","ethMethodsERС721","oneToEthErc721","hmyMethodsERC721","includes","ethToOne","oneToEth","getOperation","checkStatus","e","console","log","error","status","response","body","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.operation = void 0;\nconst logs_1 = require(\"./utils/logs\");\nconst interfaces_1 = require(\"./interfaces\");\nconst operation_helpers_1 = require(\"./operation-helpers\");\nconst ethToOne_1 = require(\"./operations/ethToOne\");\nconst oneToEth_1 = require(\"./operations/oneToEth\");\nconst oneToEthErc20_1 = require(\"./operations/oneToEthErc20\");\nconst ethToOneErc20_1 = require(\"./operations/ethToOneErc20\");\nconst oneDeposit_1 = require(\"./operations/oneDeposit\");\nconst ethToOneErc721_1 = require(\"./operations/ethToOneErc721\");\nconst oneToEthErc721_1 = require(\"./operations/oneToEthErc721\");\nexports.operation = async (params, callback) => {\n    const { api, oneAddress, ethAddress, web3Client, hmyClient, token, type, amount, erc20Address, maxWaitingTime, } = params;\n    const prefix = `[${token.toUpperCase()}: ${type.toUpperCase()}]`;\n    try {\n        logs_1.logger.start({ prefix, message: `test ${token.toUpperCase()}: ${type.toUpperCase()}` });\n        const ethBalanceBefore = await operation_helpers_1.getEthBalance(web3Client, token, ethAddress, erc20Address);\n        const oneBalanceBefore = await operation_helpers_1.getOneBalance(hmyClient, web3Client, token, oneAddress, erc20Address);\n        const operationParams = {\n            oneAddress,\n            ethAddress,\n            amount,\n            type,\n            token,\n            erc20Address,\n            network: params.network,\n        };\n        logs_1.logger.info({ prefix, message: 'ONE balance before: ' + oneBalanceBefore });\n        logs_1.logger.info({ prefix, message: 'ETH balance before: ' + ethBalanceBefore });\n        logs_1.logger.pending({ prefix, message: 'create operation' });\n        let operation;\n        operation = await api.createOperation(operationParams);\n        if (operation && callback) {\n            callback(operation.id);\n        }\n        operation_helpers_1.logOperationParams(operation, prefix);\n        logs_1.logger.success({ prefix, message: 'create operation' });\n        logs_1.logger.info({ prefix, message: 'operation ID: ' + operation.id });\n        let ethMethods, hmyMethods;\n        if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n            await oneDeposit_1.depositOne(api, operation, ethMethods, hmyClient.hmyMethodsDeposit, prefix);\n        }\n        switch (token) {\n            case interfaces_1.TOKEN.BUSD:\n                hmyMethods = hmyClient.hmyMethodsBUSD;\n                ethMethods = web3Client.ethMethodsBUSD;\n                break;\n            case interfaces_1.TOKEN.LINK:\n                hmyMethods = hmyClient.hmyMethodsLINK;\n                ethMethods = web3Client.ethMethodsLINK;\n                break;\n        }\n        let res = false;\n        if (token === interfaces_1.TOKEN.ERC20) {\n            if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n                res = await ethToOneErc20_1.ethToOneErc20(api, operation, web3Client.ethMethodsERC20, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n            }\n            if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n                res = await oneToEthErc20_1.oneToEthErc20(api, operation, web3Client.ethMethodsERC20, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n            }\n        }\n        if (token === interfaces_1.TOKEN.ERC721) {\n            if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n                res = await ethToOneErc721_1.ethToOneErc721(api, operation, web3Client.ethMethodsERС721, hmyClient.hmyMethodsERC20, prefix, maxWaitingTime);\n            }\n            if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n                res = await oneToEthErc721_1.oneToEthErc721(api, operation, web3Client.ethMethodsERС721, hmyClient.hmyMethodsERC721, prefix, maxWaitingTime);\n            }\n        }\n        if ([interfaces_1.TOKEN.BUSD, interfaces_1.TOKEN.LINK].includes(token)) {\n            if (type === interfaces_1.EXCHANGE_MODE.ETH_TO_ONE) {\n                res = await ethToOne_1.ethToOne(api, operation, ethMethods, prefix, maxWaitingTime);\n            }\n            if (type === interfaces_1.EXCHANGE_MODE.ONE_TO_ETH) {\n                res = await oneToEth_1.oneToEth(api, operation, ethMethods, hmyMethods, prefix, maxWaitingTime);\n            }\n        }\n        if (!res) {\n            return false;\n        }\n        operation = await api.getOperation(operation.id);\n        if (!operation_helpers_1.checkStatus(operation, prefix, 'operation')) {\n            return false;\n        }\n        logs_1.logger.success({ prefix, message: 'operation OK' });\n        return true;\n    }\n    catch (e) {\n        console.log(e);\n        let error;\n        if (e && e.status && e.response.body) {\n            error = e.response.body.message;\n        }\n        else {\n            error = e ? e.message : 'unknown';\n        }\n        logs_1.logger.error({ prefix, message: error });\n        throw new Error(error);\n        return false;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}