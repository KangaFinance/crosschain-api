{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractMethod = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar transaction_1 = require(\"@harmony-js/transaction\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar encoder_1 = require(\"../utils/encoder\");\n\nvar status_1 = require(\"../utils/status\");\n\nvar ContractMethod = function () {\n  function ContractMethod(methodKey, params, abiItem, contract) {\n    this.methodKey = methodKey;\n    this.contract = contract;\n    this.wallet = contract.wallet;\n    this.params = params;\n    this.abiItem = abiItem;\n    this.transaction = this.createTransaction();\n    this.callPayload = undefined;\n    this.callResponse = undefined;\n  }\n\n  ContractMethod.prototype.send = function (params) {\n    var _this = this;\n\n    if (params && !params.gasLimit) {\n      params.gasLimit = params.gas;\n    }\n\n    try {\n      var gasLimit_1 = params.gasLimit; // change by estimateGas\n\n      var signTxs_1 = function () {\n        _this.transaction = _this.transaction.map(function (tx) {\n          return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, tx), params), {\n            gasLimit: gasLimit_1\n          });\n        });\n        var waitConfirm = params && params.waitConfirm === false ? false : true;\n        var updateNonce = params && params.nonce !== undefined ? false : true;\n\n        _this.signTransaction(updateNonce).then(function (signed) {\n          _this.sendTransaction(signed).then(function (sent) {\n            var _a = tslib_1.__read(sent, 2),\n                txn = _a[0],\n                id = _a[1];\n\n            _this.transaction = txn;\n            _this.contract.transaction = _this.transaction;\n\n            if (_this.transaction.isRejected()) {\n              _this.transaction.emitter.reject(id); // in this case, id is error message\n\n            } else if (waitConfirm) {\n              _this.confirm(id).then(function () {\n                _this.transaction.emitter.resolve(_this.contract);\n              });\n            } else {\n              _this.transaction.emitter.resolve(_this.contract);\n            }\n          });\n        }).catch(function (error) {\n          _this.transaction.emitter.reject(error);\n        });\n      };\n\n      if (gasLimit_1 === undefined) {\n        this.estimateGas(params).then(function (gas) {\n          gasLimit_1 = utils_1.hexToBN(gas);\n          signTxs_1();\n        });\n      } else {\n        signTxs_1();\n      }\n\n      return this.transaction.emitter;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  ContractMethod.prototype.call = function (options, blockNumber) {\n    if (blockNumber === void 0) {\n      blockNumber = 'latest';\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var shardID, keys, txPayload, sendPayload, keys_1, keys_1_1, key, result, error_1;\n\n      var e_1, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (options && !options.gasLimit) {\n              options.gasLimit = options.gas;\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            shardID = options !== undefined && options.shardID !== undefined ? options.shardID : this.contract.shardID;\n            this.transaction = this.transaction.map(function (tx) {\n              return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, tx), options), {\n                nonce: 0\n              });\n            });\n            keys = Object.keys(this.transaction.txPayload);\n            txPayload = this.transaction.txPayload;\n            sendPayload = {};\n\n            try {\n              for (keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                key = keys_1_1.value; // tslint:disable-next-line: no-unused-expression\n\n                if (txPayload[key] !== '0x') {\n                  sendPayload[key] = txPayload[key];\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            } // tslint:disable-line\n\n\n            return [4\n            /*yield*/\n            , this.wallet.messenger.send(network_1.RPCMethod.Call, [sendPayload, blockNumber], // tslint:disable-line\n            this.wallet.messenger.chainPrefix, shardID)];\n\n          case 2:\n            result = // tslint:disable-line\n            _b.sent();\n            this.callPayload = sendPayload;\n            this.callResponse = result;\n\n            if (result.isError()) {\n              throw result.message;\n            } else if (result.isResult()) {\n              if (result.result === null) {\n                return [2\n                /*return*/\n                , this.afterCall(undefined)];\n              } else {\n                return [2\n                /*return*/\n                , this.afterCall(result.result)];\n              }\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _b.sent();\n            throw error_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractMethod.prototype.estimateGas = function (options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var estPayload, txPayload, keys, keys_2, keys_2_1, key, result, _a, error_2;\n\n      var e_2, _b;\n\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n\n            estPayload = {};\n            txPayload = this.transaction.txPayload;\n            keys = ['from', 'to', 'gasPrice', 'value', 'data'];\n\n            try {\n              for (keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {\n                key = keys_2_1.value;\n\n                if (options && options[key]) {\n                  estPayload[key] = options[key];\n                } else if (txPayload[key] !== '0x') {\n                  estPayload[key] = txPayload[key];\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            if (this.abiItem.isOfType('constructor')) {\n              delete estPayload.to;\n            }\n\n            _a = network_1.getResultForData; // tslint:disable-line\n\n            return [4\n            /*yield*/\n            , this.wallet.messenger.send(network_1.RPCMethod.EstimateGas, [estPayload])];\n\n          case 1:\n            result = _a.apply(void 0, [// tslint:disable-line\n            _c.sent()]);\n\n            if (result.responseType === 'error') {\n              throw result.message;\n            } else if (result.responseType === 'raw') {\n              throw new Error('Get estimateGas fail');\n            } else {\n              return [2\n              /*return*/\n              , result];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_2 = _c.sent();\n            throw error_2;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractMethod.prototype.encodeABI = function () {\n    return encoder_1.methodEncoder(this.contract.abiCoder, this.abiItem, this.contract.data);\n  };\n\n  ContractMethod.prototype.debug = function () {\n    return {\n      callResponse: this.callResponse,\n      callPayload: this.callPayload\n    };\n  };\n\n  ContractMethod.prototype.signTransaction = function (updateNonce) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var signed, _a, error_3;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5,, 6]);\n\n            signed = void 0;\n            if (!this.wallet.signer) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.wallet.signTransaction(this.transaction, this.wallet.signer, undefined, updateNonce, 'rlp', 'latest')];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.wallet.signTransaction(this.transaction, updateNonce, 'rlp', 'latest')];\n\n          case 3:\n            _a = _b.sent();\n            _b.label = 4;\n\n          case 4:\n            signed = _a;\n\n            if (this.abiItem.isOfType('constructor')) {\n              this.contract.address = transaction_1.TransactionFactory.getContractAddress(signed);\n            }\n\n            this.contract.setStatus(status_1.ContractStatus.SIGNED);\n            return [2\n            /*return*/\n            , signed];\n\n          case 5:\n            error_3 = _b.sent();\n            throw error_3;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractMethod.prototype.sendTransaction = function (signed) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result, error_4;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , signed.sendTransaction()];\n\n          case 1:\n            result = _a.sent();\n            this.contract.setStatus(status_1.ContractStatus.SENT);\n            return [2\n            /*return*/\n            , result];\n\n          case 2:\n            error_4 = _a.sent();\n            throw error_4;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractMethod.prototype.confirm = function (id) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var result, error_5;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.transaction.confirm(id, 20, 1000, this.transaction ? this.transaction.txParams.shardID : this.contract.shardID)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.receipt && result.txStatus === transaction_1.TxStatus.CONFIRMED) {\n              if (this.abiItem.isOfType('constructor')) {\n                this.contract.setStatus(status_1.ContractStatus.DEPLOYED);\n              } else {\n                this.contract.setStatus(status_1.ContractStatus.CALLED);\n              }\n            } else {\n              this.contract.setStatus(status_1.ContractStatus.REJECTED);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_5 = _a.sent();\n            throw error_5;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContractMethod.prototype.createTransaction = function () {\n    if (this.wallet.messenger) {\n      if (this.abiItem.isOfType('constructor')) {\n        // tslint:disable-next-line: no-string-literal\n        this.contract.data = this.params[0]['data'] || '0x';\n        this.abiItem.contractMethodParameters = // tslint:disable-next-line: no-string-literal\n        this.params[0]['arguments'] || [];\n      } else {\n        this.abiItem.contractMethodParameters = this.params || [];\n      }\n\n      var defaultOptions = {\n        gasLimit: new utils_1.Unit(21000000).asWei().toWei(),\n        gasPrice: new utils_1.Unit(1).asGwei().toWei()\n      };\n\n      var txObject = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), this.contract.options), this.params[0]), {\n        to: this.abiItem.isOfType('constructor') ? '0x' : crypto_1.getAddress(this.contract.address).checksum,\n        data: this.encodeABI()\n      }); // tslint:disable-line\n\n\n      var result = new transaction_1.TransactionFactory(this.wallet.messenger).newTx(txObject);\n      return result;\n    } else {\n      throw new Error('Messenger is not found');\n    }\n  };\n\n  ContractMethod.prototype.afterCall = function (response) {\n    // length of `0x${methodSig}` is 2+4*2=10\n    if (response.length % 32 === 10 && response.startsWith(this.contract.errorFuncSig)) {\n      var errmsg = this.contract.abiCoder.decodeParameters([{\n        type: 'string'\n      }], '0x' + response.slice(10));\n      throw {\n        revert: errmsg[0]\n      };\n    }\n\n    if (this.abiItem.isOfType('constructor') || this.abiItem.isOfType('fallback') || this.abiItem.isOfType('receive')) {\n      return response;\n    }\n\n    var outputs = this.abiItem.getOutputs();\n\n    if (outputs.length === 0) {\n      // if outputs is empty, we can't know the call is revert or not\n      return response;\n    }\n\n    if (!response || response === '0x') {\n      // if outputs isn't empty, treat it as revert\n      throw {\n        revert: response\n      };\n    }\n\n    if (outputs.length > 1) {\n      return this.contract.abiCoder.decodeParameters(outputs, response);\n    }\n\n    return this.contract.abiCoder.decodeParameter(outputs[0], response); // return outputs;\n  };\n\n  return ContractMethod;\n}();\n\nexports.ContractMethod = ContractMethod;","map":{"version":3,"sources":["../../src/methods/method.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractMethod = void 0;\nvar tslib_1 = require(\"tslib\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar network_1 = require(\"@harmony-js/network\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar encoder_1 = require(\"../utils/encoder\");\nvar status_1 = require(\"../utils/status\");\nvar ContractMethod = /** @class */ (function () {\n    function ContractMethod(methodKey, params, abiItem, contract) {\n        this.methodKey = methodKey;\n        this.contract = contract;\n        this.wallet = contract.wallet;\n        this.params = params;\n        this.abiItem = abiItem;\n        this.transaction = this.createTransaction();\n        this.callPayload = undefined;\n        this.callResponse = undefined;\n    }\n    ContractMethod.prototype.send = function (params) {\n        var _this = this;\n        if (params && !params.gasLimit) {\n            params.gasLimit = params.gas;\n        }\n        try {\n            var gasLimit_1 = params.gasLimit; // change by estimateGas\n            var signTxs_1 = function () {\n                _this.transaction = _this.transaction.map(function (tx) {\n                    return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, tx), params), { gasLimit: gasLimit_1 });\n                });\n                var waitConfirm = params && params.waitConfirm === false ? false : true;\n                var updateNonce = params && params.nonce !== undefined ? false : true;\n                _this.signTransaction(updateNonce)\n                    .then(function (signed) {\n                    _this.sendTransaction(signed).then(function (sent) {\n                        var _a = tslib_1.__read(sent, 2), txn = _a[0], id = _a[1];\n                        _this.transaction = txn;\n                        _this.contract.transaction = _this.transaction;\n                        if (_this.transaction.isRejected()) {\n                            _this.transaction.emitter.reject(id); // in this case, id is error message\n                        }\n                        else if (waitConfirm) {\n                            _this.confirm(id).then(function () {\n                                _this.transaction.emitter.resolve(_this.contract);\n                            });\n                        }\n                        else {\n                            _this.transaction.emitter.resolve(_this.contract);\n                        }\n                    });\n                })\n                    .catch(function (error) {\n                    _this.transaction.emitter.reject(error);\n                });\n            };\n            if (gasLimit_1 === undefined) {\n                this.estimateGas(params).then(function (gas) {\n                    gasLimit_1 = utils_1.hexToBN(gas);\n                    signTxs_1();\n                });\n            }\n            else {\n                signTxs_1();\n            }\n            return this.transaction.emitter;\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    ContractMethod.prototype.call = function (options, blockNumber) {\n        if (blockNumber === void 0) { blockNumber = 'latest'; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var shardID, keys, txPayload, sendPayload, keys_1, keys_1_1, key, result, error_1;\n            var e_1, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (options && !options.gasLimit) {\n                            options.gasLimit = options.gas;\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        shardID = options !== undefined && options.shardID !== undefined\n                            ? options.shardID\n                            : this.contract.shardID;\n                        this.transaction = this.transaction.map(function (tx) {\n                            return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, tx), options), { nonce: 0 });\n                        });\n                        keys = Object.keys(this.transaction.txPayload);\n                        txPayload = this.transaction.txPayload;\n                        sendPayload = {};\n                        try {\n                            for (keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                                key = keys_1_1.value;\n                                // tslint:disable-next-line: no-unused-expression\n                                if (txPayload[key] !== '0x') {\n                                    sendPayload[key] = txPayload[key];\n                                }\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                        // tslint:disable-line\n                        return [4 /*yield*/, this.wallet.messenger.send(network_1.RPCMethod.Call, [sendPayload, blockNumber], \n                            // tslint:disable-line\n                            this.wallet.messenger.chainPrefix, shardID)];\n                    case 2:\n                        result = \n                        // tslint:disable-line\n                        _b.sent();\n                        this.callPayload = sendPayload;\n                        this.callResponse = result;\n                        if (result.isError()) {\n                            throw result.message;\n                        }\n                        else if (result.isResult()) {\n                            if (result.result === null) {\n                                return [2 /*return*/, this.afterCall(undefined)];\n                            }\n                            else {\n                                return [2 /*return*/, this.afterCall(result.result)];\n                            }\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _b.sent();\n                        throw error_1;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractMethod.prototype.estimateGas = function (options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var estPayload, txPayload, keys, keys_2, keys_2_1, key, result, _a, error_2;\n            var e_2, _b;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 2, , 3]);\n                        estPayload = {};\n                        txPayload = this.transaction.txPayload;\n                        keys = ['from', 'to', 'gasPrice', 'value', 'data'];\n                        try {\n                            for (keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {\n                                key = keys_2_1.value;\n                                if (options && options[key]) {\n                                    estPayload[key] = options[key];\n                                }\n                                else if (txPayload[key] !== '0x') {\n                                    estPayload[key] = txPayload[key];\n                                }\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        if (this.abiItem.isOfType('constructor')) {\n                            delete estPayload.to;\n                        }\n                        _a = network_1.getResultForData;\n                        // tslint:disable-line\n                        return [4 /*yield*/, this.wallet.messenger.send(network_1.RPCMethod.EstimateGas, [estPayload])];\n                    case 1:\n                        result = _a.apply(void 0, [\n                            // tslint:disable-line\n                            _c.sent()]);\n                        if (result.responseType === 'error') {\n                            throw result.message;\n                        }\n                        else if (result.responseType === 'raw') {\n                            throw new Error('Get estimateGas fail');\n                        }\n                        else {\n                            return [2 /*return*/, result];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_2 = _c.sent();\n                        throw error_2;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractMethod.prototype.encodeABI = function () {\n        return encoder_1.methodEncoder(this.contract.abiCoder, this.abiItem, this.contract.data);\n    };\n    ContractMethod.prototype.debug = function () {\n        return {\n            callResponse: this.callResponse,\n            callPayload: this.callPayload,\n        };\n    };\n    ContractMethod.prototype.signTransaction = function (updateNonce) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var signed, _a, error_3;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 5, , 6]);\n                        signed = void 0;\n                        if (!this.wallet.signer) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.wallet.signTransaction(this.transaction, this.wallet.signer, undefined, updateNonce, 'rlp', 'latest')];\n                    case 1:\n                        _a = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.wallet.signTransaction(this.transaction, updateNonce, 'rlp', 'latest')];\n                    case 3:\n                        _a = _b.sent();\n                        _b.label = 4;\n                    case 4:\n                        signed = _a;\n                        if (this.abiItem.isOfType('constructor')) {\n                            this.contract.address = transaction_1.TransactionFactory.getContractAddress(signed);\n                        }\n                        this.contract.setStatus(status_1.ContractStatus.SIGNED);\n                        return [2 /*return*/, signed];\n                    case 5:\n                        error_3 = _b.sent();\n                        throw error_3;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractMethod.prototype.sendTransaction = function (signed) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result, error_4;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, signed.sendTransaction()];\n                    case 1:\n                        result = _a.sent();\n                        this.contract.setStatus(status_1.ContractStatus.SENT);\n                        return [2 /*return*/, result];\n                    case 2:\n                        error_4 = _a.sent();\n                        throw error_4;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractMethod.prototype.confirm = function (id) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result, error_5;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.transaction.confirm(id, 20, 1000, this.transaction ? this.transaction.txParams.shardID : this.contract.shardID)];\n                    case 1:\n                        result = _a.sent();\n                        if (result.receipt && result.txStatus === transaction_1.TxStatus.CONFIRMED) {\n                            if (this.abiItem.isOfType('constructor')) {\n                                this.contract.setStatus(status_1.ContractStatus.DEPLOYED);\n                            }\n                            else {\n                                this.contract.setStatus(status_1.ContractStatus.CALLED);\n                            }\n                        }\n                        else {\n                            this.contract.setStatus(status_1.ContractStatus.REJECTED);\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_5 = _a.sent();\n                        throw error_5;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ContractMethod.prototype.createTransaction = function () {\n        if (this.wallet.messenger) {\n            if (this.abiItem.isOfType('constructor')) {\n                // tslint:disable-next-line: no-string-literal\n                this.contract.data = this.params[0]['data'] || '0x';\n                this.abiItem.contractMethodParameters =\n                    // tslint:disable-next-line: no-string-literal\n                    this.params[0]['arguments'] || [];\n            }\n            else {\n                this.abiItem.contractMethodParameters = this.params || [];\n            }\n            var defaultOptions = {\n                gasLimit: new utils_1.Unit(21000000).asWei().toWei(),\n                gasPrice: new utils_1.Unit(1).asGwei().toWei(),\n            };\n            var txObject = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultOptions), this.contract.options), this.params[0]), { to: this.abiItem.isOfType('constructor')\n                    ? '0x'\n                    : crypto_1.getAddress(this.contract.address).checksum, data: this.encodeABI() });\n            // tslint:disable-line\n            var result = new transaction_1.TransactionFactory(this.wallet.messenger).newTx(txObject);\n            return result;\n        }\n        else {\n            throw new Error('Messenger is not found');\n        }\n    };\n    ContractMethod.prototype.afterCall = function (response) {\n        // length of `0x${methodSig}` is 2+4*2=10\n        if (response.length % 32 === 10 && response.startsWith(this.contract.errorFuncSig)) {\n            var errmsg = this.contract.abiCoder.decodeParameters([{ type: 'string' }], '0x' + response.slice(10));\n            throw { revert: errmsg[0] };\n        }\n        if (this.abiItem.isOfType('constructor') ||\n            this.abiItem.isOfType('fallback') ||\n            this.abiItem.isOfType('receive')) {\n            return response;\n        }\n        var outputs = this.abiItem.getOutputs();\n        if (outputs.length === 0) {\n            // if outputs is empty, we can't know the call is revert or not\n            return response;\n        }\n        if (!response || response === '0x') {\n            // if outputs isn't empty, treat it as revert\n            throw { revert: response };\n        }\n        if (outputs.length > 1) {\n            return this.contract.abiCoder.decodeParameters(outputs, response);\n        }\n        return this.contract.abiCoder.decodeParameter(outputs[0], response);\n        // return outputs;\n    };\n    return ContractMethod;\n}());\nexports.ContractMethod = ContractMethod;\n//# sourceMappingURL=method.js.map"]},"metadata":{},"sourceType":"script"}