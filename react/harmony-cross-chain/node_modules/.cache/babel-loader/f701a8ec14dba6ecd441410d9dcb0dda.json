{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAddress = exports.HarmonyAddress = void 0;\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar keyTool_1 = require(\"./keyTool\");\n\nvar bech32_1 = require(\"./bech32\");\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { HarmonyAddress } = require('@harmony-js/crypto');\n *\n * // Step 2: call functions\n * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = HarmonyAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\n\n\nvar HarmonyAddress = function () {\n  function HarmonyAddress(raw) {\n    this.raw = raw;\n    this.basic = this.getBasic(this.raw);\n  }\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBasic = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.basic;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidChecksum(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidChecksum = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.checksum;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBech32 = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32TestNet(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBech32TestNet = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32TestNet;\n  };\n\n  Object.defineProperty(HarmonyAddress.prototype, \"basicHex\", {\n    /**\n     * get basicHex of the address\n     *\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.basicHex);\n     * ```\n     */\n    get: function () {\n      return \"0x\" + this.basic;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"checksum\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.checksum);\n     * ```\n     */\n    get: function () {\n      return keyTool_1.toChecksumAddress(\"0x\" + this.basic);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"bech32\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.bech32);\n     * ```\n     */\n    get: function () {\n      return bech32_1.toBech32(this.basic, bech32_1.HRP);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"bech32TestNet\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.bech32TestNet);\n     * ```\n     */\n    get: function () {\n      return bech32_1.toBech32(this.basic, bech32_1.tHRP);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Check whether the address has an valid address format\n   *\n   * @param addr string, the address\n   *\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * const res = instance.getBasic(addr);\n   * console.log(res)\n   * ```\n   */\n\n  HarmonyAddress.prototype.getBasic = function (addr) {\n    var basicBool = utils_1.isAddress(addr);\n    var bech32Bool = utils_1.isBech32Address(addr);\n    var bech32TestNetBool = utils_1.isBech32TestNetAddress(addr);\n\n    if (basicBool) {\n      return addr.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32Bool) {\n      var fromB32 = bech32_1.fromBech32(addr, bech32_1.HRP);\n      return fromB32.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32TestNetBool) {\n      var fromB32TestNet = bech32_1.fromBech32(addr, bech32_1.tHRP);\n      return fromB32TestNet.replace('0x', '').toLowerCase();\n    }\n\n    throw new Error(\"\\\"\" + addr + \"\\\" is an invalid address format\");\n  };\n\n  return HarmonyAddress;\n}();\n\nexports.HarmonyAddress = HarmonyAddress;\n/**\n * Using this function to get Harmony format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { randomBytes } = require('@harmony-js/crypto')\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Harmony,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\n\nfunction getAddress(address) {\n  try {\n    return new HarmonyAddress(address);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexports.getAddress = getAddress;","map":{"version":3,"sources":["../src/address.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddress = exports.HarmonyAddress = void 0;\nvar utils_1 = require(\"@harmony-js/utils\");\nvar keyTool_1 = require(\"./keyTool\");\nvar bech32_1 = require(\"./bech32\");\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { HarmonyAddress } = require('@harmony-js/crypto');\n *\n * // Step 2: call functions\n * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = HarmonyAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\nvar HarmonyAddress = /** @class */ (function () {\n    function HarmonyAddress(raw) {\n        this.raw = raw;\n        this.basic = this.getBasic(this.raw);\n    }\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBasic = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.basic;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidChecksum(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidChecksum = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.checksum;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBech32 = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.bech32;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32TestNet(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBech32TestNet = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.bech32TestNet;\n    };\n    Object.defineProperty(HarmonyAddress.prototype, \"basicHex\", {\n        /**\n         * get basicHex of the address\n         *\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.basicHex);\n         * ```\n         */\n        get: function () {\n            return \"0x\" + this.basic;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"checksum\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.checksum);\n         * ```\n         */\n        get: function () {\n            return keyTool_1.toChecksumAddress(\"0x\" + this.basic);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"bech32\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.bech32);\n         * ```\n         */\n        get: function () {\n            return bech32_1.toBech32(this.basic, bech32_1.HRP);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"bech32TestNet\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.bech32TestNet);\n         * ```\n         */\n        get: function () {\n            return bech32_1.toBech32(this.basic, bech32_1.tHRP);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Check whether the address has an valid address format\n     *\n     * @param addr string, the address\n     *\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * const res = instance.getBasic(addr);\n     * console.log(res)\n     * ```\n     */\n    HarmonyAddress.prototype.getBasic = function (addr) {\n        var basicBool = utils_1.isAddress(addr);\n        var bech32Bool = utils_1.isBech32Address(addr);\n        var bech32TestNetBool = utils_1.isBech32TestNetAddress(addr);\n        if (basicBool) {\n            return addr.replace('0x', '').toLowerCase();\n        }\n        if (bech32Bool) {\n            var fromB32 = bech32_1.fromBech32(addr, bech32_1.HRP);\n            return fromB32.replace('0x', '').toLowerCase();\n        }\n        if (bech32TestNetBool) {\n            var fromB32TestNet = bech32_1.fromBech32(addr, bech32_1.tHRP);\n            return fromB32TestNet.replace('0x', '').toLowerCase();\n        }\n        throw new Error(\"\\\"\" + addr + \"\\\" is an invalid address format\");\n    };\n    return HarmonyAddress;\n}());\nexports.HarmonyAddress = HarmonyAddress;\n/**\n * Using this function to get Harmony format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { randomBytes } = require('@harmony-js/crypto')\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Harmony,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\nfunction getAddress(address) {\n    try {\n        return new HarmonyAddress(address);\n    }\n    catch (error) {\n        throw error;\n    }\n}\nexports.getAddress = getAddress;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}