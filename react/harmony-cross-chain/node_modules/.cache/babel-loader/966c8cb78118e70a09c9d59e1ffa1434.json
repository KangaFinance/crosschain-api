{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmyMethods = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst helpers_1 = require(\"./helpers\");\n\nclass HmyMethods {\n  constructor(params) {\n    this.options = {\n      gasPrice: 1000000000,\n      gasLimit: 6721900\n    };\n    this.useOneWallet = false;\n    this.useMathWallet = false;\n\n    this.setUseMetamask = value => value;\n\n    this.setUseOneWallet = value => {\n      if (!window || !window.onewallet) {\n        throw new Error('OneWallet extension is not found');\n      }\n\n      this.useOneWallet = value;\n    };\n\n    this.setUseMathWallet = value => {\n      if (!window || !window.harmony) {\n        throw new Error('Math Wallet extension is not found');\n      }\n\n      this.useMathWallet = value;\n    };\n\n    this.approveHmyManger = (amount, sendTxCallback) => {\n      return new Promise(async (resolve, reject) => {\n        try {\n          if (this.useOneWallet) {\n            await helpers_1.connectToBrowserWallet(window.onewallet, this.hmy, this.hmyTokenContract.wallet, null, reject);\n          }\n\n          if (this.useMathWallet) {\n            await helpers_1.connectToBrowserWallet(window.harmony, this.hmy, this.hmyTokenContract.wallet, null, reject);\n          }\n\n          const res = await this.hmyTokenContract.methods.approve(this.hmyManagerContract.address, utils_1.withDecimals(amount, 18)).send(this.options).on('transactionHash', sendTxCallback);\n          resolve(res);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    };\n\n    this.burnToken = async (userAddr, amount, sendTxCallback) => {\n      return new Promise(async (resolve, reject) => {\n        try {\n          if (this.useOneWallet) {\n            await helpers_1.connectToBrowserWallet(window.onewallet, this.hmy, this.hmyManagerContract.wallet, null, reject);\n          }\n\n          if (this.useMathWallet) {\n            await helpers_1.connectToBrowserWallet(window.harmony, this.hmy, this.hmyManagerContract.wallet, null, reject);\n          }\n\n          const response = await this.hmyManagerContract.methods.burnToken(utils_1.withDecimals(amount, 18), userAddr).send(this.options).on('transactionHash', sendTxCallback);\n          resolve(response);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    };\n\n    this.checkHmyBalance = async addr => {\n      const addrHex = this.hmy.crypto.getAddress(addr).checksum;\n      return await this.hmyTokenContract.methods.balanceOf(addrHex).call(this.options);\n    };\n\n    this.totalSupply = async () => {\n      return await this.hmyTokenContract.methods.totalSupply().call(this.options);\n    };\n\n    this.hmy = params.hmy;\n    this.hmyTokenContract = params.hmyTokenContract;\n    this.hmyManagerContract = params.hmyManagerContract;\n\n    if (params.options) {\n      this.options = params.options;\n    }\n  }\n\n}\n\nexports.HmyMethods = HmyMethods;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/hmy/HmyMethods.js"],"names":["Object","defineProperty","exports","value","HmyMethods","utils_1","require","helpers_1","constructor","params","options","gasPrice","gasLimit","useOneWallet","useMathWallet","setUseMetamask","setUseOneWallet","window","onewallet","Error","setUseMathWallet","harmony","approveHmyManger","amount","sendTxCallback","Promise","resolve","reject","connectToBrowserWallet","hmy","hmyTokenContract","wallet","res","methods","approve","hmyManagerContract","address","withDecimals","send","on","e","burnToken","userAddr","response","checkHmyBalance","addr","addrHex","crypto","getAddress","checksum","balanceOf","call","totalSupply"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HmyMethods = void 0;\nconst utils_1 = require(\"../utils\");\nconst helpers_1 = require(\"./helpers\");\nclass HmyMethods {\n    constructor(params) {\n        this.options = { gasPrice: 1000000000, gasLimit: 6721900 };\n        this.useOneWallet = false;\n        this.useMathWallet = false;\n        this.setUseMetamask = (value) => value;\n        this.setUseOneWallet = (value) => {\n            if (!window || !window.onewallet) {\n                throw new Error('OneWallet extension is not found');\n            }\n            this.useOneWallet = value;\n        };\n        this.setUseMathWallet = (value) => {\n            if (!window || !window.harmony) {\n                throw new Error('Math Wallet extension is not found');\n            }\n            this.useMathWallet = value;\n        };\n        this.approveHmyManger = (amount, sendTxCallback) => {\n            return new Promise(async (resolve, reject) => {\n                try {\n                    if (this.useOneWallet) {\n                        await helpers_1.connectToBrowserWallet(window.onewallet, this.hmy, this.hmyTokenContract.wallet, null, reject);\n                    }\n                    if (this.useMathWallet) {\n                        await helpers_1.connectToBrowserWallet(window.harmony, this.hmy, this.hmyTokenContract.wallet, null, reject);\n                    }\n                    const res = await this.hmyTokenContract.methods\n                        .approve(this.hmyManagerContract.address, utils_1.withDecimals(amount, 18))\n                        .send(this.options)\n                        .on('transactionHash', sendTxCallback);\n                    resolve(res);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        };\n        this.burnToken = async (userAddr, amount, sendTxCallback) => {\n            return new Promise(async (resolve, reject) => {\n                try {\n                    if (this.useOneWallet) {\n                        await helpers_1.connectToBrowserWallet(window.onewallet, this.hmy, this.hmyManagerContract.wallet, null, reject);\n                    }\n                    if (this.useMathWallet) {\n                        await helpers_1.connectToBrowserWallet(window.harmony, this.hmy, this.hmyManagerContract.wallet, null, reject);\n                    }\n                    const response = await this.hmyManagerContract.methods\n                        .burnToken(utils_1.withDecimals(amount, 18), userAddr)\n                        .send(this.options)\n                        .on('transactionHash', sendTxCallback);\n                    resolve(response);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        };\n        this.checkHmyBalance = async (addr) => {\n            const addrHex = this.hmy.crypto.getAddress(addr).checksum;\n            return await this.hmyTokenContract.methods.balanceOf(addrHex).call(this.options);\n        };\n        this.totalSupply = async () => {\n            return await this.hmyTokenContract.methods.totalSupply().call(this.options);\n        };\n        this.hmy = params.hmy;\n        this.hmyTokenContract = params.hmyTokenContract;\n        this.hmyManagerContract = params.hmyManagerContract;\n        if (params.options) {\n            this.options = params.options;\n        }\n    }\n}\nexports.HmyMethods = HmyMethods;\n"]},"metadata":{},"sourceType":"script"}