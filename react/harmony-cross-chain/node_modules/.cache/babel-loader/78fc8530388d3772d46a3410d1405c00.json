{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/crypto\n\nThis package provides a collection of apis related to address management, kestore, encoding, and encrypt/decrypt.\n\n## Installation\n\n```\nnpm install @harmony-js/crypto\n```\n\n## Usage\n\n```javascript\n* const {\n*   encode,\n*   decode,\n*   randomBytes,\n*   toBech32,\n*   fromBech32,\n*   HarmonyAddress,\n*   generatePrivateKey,\n*   getPubkeyFromPrivateKey,\n*   getAddressFromPublicKey,\n*   getAddressFromPrivateKey,\n*   encryptPhrase,\n*   decryptPhrase\n* } = require('@harmony-js/crypto');\n* const { isPrivateKey, isAddress, isPublicKey } = require('@harmony-js/utils');\n```\n\nAddress apis\n```javascript\nconst bytes = randomBytes(20);\nconst addr = new HarmonyAddress(bytes);\n\nconsole.log(addr.checksum);\nconsole.log(addr.bech32);\n\nconsole.log(HarmonyAddress.isValidBech32(addr.bech32));\n```\n\nRLP apis\n```javascript\nconst encoded = '0x89010101010101010101';\nconst decoded = '0x010101010101010101';\nconsole.log(encode(decoded));\nconsole.log(decode(encoded));\n```\n\nKeystore apis\n```javascript\nconst prv = generatePrivateKey();\nconst pub = getPubkeyFromPrivateKey(prv);\nconst addr = getAddressFromPublicKey(pub);\nconst addrPrv = getAddressFromPrivateKey(prv);\nconsole.log(isPrivateKey(prv));\nconsole.log(isPublicKey(pub));\nconsole.log(isAddress(addr));\nconsole.log(isAddress(addrPrv));\n```\n\nEncrypt/decrypt apis\n```javascript\n* const { Wallet } = require('@harmony-js/account');\n\n* const myPhrase = new Wallet().newMnemonic();\n* console.log(myPhrase);\n* const pwd = '1234';\n* encryptPhrase(myPhrase, pwd).then((value) => {\n*   console.log(value);\n*   decryptPhrase(JSON.parse(value), pwd).then(value => {\n*     console.log(value);\n*   });\n* });\n```\n *\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = exports.warn = exports.setLogLevel = exports.checkNormalize = exports.setCensorship = exports.checkArgumentCount = exports.checkNew = exports.throwError = exports.UNSUPPORTED_OPERATION = exports.REPLACEMENT_UNDERPRICED = exports.NONCE_EXPIRED = exports.INSUFFICIENT_FUNDS = exports.NUMERIC_FAULT = exports.UNEXPECTED_ARGUMENT = exports.MISSING_ARGUMENT = exports.INVALID_ARGUMENT = exports.CALL_EXCEPTION = exports.MISSING_NEW = exports.NOT_IMPLEMENTED = exports.UNKNOWN_ERROR = void 0; // This file is ported from ether.js/src.ts/errors.ts\n// Unknown Error\n\n/** @hidden */\n\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR'; // Not implemented\n\n/** @hidden */\n\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED'; // Missing new operator to an object\n//  - name: The name of the class\n\n/** @hidden */\n\nexports.MISSING_NEW = 'MISSING_NEW'; // Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n\n/** @hidden */\n\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION'; // Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n\n/** @hidden */\n\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT'; // Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\n/** @hidden */\n\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT'; // Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\n/** @hidden */\n\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT'; // Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n\n/** @hidden */\n\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT'; // Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS'; // Nonce has already been used\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.NONCE_EXPIRED = 'NONCE_EXPIRED'; // The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED'; // Unsupported operation\n//   - operation\n\n/** @hidden */\n\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION'; // tslint:disable-next-line: variable-name\n\n/** @hidden */\n\nvar _permanentCensorErrors = false; // tslint:disable-next-line: variable-name\n\n/** @hidden */\n\nvar _censorErrors = false; // @TODO: Enum\n\n/** @hidden */\n\nfunction throwError(message, code, params) {\n  if (_censorErrors) {\n    throw new Error('unknown error');\n  }\n\n  if (!code) {\n    code = exports.UNKNOWN_ERROR;\n  }\n\n  if (!params) {\n    params = {};\n  }\n\n  var messageDetails = [];\n  Object.keys(params).forEach(function (key) {\n    try {\n      messageDetails.push(key + '=' + JSON.stringify(params[key]));\n    } catch (error) {\n      messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n    }\n  });\n  messageDetails.push('version=' + '#version');\n  var reason = message;\n\n  if (messageDetails.length) {\n    message += ' (' + messageDetails.join(', ') + ')';\n  } // @TODO: Any??\n\n\n  var error = new Error(message);\n  error.reason = reason;\n  error.code = code;\n  Object.keys(params).forEach(function (key) {\n    error[key] = params[key];\n  });\n  throw error;\n}\n\nexports.throwError = throwError;\n/** @hidden */\n\nfunction checkNew(self, kind) {\n  if (!(self instanceof kind)) {\n    throwError('missing new', exports.MISSING_NEW, {\n      name: kind.name\n    });\n  }\n}\n\nexports.checkNew = checkNew;\n/** @hidden */\n\nfunction checkArgumentCount(count, expectedCount, suffix) {\n  if (!suffix) {\n    suffix = '';\n  }\n\n  if (count < expectedCount) {\n    throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n\n  if (count > expectedCount) {\n    throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n}\n\nexports.checkArgumentCount = checkArgumentCount;\n/** @hidden */\n\nfunction setCensorship(censorship, permanent) {\n  if (_permanentCensorErrors) {\n    throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n      operation: 'setCensorship'\n    });\n  }\n\n  _censorErrors = !!censorship;\n  _permanentCensorErrors = !!permanent;\n}\n\nexports.setCensorship = setCensorship;\n/** @hidden */\n\nfunction checkNormalize() {\n  try {\n    // Make sure all forms of normalization are supported\n    ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach(function (form) {\n      try {\n        'test'.normalize(form);\n      } catch (error) {\n        throw new Error('missing ' + form);\n      }\n    });\n\n    if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error('broken implementation');\n    }\n  } catch (error) {\n    throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, {\n      operation: 'String.prototype.normalize',\n      form: error.message\n    });\n  }\n}\n\nexports.checkNormalize = checkNormalize;\n/** @hidden */\n\nvar LogLevels = {\n  debug: 1,\n  default: 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n  off: 5\n};\n/** @hidden */\n\nvar LogLevel = LogLevels.default;\n/** @hidden */\n\nfunction setLogLevel(logLevel) {\n  var level = LogLevels[logLevel];\n\n  if (level == null) {\n    warn('invliad log level - ' + logLevel);\n    return;\n  }\n\n  LogLevel = level;\n}\n\nexports.setLogLevel = setLogLevel;\n/** @hidden */\n\nfunction log(logLevel, args) {\n  if (LogLevel > LogLevels[logLevel]) {\n    return;\n  }\n\n  console.log.apply(console, args);\n}\n/** @hidden */\n\n\nfunction warn() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  log('warn', args);\n}\n\nexports.warn = warn;\n/** @hidden */\n\nfunction info() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  log('info', args);\n}\n\nexports.info = info;","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n # @harmony-js/crypto\n\nThis package provides a collection of apis related to address management, kestore, encoding, and encrypt/decrypt.\n\n## Installation\n\n```\nnpm install @harmony-js/crypto\n```\n\n## Usage\n\n```javascript\n* const {\n*   encode,\n*   decode,\n*   randomBytes,\n*   toBech32,\n*   fromBech32,\n*   HarmonyAddress,\n*   generatePrivateKey,\n*   getPubkeyFromPrivateKey,\n*   getAddressFromPublicKey,\n*   getAddressFromPrivateKey,\n*   encryptPhrase,\n*   decryptPhrase\n* } = require('@harmony-js/crypto');\n* const { isPrivateKey, isAddress, isPublicKey } = require('@harmony-js/utils');\n```\n\nAddress apis\n```javascript\nconst bytes = randomBytes(20);\nconst addr = new HarmonyAddress(bytes);\n\nconsole.log(addr.checksum);\nconsole.log(addr.bech32);\n\nconsole.log(HarmonyAddress.isValidBech32(addr.bech32));\n```\n\nRLP apis\n```javascript\nconst encoded = '0x89010101010101010101';\nconst decoded = '0x010101010101010101';\nconsole.log(encode(decoded));\nconsole.log(decode(encoded));\n```\n\nKeystore apis\n```javascript\nconst prv = generatePrivateKey();\nconst pub = getPubkeyFromPrivateKey(prv);\nconst addr = getAddressFromPublicKey(pub);\nconst addrPrv = getAddressFromPrivateKey(prv);\nconsole.log(isPrivateKey(prv));\nconsole.log(isPublicKey(pub));\nconsole.log(isAddress(addr));\nconsole.log(isAddress(addrPrv));\n```\n\nEncrypt/decrypt apis\n```javascript\n* const { Wallet } = require('@harmony-js/account');\n\n* const myPhrase = new Wallet().newMnemonic();\n* console.log(myPhrase);\n* const pwd = '1234';\n* encryptPhrase(myPhrase, pwd).then((value) => {\n*   console.log(value);\n*   decryptPhrase(JSON.parse(value), pwd).then(value => {\n*     console.log(value);\n*   });\n* });\n```\n *\n * @packageDocumentation\n * @module harmony-crypto\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.info = exports.warn = exports.setLogLevel = exports.checkNormalize = exports.setCensorship = exports.checkArgumentCount = exports.checkNew = exports.throwError = exports.UNSUPPORTED_OPERATION = exports.REPLACEMENT_UNDERPRICED = exports.NONCE_EXPIRED = exports.INSUFFICIENT_FUNDS = exports.NUMERIC_FAULT = exports.UNEXPECTED_ARGUMENT = exports.MISSING_ARGUMENT = exports.INVALID_ARGUMENT = exports.CALL_EXCEPTION = exports.MISSING_NEW = exports.NOT_IMPLEMENTED = exports.UNKNOWN_ERROR = void 0;\n// This file is ported from ether.js/src.ts/errors.ts\n// Unknown Error\n/** @hidden */\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n// Not implemented\n/** @hidden */\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n// Missing new operator to an object\n//  - name: The name of the class\n/** @hidden */\nexports.MISSING_NEW = 'MISSING_NEW';\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n/** @hidden */\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION';\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n/** @hidden */\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n/** @hidden */\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT';\n// Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';\n// Nonce has already been used\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.NONCE_EXPIRED = 'NONCE_EXPIRED';\n// The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';\n// Unsupported operation\n//   - operation\n/** @hidden */\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\n// tslint:disable-next-line: variable-name\n/** @hidden */\nvar _permanentCensorErrors = false;\n// tslint:disable-next-line: variable-name\n/** @hidden */\nvar _censorErrors = false;\n// @TODO: Enum\n/** @hidden */\nfunction throwError(message, code, params) {\n    if (_censorErrors) {\n        throw new Error('unknown error');\n    }\n    if (!code) {\n        code = exports.UNKNOWN_ERROR;\n    }\n    if (!params) {\n        params = {};\n    }\n    var messageDetails = [];\n    Object.keys(params).forEach(function (key) {\n        try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n        }\n        catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n        }\n    });\n    messageDetails.push('version=' + '#version');\n    var reason = message;\n    if (messageDetails.length) {\n        message += ' (' + messageDetails.join(', ') + ')';\n    }\n    // @TODO: Any??\n    var error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n    });\n    throw error;\n}\nexports.throwError = throwError;\n/** @hidden */\nfunction checkNew(self, kind) {\n    if (!(self instanceof kind)) {\n        throwError('missing new', exports.MISSING_NEW, { name: kind.name });\n    }\n}\nexports.checkNew = checkNew;\n/** @hidden */\nfunction checkArgumentCount(count, expectedCount, suffix) {\n    if (!suffix) {\n        suffix = '';\n    }\n    if (count < expectedCount) {\n        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount,\n        });\n    }\n    if (count > expectedCount) {\n        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount,\n        });\n    }\n}\nexports.checkArgumentCount = checkArgumentCount;\n/** @hidden */\nfunction setCensorship(censorship, permanent) {\n    if (_permanentCensorErrors) {\n        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n            operation: 'setCensorship',\n        });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n}\nexports.setCensorship = setCensorship;\n/** @hidden */\nfunction checkNormalize() {\n    try {\n        // Make sure all forms of normalization are supported\n        ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach(function (form) {\n            try {\n                'test'.normalize(form);\n            }\n            catch (error) {\n                throw new Error('missing ' + form);\n            }\n        });\n        if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error('broken implementation');\n        }\n    }\n    catch (error) {\n        throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, {\n            operation: 'String.prototype.normalize',\n            form: error.message,\n        });\n    }\n}\nexports.checkNormalize = checkNormalize;\n/** @hidden */\nvar LogLevels = {\n    debug: 1,\n    default: 2,\n    info: 2,\n    warn: 3,\n    error: 4,\n    off: 5,\n};\n/** @hidden */\nvar LogLevel = LogLevels.default;\n/** @hidden */\nfunction setLogLevel(logLevel) {\n    var level = LogLevels[logLevel];\n    if (level == null) {\n        warn('invliad log level - ' + logLevel);\n        return;\n    }\n    LogLevel = level;\n}\nexports.setLogLevel = setLogLevel;\n/** @hidden */\nfunction log(logLevel, args) {\n    if (LogLevel > LogLevels[logLevel]) {\n        return;\n    }\n    console.log.apply(console, args);\n}\n/** @hidden */\nfunction warn() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log('warn', args);\n}\nexports.warn = warn;\n/** @hidden */\nfunction info() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log('info', args);\n}\nexports.info = info;\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}