{"ast":null,"code":"var _jsxFileName = \"/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BridgeSDK, TOKEN, EXCHANGE_MODE, STATUS, NETWORK_TYPE } from 'bridge-sdk';\nimport * as configs from 'bridge-sdk/lib/configs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [metamaskAddress, setMetamaskAddress] = useState();\n  useEffect(() => {\n    detectEthereumProvider().then(provider => {\n      try {\n        // @ts-ignore\n        if (provider !== window.ethereum) {\n          console.error('Do you have multiple wallets installed?');\n        }\n\n        if (!provider) {\n          alert('Metamask not found');\n        }\n\n        provider.on('accountsChanged', accounts => setMetamaskAddress(accounts[0]));\n        provider.on('disconnect', () => {\n          setMetamaskAddress('');\n        });\n        provider.request({\n          method: 'eth_requestAccounts'\n        }).then(async accounts => {\n          setMetamaskAddress(accounts[0]);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }, []);\n\n  const sendTokens = async () => {\n    const bridgeSDK = new BridgeSDK({\n      logLevel: 2\n    }); // 2 - full logs, 1 - only success & errors, 0 - logs off\n\n    await bridgeSDK.init(configs.testnet);\n    await bridgeSDK.setUseMetamask(true);\n    let operationId; // display operation status\n\n    let intervalId = setInterval(async () => {\n      if (operationId) {\n        const operation = await bridgeSDK.api.getOperation(operationId);\n        console.log(operation.status);\n        console.log('Action: ', operation.actions.filter(a => a.status === STATUS.IN_PROGRESS));\n\n        if (operation.status !== STATUS.IN_PROGRESS) {\n          clearInterval(intervalId);\n        }\n      }\n    }, 4000);\n\n    try {\n      await bridgeSDK.sendToken({\n        type: EXCHANGE_MODE.ETH_TO_ONE,\n        network: NETWORK_TYPE.ETHEREUM,\n        token: TOKEN.BUSD,\n        amount: 2,\n        ethAddress: metamaskAddress,\n        oneAddress: 'one1we0fmuz9wdncqljwkpgj79k49cp4jrt5hpy49j'\n      }, id => operationId = id);\n    } catch (e) {\n      console.log('Error: ', e.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: '#dedede',\n      width: '100vw',\n      height: '100vh',\n      padding: '100px 0'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 600,\n        margin: '0 auto'\n      },\n      children: [\"Your metamask address: \", metamaskAddress, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendTokens(),\n        children: \"Send tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"u090Eu6URv4U2lRRRihdK+ts/+E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/src/App.js"],"names":["React","useEffect","useState","detectEthereumProvider","BridgeSDK","TOKEN","EXCHANGE_MODE","STATUS","NETWORK_TYPE","configs","App","metamaskAddress","setMetamaskAddress","then","provider","window","ethereum","console","error","alert","on","accounts","request","method","e","sendTokens","bridgeSDK","logLevel","init","testnet","setUseMetamask","operationId","intervalId","setInterval","operation","api","getOperation","log","status","actions","filter","a","IN_PROGRESS","clearInterval","sendToken","type","ETH_TO_ONE","network","ETHEREUM","token","BUSD","amount","ethAddress","oneAddress","id","message","background","width","height","padding","maxWidth","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport { BridgeSDK, TOKEN, EXCHANGE_MODE, STATUS, NETWORK_TYPE } from 'bridge-sdk'\nimport * as configs from 'bridge-sdk/lib/configs';\n\nconst App = () => {\n  const [metamaskAddress, setMetamaskAddress] = useState()\n\n  useEffect(() => {\n    detectEthereumProvider().then((provider) => {\n      try {\n        // @ts-ignore\n        if (provider !== window.ethereum) {\n          console.error('Do you have multiple wallets installed?')\n        }\n\n        if (!provider) {\n          alert('Metamask not found')\n        }\n\n        provider.on('accountsChanged', (accounts) =>\n            setMetamaskAddress(accounts[0])\n        )\n\n        provider.on('disconnect', () => {\n            setMetamaskAddress('')\n        })\n\n        provider\n            .request({ method: 'eth_requestAccounts' })\n            .then(async (accounts) => {\n                setMetamaskAddress(accounts[0])\n            })\n      } catch (e) {\n        console.error(e)\n      }\n    })\n  }, [])\n\n  const sendTokens = async () => {\n      const bridgeSDK = new BridgeSDK({ logLevel: 2 }); // 2 - full logs, 1 - only success & errors, 0 - logs off\n\n      await bridgeSDK.init(configs.testnet);\n\n      await bridgeSDK.setUseMetamask(true);\n\n      let operationId;\n\n      // display operation status\n      let intervalId = setInterval(async () => {\n          if (operationId) {\n              const operation = await bridgeSDK.api.getOperation(operationId);\n\n              console.log(operation.status);\n              console.log(\n                'Action: ',\n                operation.actions.filter(a => a.status === STATUS.IN_PROGRESS)\n              );\n\n              if (operation.status !== STATUS.IN_PROGRESS) {\n                  clearInterval(intervalId);\n              }\n          }\n      }, 4000);\n\n      try {\n          await bridgeSDK.sendToken(\n              {\n                  type: EXCHANGE_MODE.ETH_TO_ONE,\n                  network: NETWORK_TYPE.ETHEREUM,\n                  token: TOKEN.BUSD,\n                  amount: 2,\n                  ethAddress: metamaskAddress,\n                  oneAddress: 'one1we0fmuz9wdncqljwkpgj79k49cp4jrt5hpy49j',\n              },\n              id => (operationId = id)\n          );\n      } catch (e) {\n          console.log('Error: ', e.message);\n      }\n  }\n\n  return (\n      <div\n          style={{\n            background: '#dedede',\n            width: '100vw',\n            height: '100vh',\n            padding: '100px 0'\n          }}\n      >\n        <div\n            style={{\n              maxWidth: 600,\n              margin: '0 auto'\n            }}\n        >\n            Your metamask address: {metamaskAddress}\n            <button onClick={() => sendTokens()}>Send tokens</button>\n        </div>\n      </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}