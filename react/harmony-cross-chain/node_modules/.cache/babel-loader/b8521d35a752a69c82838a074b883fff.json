{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethToOne = void 0;\n\nconst interfaces_1 = require(\"../interfaces\");\n\nconst logs_1 = require(\"../utils/logs\");\n\nconst operation_helpers_1 = require(\"../operation-helpers\");\n\nexports.ethToOne = async (api, operationParams, ethMethods, prefix, maxWaitingTime) => {\n  let operation = await api.getOperation(operationParams.id);\n  const approveEthManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveEthManger);\n\n  if (approveEthManger && approveEthManger.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'approveEthManger'\n    });\n    const res = await ethMethods.approveEthManger(operationParams.amount, hash => operation_helpers_1.confirmCallback(api, hash, approveEthManger.type, operation.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'approveEthManger'\n    });\n  }\n\n  operation = await api.getOperation(operationParams.id);\n  const lockToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.lockToken);\n\n  if (lockToken && lockToken.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'lockToken'\n    });\n    const res = await ethMethods.lockToken(operationParams.oneAddress, operationParams.amount, hash => operation_helpers_1.confirmCallback(api, hash, lockToken.type, operation.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'lockToken'\n    });\n  }\n\n  const lockTokenAction = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.lockToken, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(lockTokenAction, prefix, interfaces_1.ACTION_TYPE.lockToken)) {\n    return false;\n  }\n\n  const waitingBlockNumber = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.waitingBlockNumber, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(waitingBlockNumber, prefix, interfaces_1.ACTION_TYPE.waitingBlockNumber)) {\n    return false;\n  }\n\n  const mintToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.mintToken, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(mintToken, prefix, interfaces_1.ACTION_TYPE.mintToken)) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operations/ethToOne.js"],"names":["Object","defineProperty","exports","value","ethToOne","interfaces_1","require","logs_1","operation_helpers_1","api","operationParams","ethMethods","prefix","maxWaitingTime","operation","getOperation","id","approveEthManger","getActionByType","ACTION_TYPE","status","STATUS","WAITING","logger","pending","message","res","amount","hash","confirmCallback","type","info","success","lockToken","oneAddress","lockTokenAction","waitAction","checkStatus","waitingBlockNumber","mintToken"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,sBAAD,CAAnC;;AACAJ,OAAO,CAACE,QAAR,GAAmB,OAAOK,GAAP,EAAYC,eAAZ,EAA6BC,UAA7B,EAAyCC,MAAzC,EAAiDC,cAAjD,KAAoE;AACnF,MAAIC,SAAS,GAAG,MAAML,GAAG,CAACM,YAAJ,CAAiBL,eAAe,CAACM,EAAjC,CAAtB;AACA,QAAMC,gBAAgB,GAAGT,mBAAmB,CAACU,eAApB,CAAoCJ,SAApC,EAA+CT,YAAY,CAACc,WAAb,CAAyBF,gBAAxE,CAAzB;;AACA,MAAIA,gBAAgB,IAAIA,gBAAgB,CAACG,MAAjB,KAA4Bf,YAAY,CAACgB,MAAb,CAAoBC,OAAxE,EAAiF;AAC7Ef,IAAAA,MAAM,CAACgB,MAAP,CAAcC,OAAd,CAAsB;AAAEZ,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE;AAAnB,KAAtB;AACA,UAAMC,GAAG,GAAG,MAAMf,UAAU,CAACM,gBAAX,CAA4BP,eAAe,CAACiB,MAA5C,EAAqDC,IAAD,IAAUpB,mBAAmB,CAACqB,eAApB,CAAoCpB,GAApC,EAAyCmB,IAAzC,EAA+CX,gBAAgB,CAACa,IAAhE,EAAsEhB,SAAS,CAACE,EAAhF,CAA9D,CAAlB;AACAT,IAAAA,MAAM,CAACgB,MAAP,CAAcQ,IAAd,CAAmB;AAAEnB,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE,aAAaC,GAAG,CAACN;AAApC,KAAnB;AACAb,IAAAA,MAAM,CAACgB,MAAP,CAAcS,OAAd,CAAsB;AAAEpB,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE;AAAnB,KAAtB;AACH;;AACDX,EAAAA,SAAS,GAAG,MAAML,GAAG,CAACM,YAAJ,CAAiBL,eAAe,CAACM,EAAjC,CAAlB;AACA,QAAMiB,SAAS,GAAGzB,mBAAmB,CAACU,eAApB,CAAoCJ,SAApC,EAA+CT,YAAY,CAACc,WAAb,CAAyBc,SAAxE,CAAlB;;AACA,MAAIA,SAAS,IAAIA,SAAS,CAACb,MAAV,KAAqBf,YAAY,CAACgB,MAAb,CAAoBC,OAA1D,EAAmE;AAC/Df,IAAAA,MAAM,CAACgB,MAAP,CAAcC,OAAd,CAAsB;AAAEZ,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE;AAAnB,KAAtB;AACA,UAAMC,GAAG,GAAG,MAAMf,UAAU,CAACsB,SAAX,CAAqBvB,eAAe,CAACwB,UAArC,EAAiDxB,eAAe,CAACiB,MAAjE,EAA0EC,IAAD,IAAUpB,mBAAmB,CAACqB,eAApB,CAAoCpB,GAApC,EAAyCmB,IAAzC,EAA+CK,SAAS,CAACH,IAAzD,EAA+DhB,SAAS,CAACE,EAAzE,CAAnF,CAAlB;AACAT,IAAAA,MAAM,CAACgB,MAAP,CAAcQ,IAAd,CAAmB;AAAEnB,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE,aAAaC,GAAG,CAACN;AAApC,KAAnB;AACAb,IAAAA,MAAM,CAACgB,MAAP,CAAcS,OAAd,CAAsB;AAAEpB,MAAAA,MAAF;AAAUa,MAAAA,OAAO,EAAE;AAAnB,KAAtB;AACH;;AACD,QAAMU,eAAe,GAAG,MAAM3B,mBAAmB,CAAC4B,UAApB,CAA+B3B,GAA/B,EAAoCC,eAAe,CAACM,EAApD,EAAwDX,YAAY,CAACc,WAAb,CAAyBc,SAAjF,EAA4FpB,cAA5F,EAA4GD,MAA5G,CAA9B;;AACA,MAAI,CAACJ,mBAAmB,CAAC6B,WAApB,CAAgCF,eAAhC,EAAiDvB,MAAjD,EAAyDP,YAAY,CAACc,WAAb,CAAyBc,SAAlF,CAAL,EAAmG;AAC/F,WAAO,KAAP;AACH;;AACD,QAAMK,kBAAkB,GAAG,MAAM9B,mBAAmB,CAAC4B,UAApB,CAA+B3B,GAA/B,EAAoCC,eAAe,CAACM,EAApD,EAAwDX,YAAY,CAACc,WAAb,CAAyBmB,kBAAjF,EAAqGzB,cAArG,EAAqHD,MAArH,CAAjC;;AACA,MAAI,CAACJ,mBAAmB,CAAC6B,WAApB,CAAgCC,kBAAhC,EAAoD1B,MAApD,EAA4DP,YAAY,CAACc,WAAb,CAAyBmB,kBAArF,CAAL,EAA+G;AAC3G,WAAO,KAAP;AACH;;AACD,QAAMC,SAAS,GAAG,MAAM/B,mBAAmB,CAAC4B,UAApB,CAA+B3B,GAA/B,EAAoCC,eAAe,CAACM,EAApD,EAAwDX,YAAY,CAACc,WAAb,CAAyBoB,SAAjF,EAA4F1B,cAA5F,EAA4GD,MAA5G,CAAxB;;AACA,MAAI,CAACJ,mBAAmB,CAAC6B,WAApB,CAAgCE,SAAhC,EAA2C3B,MAA3C,EAAmDP,YAAY,CAACc,WAAb,CAAyBoB,SAA5E,CAAL,EAA6F;AACzF,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CA9BD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethToOne = void 0;\nconst interfaces_1 = require(\"../interfaces\");\nconst logs_1 = require(\"../utils/logs\");\nconst operation_helpers_1 = require(\"../operation-helpers\");\nexports.ethToOne = async (api, operationParams, ethMethods, prefix, maxWaitingTime) => {\n    let operation = await api.getOperation(operationParams.id);\n    const approveEthManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveEthManger);\n    if (approveEthManger && approveEthManger.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'approveEthManger' });\n        const res = await ethMethods.approveEthManger(operationParams.amount, (hash) => operation_helpers_1.confirmCallback(api, hash, approveEthManger.type, operation.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'approveEthManger' });\n    }\n    operation = await api.getOperation(operationParams.id);\n    const lockToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.lockToken);\n    if (lockToken && lockToken.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'lockToken' });\n        const res = await ethMethods.lockToken(operationParams.oneAddress, operationParams.amount, (hash) => operation_helpers_1.confirmCallback(api, hash, lockToken.type, operation.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'lockToken' });\n    }\n    const lockTokenAction = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.lockToken, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(lockTokenAction, prefix, interfaces_1.ACTION_TYPE.lockToken)) {\n        return false;\n    }\n    const waitingBlockNumber = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.waitingBlockNumber, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(waitingBlockNumber, prefix, interfaces_1.ACTION_TYPE.waitingBlockNumber)) {\n        return false;\n    }\n    const mintToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.mintToken, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(mintToken, prefix, interfaces_1.ACTION_TYPE.mintToken)) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}