{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar types_1 = require(\"./types\");\n\nvar utils_2 = require(\"./utils\");\n\nvar TransactionBase = function () {\n  function TransactionBase(messenger, txStatus) {\n    this.blockNumbers = [];\n    this.confirmations = 0;\n    this.confirmationCheck = 0;\n    this.cxStatus = types_1.TxStatus.INTIALIZED;\n    this.cxBlockNumbers = [];\n    this.cxConfirmations = 0;\n    this.cxConfirmationCheck = 0;\n    this.messenger = messenger;\n    this.txStatus = txStatus;\n    this.emitter = new network_1.Emitter();\n    this.id = '0x';\n    this.shardID = this.messenger.currentShard;\n  }\n\n  TransactionBase.normalizeAddress = function (address) {\n    if (address === '0x') {\n      return '0x';\n    } else if (crypto_1.HarmonyAddress.isValidChecksum(address) || crypto_1.HarmonyAddress.isValidBech32(address) || crypto_1.HarmonyAddress.isValidBech32TestNet(address)) {\n      return crypto_1.getAddress(address).checksum;\n    } else {\n      throw new Error(\"Address format is not supported\");\n    }\n  };\n\n  TransactionBase.prototype.setMessenger = function (messenger) {\n    this.messenger = messenger;\n  };\n\n  TransactionBase.prototype.setTxStatus = function (txStatus) {\n    this.txStatus = txStatus;\n  };\n\n  TransactionBase.prototype.getTxStatus = function () {\n    return this.txStatus;\n  };\n\n  TransactionBase.prototype.setCxStatus = function (cxStatus) {\n    this.cxStatus = cxStatus;\n  };\n\n  TransactionBase.prototype.getCxStatus = function () {\n    return this.cxStatus;\n  }; // get status\n\n\n  TransactionBase.prototype.isInitialized = function () {\n    return this.getTxStatus() === types_1.TxStatus.INTIALIZED;\n  };\n\n  TransactionBase.prototype.isSigned = function () {\n    return this.getTxStatus() === types_1.TxStatus.SIGNED;\n  };\n\n  TransactionBase.prototype.isPending = function () {\n    return this.getTxStatus() === types_1.TxStatus.PENDING;\n  };\n\n  TransactionBase.prototype.isRejected = function () {\n    return this.getTxStatus() === types_1.TxStatus.REJECTED;\n  };\n\n  TransactionBase.prototype.isConfirmed = function () {\n    return this.getTxStatus() === types_1.TxStatus.CONFIRMED;\n  };\n\n  TransactionBase.prototype.isCxPending = function () {\n    return this.getCxStatus() === types_1.TxStatus.PENDING;\n  };\n\n  TransactionBase.prototype.isCxRejected = function () {\n    return this.getCxStatus() === types_1.TxStatus.REJECTED;\n  };\n\n  TransactionBase.prototype.isCxConfirmed = function () {\n    return this.getCxStatus() === types_1.TxStatus.CONFIRMED;\n  };\n\n  TransactionBase.prototype.observed = function () {\n    return this.emitter;\n  };\n\n  TransactionBase.prototype.trackTx = function (txHash, shardID) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var res, currentBlock, currentBlock;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.messenger) {\n              throw new Error('Messenger not found');\n            }\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetTransactionReceipt, txHash, this.messenger.chainType, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID)];\n\n          case 1:\n            res = _a.sent();\n            if (!(res.isResult() && res.result !== null)) return [3\n            /*break*/\n            , 5];\n            this.receipt = res.result;\n            this.emitReceipt(this.receipt);\n            this.id = res.result.transactionHash;\n            this.confirmations += 1;\n            if (!this.receipt) return [3\n            /*break*/\n            , 2];\n\n            if (this.receipt.status && this.receipt.status === '0x1') {\n              this.receipt.byzantium = true;\n              this.txStatus = types_1.TxStatus.CONFIRMED;\n            } else if (this.receipt.status && this.receipt.status === '0x0') {\n              this.receipt.byzantium = true;\n              this.txStatus = types_1.TxStatus.REJECTED;\n            } else if (this.receipt.status === undefined && this.receipt.root) {\n              this.receipt.byzantium = false;\n              this.txStatus = types_1.TxStatus.CONFIRMED;\n            }\n\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            this.txStatus = types_1.TxStatus.PENDING;\n            return [4\n            /*yield*/\n            , this.getBlockNumber(shardID)];\n\n          case 3:\n            currentBlock = _a.sent();\n            this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n            this.confirmationCheck += 1;\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            this.txStatus = types_1.TxStatus.PENDING;\n            return [4\n            /*yield*/\n            , this.getBlockNumber(shardID)];\n\n          case 6:\n            currentBlock = _a.sent();\n            this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n            this.confirmationCheck += 1;\n            return [2\n            /*return*/\n            , false];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.txConfirm = function (txHash, maxAttempts, interval, shardID) {\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    if (interval === void 0) {\n      interval = 1000;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var oldBlock, checkBlock, attempt, newBlock, nextBlock, err_1, result, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.messenger.provider instanceof network_1.HttpProvider)) return [3\n            /*break*/\n            , 13];\n            this.txStatus = types_1.TxStatus.PENDING;\n            return [4\n            /*yield*/\n            , this.getBlockNumber(shardID)];\n\n          case 1:\n            oldBlock = _a.sent();\n            checkBlock = oldBlock;\n            attempt = 0;\n            _a.label = 2;\n\n          case 2:\n            if (!(attempt < maxAttempts)) return [3\n            /*break*/\n            , 12];\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.getBlockNumber(shardID)];\n\n          case 4:\n            newBlock = _a.sent();\n            nextBlock = checkBlock.add(new crypto_1.BN(attempt === 0 ? attempt : 1));\n            if (!newBlock.gte(nextBlock)) return [3\n            /*break*/\n            , 6];\n            checkBlock = newBlock;\n            this.emitTrack({\n              txHash: txHash,\n              attempt: attempt,\n              currentBlock: checkBlock.toString(),\n              shardID: shardID\n            });\n            return [4\n            /*yield*/\n            , this.trackTx(txHash, shardID)];\n\n          case 5:\n            if (_a.sent()) {\n              this.emitConfirm(this.txStatus);\n              return [2\n              /*return*/\n              , this];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n            _a.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            err_1 = _a.sent();\n            this.txStatus = types_1.TxStatus.REJECTED;\n            this.emitConfirm(this.txStatus);\n            throw err_1;\n\n          case 9:\n            if (!(attempt + 1 < maxAttempts)) return [3\n            /*break*/\n            , 11]; // await sleep(interval * attempt);\n\n            return [4\n            /*yield*/\n            , utils_2.sleep(interval)];\n\n          case 10:\n            // await sleep(interval * attempt);\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            attempt += 1;\n            return [3\n            /*break*/\n            , 2];\n\n          case 12:\n            this.txStatus = types_1.TxStatus.REJECTED;\n            this.emitConfirm(this.txStatus);\n            throw new Error(\"The transaction is still not confirmed after \" + maxAttempts + \" attempts.\");\n\n          case 13:\n            _a.trys.push([13, 18,, 19]);\n\n            return [4\n            /*yield*/\n            , this.trackTx(txHash, shardID)];\n\n          case 14:\n            if (!_a.sent()) return [3\n            /*break*/\n            , 15];\n            this.emitConfirm(this.txStatus);\n            return [2\n            /*return*/\n            , this];\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.socketConfirm(txHash, maxAttempts, shardID)];\n\n          case 16:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            error_1 = _a.sent();\n            this.txStatus = types_1.TxStatus.REJECTED;\n            this.emitConfirm(this.txStatus);\n            throw new Error(\"The transaction is still not confirmed after \" + maxAttempts * interval + \" mil seconds.\");\n\n          case 19:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.socketConfirm = function (txHash, maxAttempts, shardID) {\n    var _this = this;\n\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    return new Promise(function (resolve, reject) {\n      var newHeads = Promise.resolve(new network_1.NewHeaders(_this.messenger, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID));\n      newHeads.then(function (p) {\n        p.onData(function (data) {\n          return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var blockNumber;\n            return tslib_1.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  blockNumber = this.messenger.chainPrefix === 'hmy' ? data.params.result.Header.number : data.params.result.number;\n                  this.emitTrack({\n                    txHash: txHash,\n                    attempt: this.confirmationCheck,\n                    currentBlock: utils_1.hexToNumber(blockNumber),\n                    shardID: shardID\n                  });\n                  if (!!this.blockNumbers.includes(blockNumber)) return [3\n                  /*break*/\n                  , 5];\n                  return [4\n                  /*yield*/\n                  , this.trackTx(txHash, shardID)];\n\n                case 1:\n                  if (!_a.sent()) return [3\n                  /*break*/\n                  , 3];\n                  this.emitConfirm(this.txStatus);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 2:\n                  _a.sent();\n\n                  resolve(this);\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 3:\n                  if (!(this.confirmationCheck === maxAttempts)) return [3\n                  /*break*/\n                  , 5];\n                  this.txStatus = types_1.TxStatus.REJECTED;\n                  this.emitConfirm(this.txStatus);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 4:\n                  _a.sent();\n\n                  resolve(this);\n                  _a.label = 5;\n\n                case 5:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }).onError(function (error) {\n          return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  this.txStatus = types_1.TxStatus.REJECTED;\n                  this.emitConfirm(this.txStatus);\n                  this.emitError(error);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 1:\n                  _a.sent();\n\n                  reject(error);\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        });\n      });\n    });\n  };\n\n  TransactionBase.prototype.emitTransactionHash = function (transactionHash) {\n    this.emitter.emit(utils_2.TransactionEvents.transactionHash, transactionHash);\n  };\n\n  TransactionBase.prototype.emitReceipt = function (receipt) {\n    this.emitter.emit(utils_2.TransactionEvents.receipt, receipt);\n  };\n\n  TransactionBase.prototype.emitError = function (error) {\n    this.emitter.emit(utils_2.TransactionEvents.error, error);\n  };\n\n  TransactionBase.prototype.emitConfirm = function (data) {\n    this.emitter.emit(utils_2.TransactionEvents.confirmation, data);\n  };\n\n  TransactionBase.prototype.emitTrack = function (data) {\n    this.emitter.emit(utils_2.TransactionEvents.track, data);\n  };\n\n  TransactionBase.prototype.emitCxReceipt = function (receipt) {\n    this.emitter.emit(utils_2.TransactionEvents.cxReceipt, receipt);\n  };\n\n  TransactionBase.prototype.emitCxConfirm = function (data) {\n    this.emitter.emit(utils_2.TransactionEvents.cxConfirmation, data);\n  };\n\n  TransactionBase.prototype.emitCxTrack = function (data) {\n    this.emitter.emit(utils_2.TransactionEvents.cxTrack, data);\n  };\n\n  TransactionBase.prototype.getBlockNumber = function (shardID) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var currentBlock, error_2;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.BlockNumber, [], this.messenger.chainPrefix, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID)];\n\n          case 1:\n            currentBlock = _a.sent();\n\n            if (currentBlock.isError()) {\n              throw currentBlock.message;\n            }\n\n            return [2\n            /*return*/\n            , new crypto_1.BN(currentBlock.result.replace('0x', ''), 'hex')];\n\n          case 2:\n            error_2 = _a.sent();\n            throw error_2;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.getBlockByNumber = function (blockNumber) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var block, error_3;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetBlockByNumber, [blockNumber, true], this.messenger.chainPrefix, typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID)];\n\n          case 1:\n            block = _a.sent();\n\n            if (block.isError()) {\n              throw block.message;\n            }\n\n            return [2\n            /*return*/\n            , block.result];\n\n          case 2:\n            error_3 = _a.sent();\n            throw error_3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.cxConfirm = function (txHash, maxAttempts, interval, toShardID) {\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    if (interval === void 0) {\n      interval = 1000;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var oldBlock, checkBlock, attempt, newBlock, nextBlock, err_2, result, error_4;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.messenger.provider instanceof network_1.HttpProvider)) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , this.getBlockNumber(toShardID)];\n\n          case 1:\n            oldBlock = _a.sent();\n            checkBlock = oldBlock;\n            attempt = 0;\n            _a.label = 2;\n\n          case 2:\n            if (!(attempt < maxAttempts)) return [3\n            /*break*/\n            , 12];\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.getBlockNumber(toShardID)];\n\n          case 4:\n            newBlock = _a.sent();\n            nextBlock = checkBlock.add(new crypto_1.BN(attempt === 0 ? attempt : 1));\n            if (!newBlock.gte(nextBlock)) return [3\n            /*break*/\n            , 6];\n            checkBlock = newBlock;\n            this.emitCxTrack({\n              txHash: txHash,\n              attempt: attempt,\n              currentBlock: checkBlock.toString(),\n              toShardID: toShardID\n            });\n            return [4\n            /*yield*/\n            , this.trackCx(txHash, toShardID)];\n\n          case 5:\n            if (_a.sent()) {\n              this.emitCxConfirm(this.cxStatus);\n              return [2\n              /*return*/\n              , this];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n            _a.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            err_2 = _a.sent();\n            this.cxStatus = types_1.TxStatus.REJECTED;\n            this.emitCxConfirm(this.cxStatus);\n            throw err_2;\n\n          case 9:\n            if (!(attempt + 1 < maxAttempts)) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , utils_2.sleep(interval)];\n\n          case 10:\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            attempt += 1;\n            return [3\n            /*break*/\n            , 2];\n\n          case 12:\n            this.cxStatus = types_1.TxStatus.REJECTED;\n            this.emitCxConfirm(this.cxStatus);\n            throw new Error(\"The transaction is still not confirmed after \" + maxAttempts + \" attempts.\");\n\n          case 13:\n            _a.trys.push([13, 18,, 19]);\n\n            return [4\n            /*yield*/\n            , this.trackCx(txHash, toShardID)];\n\n          case 14:\n            if (!_a.sent()) return [3\n            /*break*/\n            , 15];\n            this.emitCxConfirm(this.cxStatus);\n            return [2\n            /*return*/\n            , this];\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.socketCxConfirm(txHash, maxAttempts, toShardID)];\n\n          case 16:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            error_4 = _a.sent();\n            this.cxStatus = types_1.TxStatus.REJECTED;\n            this.emitCxConfirm(this.cxStatus);\n            throw new Error(\"The transaction is still not confirmed after \" + maxAttempts * interval + \" mil seconds.\");\n\n          case 19:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.trackCx = function (txHash, toShardID) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var res, currentBlock;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.messenger) {\n              throw new Error('Messenger not found');\n            }\n\n            return [4\n            /*yield*/\n            , this.messenger.send(network_1.RPCMethod.GetCXReceiptByHash, txHash, this.messenger.chainPrefix, typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID)];\n\n          case 1:\n            res = _a.sent();\n            if (!(res.isResult() && res.result !== null)) return [3\n            /*break*/\n            , 2];\n            this.emitCxReceipt(res.result);\n            this.cxStatus = types_1.TxStatus.CONFIRMED;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getBlockNumber(toShardID)];\n\n          case 3:\n            currentBlock = _a.sent();\n            this.cxBlockNumbers.push('0x' + currentBlock.toString('hex'));\n            this.cxConfirmationCheck += 1;\n            this.cxStatus = types_1.TxStatus.PENDING;\n            return [2\n            /*return*/\n            , false];\n        }\n      });\n    });\n  };\n\n  TransactionBase.prototype.socketCxConfirm = function (txHash, maxAttempts, toShardID) {\n    var _this = this;\n\n    if (maxAttempts === void 0) {\n      maxAttempts = 20;\n    }\n\n    return new Promise(function (resolve, reject) {\n      var newHeads = Promise.resolve(new network_1.NewHeaders(_this.messenger, typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID));\n      newHeads.then(function (p) {\n        p.onData(function (data) {\n          return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var blockNumber;\n            return tslib_1.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  blockNumber = this.messenger.chainPrefix === 'hmy' ? data.params.result.Header.number : data.params.result.number;\n                  this.emitCxTrack({\n                    txHash: txHash,\n                    attempt: this.cxConfirmationCheck,\n                    currentBlock: utils_1.hexToNumber(blockNumber),\n                    toShardID: toShardID\n                  });\n                  if (!!this.blockNumbers.includes(blockNumber)) return [3\n                  /*break*/\n                  , 5];\n                  return [4\n                  /*yield*/\n                  , this.trackCx(txHash, toShardID)];\n\n                case 1:\n                  if (!_a.sent()) return [3\n                  /*break*/\n                  , 3];\n                  this.emitCxConfirm(this.cxStatus);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 2:\n                  _a.sent();\n\n                  resolve(this);\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 3:\n                  if (!(this.cxConfirmationCheck === maxAttempts)) return [3\n                  /*break*/\n                  , 5];\n                  this.cxStatus = types_1.TxStatus.REJECTED;\n                  this.emitCxConfirm(this.cxStatus);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 4:\n                  _a.sent();\n\n                  resolve(this);\n                  _a.label = 5;\n\n                case 5:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }).onError(function (error) {\n          return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  this.cxStatus = types_1.TxStatus.REJECTED;\n                  this.emitCxConfirm(this.cxStatus);\n                  this.emitError(error);\n                  return [4\n                  /*yield*/\n                  , p.unsubscribe()];\n\n                case 1:\n                  _a.sent();\n\n                  reject(error);\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        });\n      });\n    });\n  };\n\n  return TransactionBase;\n}();\n\nexports.TransactionBase = TransactionBase;","map":{"version":3,"sources":["../src/transactionBase.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionBase = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar network_1 = require(\"@harmony-js/network\");\nvar types_1 = require(\"./types\");\nvar utils_2 = require(\"./utils\");\nvar TransactionBase = /** @class */ (function () {\n    function TransactionBase(messenger, txStatus) {\n        this.blockNumbers = [];\n        this.confirmations = 0;\n        this.confirmationCheck = 0;\n        this.cxStatus = types_1.TxStatus.INTIALIZED;\n        this.cxBlockNumbers = [];\n        this.cxConfirmations = 0;\n        this.cxConfirmationCheck = 0;\n        this.messenger = messenger;\n        this.txStatus = txStatus;\n        this.emitter = new network_1.Emitter();\n        this.id = '0x';\n        this.shardID = this.messenger.currentShard;\n    }\n    TransactionBase.normalizeAddress = function (address) {\n        if (address === '0x') {\n            return '0x';\n        }\n        else if (crypto_1.HarmonyAddress.isValidChecksum(address) ||\n            crypto_1.HarmonyAddress.isValidBech32(address) ||\n            crypto_1.HarmonyAddress.isValidBech32TestNet(address)) {\n            return crypto_1.getAddress(address).checksum;\n        }\n        else {\n            throw new Error(\"Address format is not supported\");\n        }\n    };\n    TransactionBase.prototype.setMessenger = function (messenger) {\n        this.messenger = messenger;\n    };\n    TransactionBase.prototype.setTxStatus = function (txStatus) {\n        this.txStatus = txStatus;\n    };\n    TransactionBase.prototype.getTxStatus = function () {\n        return this.txStatus;\n    };\n    TransactionBase.prototype.setCxStatus = function (cxStatus) {\n        this.cxStatus = cxStatus;\n    };\n    TransactionBase.prototype.getCxStatus = function () {\n        return this.cxStatus;\n    };\n    // get status\n    TransactionBase.prototype.isInitialized = function () {\n        return this.getTxStatus() === types_1.TxStatus.INTIALIZED;\n    };\n    TransactionBase.prototype.isSigned = function () {\n        return this.getTxStatus() === types_1.TxStatus.SIGNED;\n    };\n    TransactionBase.prototype.isPending = function () {\n        return this.getTxStatus() === types_1.TxStatus.PENDING;\n    };\n    TransactionBase.prototype.isRejected = function () {\n        return this.getTxStatus() === types_1.TxStatus.REJECTED;\n    };\n    TransactionBase.prototype.isConfirmed = function () {\n        return this.getTxStatus() === types_1.TxStatus.CONFIRMED;\n    };\n    TransactionBase.prototype.isCxPending = function () {\n        return this.getCxStatus() === types_1.TxStatus.PENDING;\n    };\n    TransactionBase.prototype.isCxRejected = function () {\n        return this.getCxStatus() === types_1.TxStatus.REJECTED;\n    };\n    TransactionBase.prototype.isCxConfirmed = function () {\n        return this.getCxStatus() === types_1.TxStatus.CONFIRMED;\n    };\n    TransactionBase.prototype.observed = function () {\n        return this.emitter;\n    };\n    TransactionBase.prototype.trackTx = function (txHash, shardID) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res, currentBlock, currentBlock;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionReceipt, txHash, this.messenger.chainType, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID)];\n                    case 1:\n                        res = _a.sent();\n                        if (!(res.isResult() && res.result !== null)) return [3 /*break*/, 5];\n                        this.receipt = res.result;\n                        this.emitReceipt(this.receipt);\n                        this.id = res.result.transactionHash;\n                        this.confirmations += 1;\n                        if (!this.receipt) return [3 /*break*/, 2];\n                        if (this.receipt.status && this.receipt.status === '0x1') {\n                            this.receipt.byzantium = true;\n                            this.txStatus = types_1.TxStatus.CONFIRMED;\n                        }\n                        else if (this.receipt.status && this.receipt.status === '0x0') {\n                            this.receipt.byzantium = true;\n                            this.txStatus = types_1.TxStatus.REJECTED;\n                        }\n                        else if (this.receipt.status === undefined && this.receipt.root) {\n                            this.receipt.byzantium = false;\n                            this.txStatus = types_1.TxStatus.CONFIRMED;\n                        }\n                        return [2 /*return*/, true];\n                    case 2:\n                        this.txStatus = types_1.TxStatus.PENDING;\n                        return [4 /*yield*/, this.getBlockNumber(shardID)];\n                    case 3:\n                        currentBlock = _a.sent();\n                        this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n                        this.confirmationCheck += 1;\n                        return [2 /*return*/, false];\n                    case 4: return [3 /*break*/, 7];\n                    case 5:\n                        this.txStatus = types_1.TxStatus.PENDING;\n                        return [4 /*yield*/, this.getBlockNumber(shardID)];\n                    case 6:\n                        currentBlock = _a.sent();\n                        this.blockNumbers.push('0x' + currentBlock.toString('hex'));\n                        this.confirmationCheck += 1;\n                        return [2 /*return*/, false];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.txConfirm = function (txHash, maxAttempts, interval, shardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var oldBlock, checkBlock, attempt, newBlock, nextBlock, err_1, result, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.messenger.provider instanceof network_1.HttpProvider)) return [3 /*break*/, 13];\n                        this.txStatus = types_1.TxStatus.PENDING;\n                        return [4 /*yield*/, this.getBlockNumber(shardID)];\n                    case 1:\n                        oldBlock = _a.sent();\n                        checkBlock = oldBlock;\n                        attempt = 0;\n                        _a.label = 2;\n                    case 2:\n                        if (!(attempt < maxAttempts)) return [3 /*break*/, 12];\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 8, , 9]);\n                        return [4 /*yield*/, this.getBlockNumber(shardID)];\n                    case 4:\n                        newBlock = _a.sent();\n                        nextBlock = checkBlock.add(new crypto_1.BN(attempt === 0 ? attempt : 1));\n                        if (!newBlock.gte(nextBlock)) return [3 /*break*/, 6];\n                        checkBlock = newBlock;\n                        this.emitTrack({\n                            txHash: txHash,\n                            attempt: attempt,\n                            currentBlock: checkBlock.toString(),\n                            shardID: shardID,\n                        });\n                        return [4 /*yield*/, this.trackTx(txHash, shardID)];\n                    case 5:\n                        if (_a.sent()) {\n                            this.emitConfirm(this.txStatus);\n                            return [2 /*return*/, this];\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n                        _a.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        err_1 = _a.sent();\n                        this.txStatus = types_1.TxStatus.REJECTED;\n                        this.emitConfirm(this.txStatus);\n                        throw err_1;\n                    case 9:\n                        if (!(attempt + 1 < maxAttempts)) return [3 /*break*/, 11];\n                        // await sleep(interval * attempt);\n                        return [4 /*yield*/, utils_2.sleep(interval)];\n                    case 10:\n                        // await sleep(interval * attempt);\n                        _a.sent();\n                        _a.label = 11;\n                    case 11:\n                        attempt += 1;\n                        return [3 /*break*/, 2];\n                    case 12:\n                        this.txStatus = types_1.TxStatus.REJECTED;\n                        this.emitConfirm(this.txStatus);\n                        throw new Error(\"The transaction is still not confirmed after \" + maxAttempts + \" attempts.\");\n                    case 13:\n                        _a.trys.push([13, 18, , 19]);\n                        return [4 /*yield*/, this.trackTx(txHash, shardID)];\n                    case 14:\n                        if (!_a.sent()) return [3 /*break*/, 15];\n                        this.emitConfirm(this.txStatus);\n                        return [2 /*return*/, this];\n                    case 15: return [4 /*yield*/, this.socketConfirm(txHash, maxAttempts, shardID)];\n                    case 16:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                    case 17: return [3 /*break*/, 19];\n                    case 18:\n                        error_1 = _a.sent();\n                        this.txStatus = types_1.TxStatus.REJECTED;\n                        this.emitConfirm(this.txStatus);\n                        throw new Error(\"The transaction is still not confirmed after \" + maxAttempts * interval + \" mil seconds.\");\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.socketConfirm = function (txHash, maxAttempts, shardID) {\n        var _this = this;\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        return new Promise(function (resolve, reject) {\n            var newHeads = Promise.resolve(new network_1.NewHeaders(_this.messenger, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID));\n            newHeads.then(function (p) {\n                p.onData(function (data) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var blockNumber;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                blockNumber = this.messenger.chainPrefix === 'hmy'\n                                    ? data.params.result.Header.number\n                                    : data.params.result.number;\n                                this.emitTrack({\n                                    txHash: txHash,\n                                    attempt: this.confirmationCheck,\n                                    currentBlock: utils_1.hexToNumber(blockNumber),\n                                    shardID: shardID,\n                                });\n                                if (!!this.blockNumbers.includes(blockNumber)) return [3 /*break*/, 5];\n                                return [4 /*yield*/, this.trackTx(txHash, shardID)];\n                            case 1:\n                                if (!_a.sent()) return [3 /*break*/, 3];\n                                this.emitConfirm(this.txStatus);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 2:\n                                _a.sent();\n                                resolve(this);\n                                return [3 /*break*/, 5];\n                            case 3:\n                                if (!(this.confirmationCheck === maxAttempts)) return [3 /*break*/, 5];\n                                this.txStatus = types_1.TxStatus.REJECTED;\n                                this.emitConfirm(this.txStatus);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 4:\n                                _a.sent();\n                                resolve(this);\n                                _a.label = 5;\n                            case 5: return [2 /*return*/];\n                        }\n                    });\n                }); }).onError(function (error) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                this.txStatus = types_1.TxStatus.REJECTED;\n                                this.emitConfirm(this.txStatus);\n                                this.emitError(error);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 1:\n                                _a.sent();\n                                reject(error);\n                                return [2 /*return*/];\n                        }\n                    });\n                }); });\n            });\n        });\n    };\n    TransactionBase.prototype.emitTransactionHash = function (transactionHash) {\n        this.emitter.emit(utils_2.TransactionEvents.transactionHash, transactionHash);\n    };\n    TransactionBase.prototype.emitReceipt = function (receipt) {\n        this.emitter.emit(utils_2.TransactionEvents.receipt, receipt);\n    };\n    TransactionBase.prototype.emitError = function (error) {\n        this.emitter.emit(utils_2.TransactionEvents.error, error);\n    };\n    TransactionBase.prototype.emitConfirm = function (data) {\n        this.emitter.emit(utils_2.TransactionEvents.confirmation, data);\n    };\n    TransactionBase.prototype.emitTrack = function (data) {\n        this.emitter.emit(utils_2.TransactionEvents.track, data);\n    };\n    TransactionBase.prototype.emitCxReceipt = function (receipt) {\n        this.emitter.emit(utils_2.TransactionEvents.cxReceipt, receipt);\n    };\n    TransactionBase.prototype.emitCxConfirm = function (data) {\n        this.emitter.emit(utils_2.TransactionEvents.cxConfirmation, data);\n    };\n    TransactionBase.prototype.emitCxTrack = function (data) {\n        this.emitter.emit(utils_2.TransactionEvents.cxTrack, data);\n    };\n    TransactionBase.prototype.getBlockNumber = function (shardID) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentBlock, error_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.BlockNumber, [], this.messenger.chainPrefix, typeof shardID === 'string' ? Number.parseInt(shardID, 10) : shardID)];\n                    case 1:\n                        currentBlock = _a.sent();\n                        if (currentBlock.isError()) {\n                            throw currentBlock.message;\n                        }\n                        return [2 /*return*/, new crypto_1.BN(currentBlock.result.replace('0x', ''), 'hex')];\n                    case 2:\n                        error_2 = _a.sent();\n                        throw error_2;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.getBlockByNumber = function (blockNumber) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var block, error_3;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetBlockByNumber, [blockNumber, true], this.messenger.chainPrefix, typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID)];\n                    case 1:\n                        block = _a.sent();\n                        if (block.isError()) {\n                            throw block.message;\n                        }\n                        return [2 /*return*/, block.result];\n                    case 2:\n                        error_3 = _a.sent();\n                        throw error_3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.cxConfirm = function (txHash, maxAttempts, interval, toShardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var oldBlock, checkBlock, attempt, newBlock, nextBlock, err_2, result, error_4;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.messenger.provider instanceof network_1.HttpProvider)) return [3 /*break*/, 13];\n                        return [4 /*yield*/, this.getBlockNumber(toShardID)];\n                    case 1:\n                        oldBlock = _a.sent();\n                        checkBlock = oldBlock;\n                        attempt = 0;\n                        _a.label = 2;\n                    case 2:\n                        if (!(attempt < maxAttempts)) return [3 /*break*/, 12];\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 8, , 9]);\n                        return [4 /*yield*/, this.getBlockNumber(toShardID)];\n                    case 4:\n                        newBlock = _a.sent();\n                        nextBlock = checkBlock.add(new crypto_1.BN(attempt === 0 ? attempt : 1));\n                        if (!newBlock.gte(nextBlock)) return [3 /*break*/, 6];\n                        checkBlock = newBlock;\n                        this.emitCxTrack({\n                            txHash: txHash,\n                            attempt: attempt,\n                            currentBlock: checkBlock.toString(),\n                            toShardID: toShardID,\n                        });\n                        return [4 /*yield*/, this.trackCx(txHash, toShardID)];\n                    case 5:\n                        if (_a.sent()) {\n                            this.emitCxConfirm(this.cxStatus);\n                            return [2 /*return*/, this];\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n                        _a.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        err_2 = _a.sent();\n                        this.cxStatus = types_1.TxStatus.REJECTED;\n                        this.emitCxConfirm(this.cxStatus);\n                        throw err_2;\n                    case 9:\n                        if (!(attempt + 1 < maxAttempts)) return [3 /*break*/, 11];\n                        return [4 /*yield*/, utils_2.sleep(interval)];\n                    case 10:\n                        _a.sent();\n                        _a.label = 11;\n                    case 11:\n                        attempt += 1;\n                        return [3 /*break*/, 2];\n                    case 12:\n                        this.cxStatus = types_1.TxStatus.REJECTED;\n                        this.emitCxConfirm(this.cxStatus);\n                        throw new Error(\"The transaction is still not confirmed after \" + maxAttempts + \" attempts.\");\n                    case 13:\n                        _a.trys.push([13, 18, , 19]);\n                        return [4 /*yield*/, this.trackCx(txHash, toShardID)];\n                    case 14:\n                        if (!_a.sent()) return [3 /*break*/, 15];\n                        this.emitCxConfirm(this.cxStatus);\n                        return [2 /*return*/, this];\n                    case 15: return [4 /*yield*/, this.socketCxConfirm(txHash, maxAttempts, toShardID)];\n                    case 16:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                    case 17: return [3 /*break*/, 19];\n                    case 18:\n                        error_4 = _a.sent();\n                        this.cxStatus = types_1.TxStatus.REJECTED;\n                        this.emitCxConfirm(this.cxStatus);\n                        throw new Error(\"The transaction is still not confirmed after \" + maxAttempts * interval + \" mil seconds.\");\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.trackCx = function (txHash, toShardID) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res, currentBlock;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetCXReceiptByHash, txHash, this.messenger.chainPrefix, typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID)];\n                    case 1:\n                        res = _a.sent();\n                        if (!(res.isResult() && res.result !== null)) return [3 /*break*/, 2];\n                        this.emitCxReceipt(res.result);\n                        this.cxStatus = types_1.TxStatus.CONFIRMED;\n                        return [2 /*return*/, true];\n                    case 2: return [4 /*yield*/, this.getBlockNumber(toShardID)];\n                    case 3:\n                        currentBlock = _a.sent();\n                        this.cxBlockNumbers.push('0x' + currentBlock.toString('hex'));\n                        this.cxConfirmationCheck += 1;\n                        this.cxStatus = types_1.TxStatus.PENDING;\n                        return [2 /*return*/, false];\n                }\n            });\n        });\n    };\n    TransactionBase.prototype.socketCxConfirm = function (txHash, maxAttempts, toShardID) {\n        var _this = this;\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        return new Promise(function (resolve, reject) {\n            var newHeads = Promise.resolve(new network_1.NewHeaders(_this.messenger, typeof toShardID === 'string' ? Number.parseInt(toShardID, 10) : toShardID));\n            newHeads.then(function (p) {\n                p.onData(function (data) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var blockNumber;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                blockNumber = this.messenger.chainPrefix === 'hmy'\n                                    ? data.params.result.Header.number\n                                    : data.params.result.number;\n                                this.emitCxTrack({\n                                    txHash: txHash,\n                                    attempt: this.cxConfirmationCheck,\n                                    currentBlock: utils_1.hexToNumber(blockNumber),\n                                    toShardID: toShardID,\n                                });\n                                if (!!this.blockNumbers.includes(blockNumber)) return [3 /*break*/, 5];\n                                return [4 /*yield*/, this.trackCx(txHash, toShardID)];\n                            case 1:\n                                if (!_a.sent()) return [3 /*break*/, 3];\n                                this.emitCxConfirm(this.cxStatus);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 2:\n                                _a.sent();\n                                resolve(this);\n                                return [3 /*break*/, 5];\n                            case 3:\n                                if (!(this.cxConfirmationCheck === maxAttempts)) return [3 /*break*/, 5];\n                                this.cxStatus = types_1.TxStatus.REJECTED;\n                                this.emitCxConfirm(this.cxStatus);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 4:\n                                _a.sent();\n                                resolve(this);\n                                _a.label = 5;\n                            case 5: return [2 /*return*/];\n                        }\n                    });\n                }); }).onError(function (error) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                this.cxStatus = types_1.TxStatus.REJECTED;\n                                this.emitCxConfirm(this.cxStatus);\n                                this.emitError(error);\n                                return [4 /*yield*/, p.unsubscribe()];\n                            case 1:\n                                _a.sent();\n                                reject(error);\n                                return [2 /*return*/];\n                        }\n                    });\n                }); });\n            });\n        });\n    };\n    return TransactionBase;\n}());\nexports.TransactionBase = TransactionBase;\n//# sourceMappingURL=transactionBase.js.map"]},"metadata":{},"sourceType":"script"}