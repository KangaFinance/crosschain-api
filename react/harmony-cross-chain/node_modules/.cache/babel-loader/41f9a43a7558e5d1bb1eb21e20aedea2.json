{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectToBrowserWallet = void 0;\n\nexports.connectToBrowserWallet = async (walletExtension, hmy, wallet, addrHex, reject) => {\n  let userAddress = addrHex;\n\n  if (!userAddress) {\n    let {\n      address\n    } = await walletExtension.getAccount();\n    userAddress = hmy.crypto.getAddress(address).checksum;\n  }\n\n  wallet.defaultSigner = userAddress;\n\n  wallet.signTransaction = async tx => {\n    try {\n      tx.from = userAddress;\n      const signTx = await walletExtension.signTransaction(tx);\n      return signTx;\n    } catch (e) {\n      reject(e);\n    }\n\n    return null;\n  };\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/hmy/helpers.js"],"names":["Object","defineProperty","exports","value","connectToBrowserWallet","walletExtension","hmy","wallet","addrHex","reject","userAddress","address","getAccount","crypto","getAddress","checksum","defaultSigner","signTransaction","tx","from","signTx","e"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACAF,OAAO,CAACE,sBAAR,GAAiC,OAAOC,eAAP,EAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,MAA9C,KAAyD;AACtF,MAAIC,WAAW,GAAGF,OAAlB;;AACA,MAAI,CAACE,WAAL,EAAkB;AACd,QAAI;AAAEC,MAAAA;AAAF,QAAc,MAAMN,eAAe,CAACO,UAAhB,EAAxB;AACAF,IAAAA,WAAW,GAAGJ,GAAG,CAACO,MAAJ,CAAWC,UAAX,CAAsBH,OAAtB,EAA+BI,QAA7C;AACH;;AACDR,EAAAA,MAAM,CAACS,aAAP,GAAuBN,WAAvB;;AACAH,EAAAA,MAAM,CAACU,eAAP,GAAyB,MAAOC,EAAP,IAAc;AACnC,QAAI;AACAA,MAAAA,EAAE,CAACC,IAAH,GAAUT,WAAV;AACA,YAAMU,MAAM,GAAG,MAAMf,eAAe,CAACY,eAAhB,CAAgCC,EAAhC,CAArB;AACA,aAAOE,MAAP;AACH,KAJD,CAKA,OAAOC,CAAP,EAAU;AACNZ,MAAAA,MAAM,CAACY,CAAD,CAAN;AACH;;AACD,WAAO,IAAP;AACH,GAVD;AAWH,CAlBD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.connectToBrowserWallet = void 0;\nexports.connectToBrowserWallet = async (walletExtension, hmy, wallet, addrHex, reject) => {\n    let userAddress = addrHex;\n    if (!userAddress) {\n        let { address } = await walletExtension.getAccount();\n        userAddress = hmy.crypto.getAddress(address).checksum;\n    }\n    wallet.defaultSigner = userAddress;\n    wallet.signTransaction = async (tx) => {\n        try {\n            tx.from = userAddress;\n            const signTx = await walletExtension.signTransaction(tx);\n            return signTx;\n        }\n        catch (e) {\n            reject(e);\n        }\n        return null;\n    };\n};\n"]},"metadata":{},"sourceType":"script"}