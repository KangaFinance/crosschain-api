{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RLPSign = exports.defaultMessenger = exports.TransactionEvents = exports.sleep = exports.recoverETH = exports.recover = exports.handleAddress = exports.handleNumber = exports.transactionFieldsETH = exports.transactionFields = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nexports.transactionFields = [{\n  name: 'nonce',\n  length: 32,\n  fix: false\n}, {\n  name: 'gasPrice',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'gasLimit',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'shardID',\n  length: 16,\n  fix: false\n}, // recover it after main repo fix\n{\n  name: 'toShardID',\n  length: 16,\n  fix: false\n}, {\n  name: 'to',\n  length: 20,\n  fix: true\n}, {\n  name: 'value',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'data',\n  fix: false\n}];\nexports.transactionFieldsETH = [{\n  name: 'nonce',\n  length: 32,\n  fix: false\n}, {\n  name: 'gasPrice',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'gasLimit',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'to',\n  length: 20,\n  fix: true\n}, {\n  name: 'value',\n  length: 32,\n  fix: false,\n  transform: 'hex'\n}, {\n  name: 'data',\n  fix: false\n}];\n\nexports.handleNumber = function (value) {\n  if (utils_1.isHex(value) && value === '0x') {\n    return utils_1.hexToNumber('0x00');\n  } else if (utils_1.isHex(value) && value !== '0x') {\n    return utils_1.hexToNumber(value);\n  } else {\n    return value;\n  }\n};\n\nexports.handleAddress = function (value) {\n  if (value === '0x') {\n    return '0x';\n  } else if (utils_1.isAddress(value)) {\n    return value;\n  } else {\n    return '0x';\n  }\n};\n\nexports.recover = function (rawTransaction) {\n  var transaction = crypto_1.decode(rawTransaction);\n\n  if (transaction.length !== 11 && transaction.length !== 8) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  var tx = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n    gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n    shardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[3]))).toNumber(),\n    toShardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))).toNumber(),\n    to: exports.handleAddress(transaction[5]) !== '0x' ? crypto_1.getAddress(exports.handleAddress(transaction[5])).checksum : '0x',\n    value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))),\n    data: transaction[7],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0\n    }\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 8) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[8]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = crypto_1.hexZeroPad(transaction[9], 32);\n  tx.signature.s = crypto_1.hexZeroPad(transaction[10], 32);\n\n  if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() && new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    var recoveryParam = tx.signature.v - 27;\n    var raw = transaction.slice(0, 8);\n\n    if (tx.chainId !== 0) {\n      raw.push(crypto_1.hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    var digest = crypto_1.keccak256(crypto_1.encode(raw));\n\n    try {\n      var recoveredFrom = crypto_1.recoverAddress(digest, {\n        r: crypto_1.hexlify(tx.signature.r),\n        s: crypto_1.hexlify(tx.signature.s),\n        recoveryParam: recoveryParam\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n\n    tx.rawTransaction = rawTransaction;\n    tx.id = crypto_1.keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexports.recoverETH = function (rawTransaction) {\n  var transaction = crypto_1.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  var tx = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n    gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n    shardID: 0,\n    toShardID: 0,\n    to: exports.handleAddress(transaction[3]) !== '0x' ? crypto_1.getAddress(exports.handleAddress(transaction[3])).checksum : '0x',\n    value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))),\n    data: transaction[5],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0\n    }\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = crypto_1.hexZeroPad(transaction[7], 32);\n  tx.signature.s = crypto_1.hexZeroPad(transaction[8], 32);\n\n  if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() && new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    var recoveryParam = tx.signature.v - 27;\n    var raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(crypto_1.hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    var digest = crypto_1.keccak256(crypto_1.encode(raw));\n\n    try {\n      var recoveredFrom = crypto_1.recoverAddress(digest, {\n        r: crypto_1.hexlify(tx.signature.r),\n        s: crypto_1.hexlify(tx.signature.s),\n        recoveryParam: recoveryParam\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n\n    tx.rawTransaction = rawTransaction;\n    tx.id = crypto_1.keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexports.sleep = function (ms) {\n  return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve) {\n        setTimeout(function () {\n          return resolve();\n        }, ms);\n      })];\n    });\n  });\n};\n\nvar TransactionEvents;\n\n(function (TransactionEvents) {\n  TransactionEvents[\"transactionHash\"] = \"transactionHash\";\n  TransactionEvents[\"error\"] = \"error\";\n  TransactionEvents[\"confirmation\"] = \"confirmation\";\n  TransactionEvents[\"receipt\"] = \"receipt\";\n  TransactionEvents[\"track\"] = \"track\";\n  TransactionEvents[\"cxConfirmation\"] = \"cxConfirmation\";\n  TransactionEvents[\"cxReceipt\"] = \"cxReceipt\";\n  TransactionEvents[\"cxTrack\"] = \"cxTrack\";\n})(TransactionEvents = exports.TransactionEvents || (exports.TransactionEvents = {}));\n\nexports.defaultMessenger = new network_1.Messenger(new network_1.HttpProvider('http://localhost:9500'), utils_1.ChainType.Harmony);\n\nexports.RLPSign = function (transaction, prv) {\n  var _a = tslib_1.__read(transaction.getRLPUnsigned(), 2),\n      unsignedRawTransaction = _a[0],\n      raw = _a[1];\n\n  var regroup = tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), {\n    unsignedRawTransaction: unsignedRawTransaction\n  });\n\n  transaction.setParams(regroup);\n  var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n  var signed = transaction.getRLPSigned(raw, signature);\n  return [signature, signed];\n};","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RLPSign = exports.defaultMessenger = exports.TransactionEvents = exports.sleep = exports.recoverETH = exports.recover = exports.handleAddress = exports.handleNumber = exports.transactionFieldsETH = exports.transactionFields = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar network_1 = require(\"@harmony-js/network\");\nexports.transactionFields = [\n    { name: 'nonce', length: 32, fix: false },\n    { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n    { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n    { name: 'shardID', length: 16, fix: false },\n    // recover it after main repo fix\n    { name: 'toShardID', length: 16, fix: false },\n    { name: 'to', length: 20, fix: true },\n    { name: 'value', length: 32, fix: false, transform: 'hex' },\n    { name: 'data', fix: false },\n];\nexports.transactionFieldsETH = [\n    { name: 'nonce', length: 32, fix: false },\n    { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n    { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n    { name: 'to', length: 20, fix: true },\n    { name: 'value', length: 32, fix: false, transform: 'hex' },\n    { name: 'data', fix: false },\n];\nexports.handleNumber = function (value) {\n    if (utils_1.isHex(value) && value === '0x') {\n        return utils_1.hexToNumber('0x00');\n    }\n    else if (utils_1.isHex(value) && value !== '0x') {\n        return utils_1.hexToNumber(value);\n    }\n    else {\n        return value;\n    }\n};\nexports.handleAddress = function (value) {\n    if (value === '0x') {\n        return '0x';\n    }\n    else if (utils_1.isAddress(value)) {\n        return value;\n    }\n    else {\n        return '0x';\n    }\n};\nexports.recover = function (rawTransaction) {\n    var transaction = crypto_1.decode(rawTransaction);\n    if (transaction.length !== 11 && transaction.length !== 8) {\n        throw new Error('invalid rawTransaction');\n    }\n    var tx = {\n        id: '0x',\n        from: '0x',\n        rawTransaction: '0x',\n        unsignedRawTransaction: '0x',\n        nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n        gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n        gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n        shardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[3]))).toNumber(),\n        toShardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))).toNumber(),\n        to: exports.handleAddress(transaction[5]) !== '0x'\n            ? crypto_1.getAddress(exports.handleAddress(transaction[5])).checksum\n            : '0x',\n        value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))),\n        data: transaction[7],\n        chainId: 0,\n        signature: {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        },\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 8) {\n        tx.unsignedRawTransaction = rawTransaction;\n        return tx;\n    }\n    try {\n        tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[8]))).toNumber();\n    }\n    catch (error) {\n        throw error;\n    }\n    tx.signature.r = crypto_1.hexZeroPad(transaction[9], 32);\n    tx.signature.s = crypto_1.hexZeroPad(transaction[10], 32);\n    if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() &&\n        new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.signature.v;\n        tx.signature.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        var recoveryParam = tx.signature.v - 27;\n        var raw = transaction.slice(0, 8);\n        if (tx.chainId !== 0) {\n            raw.push(crypto_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        var digest = crypto_1.keccak256(crypto_1.encode(raw));\n        try {\n            var recoveredFrom = crypto_1.recoverAddress(digest, {\n                r: crypto_1.hexlify(tx.signature.r),\n                s: crypto_1.hexlify(tx.signature.s),\n                recoveryParam: recoveryParam,\n            });\n            tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n        }\n        catch (error) {\n            throw error;\n        }\n        tx.rawTransaction = rawTransaction;\n        tx.id = crypto_1.keccak256(rawTransaction);\n    }\n    return tx;\n};\nexports.recoverETH = function (rawTransaction) {\n    var transaction = crypto_1.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        throw new Error('invalid rawTransaction');\n    }\n    var tx = {\n        id: '0x',\n        from: '0x',\n        rawTransaction: '0x',\n        unsignedRawTransaction: '0x',\n        nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n        gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n        gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n        shardID: 0,\n        toShardID: 0,\n        to: exports.handleAddress(transaction[3]) !== '0x'\n            ? crypto_1.getAddress(exports.handleAddress(transaction[3])).checksum\n            : '0x',\n        value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))),\n        data: transaction[5],\n        chainId: 0,\n        signature: {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        },\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        tx.unsignedRawTransaction = rawTransaction;\n        return tx;\n    }\n    try {\n        tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))).toNumber();\n    }\n    catch (error) {\n        throw error;\n    }\n    tx.signature.r = crypto_1.hexZeroPad(transaction[7], 32);\n    tx.signature.s = crypto_1.hexZeroPad(transaction[8], 32);\n    if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() &&\n        new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.signature.v;\n        tx.signature.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        var recoveryParam = tx.signature.v - 27;\n        var raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(crypto_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        var digest = crypto_1.keccak256(crypto_1.encode(raw));\n        try {\n            var recoveredFrom = crypto_1.recoverAddress(digest, {\n                r: crypto_1.hexlify(tx.signature.r),\n                s: crypto_1.hexlify(tx.signature.s),\n                recoveryParam: recoveryParam,\n            });\n            tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n        }\n        catch (error) {\n            throw error;\n        }\n        tx.rawTransaction = rawTransaction;\n        tx.id = crypto_1.keccak256(rawTransaction);\n    }\n    return tx;\n};\nexports.sleep = function (ms) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve) {\n                setTimeout(function () { return resolve(); }, ms);\n            })];\n    });\n}); };\nvar TransactionEvents;\n(function (TransactionEvents) {\n    TransactionEvents[\"transactionHash\"] = \"transactionHash\";\n    TransactionEvents[\"error\"] = \"error\";\n    TransactionEvents[\"confirmation\"] = \"confirmation\";\n    TransactionEvents[\"receipt\"] = \"receipt\";\n    TransactionEvents[\"track\"] = \"track\";\n    TransactionEvents[\"cxConfirmation\"] = \"cxConfirmation\";\n    TransactionEvents[\"cxReceipt\"] = \"cxReceipt\";\n    TransactionEvents[\"cxTrack\"] = \"cxTrack\";\n})(TransactionEvents = exports.TransactionEvents || (exports.TransactionEvents = {}));\nexports.defaultMessenger = new network_1.Messenger(new network_1.HttpProvider('http://localhost:9500'), utils_1.ChainType.Harmony);\nexports.RLPSign = function (transaction, prv) {\n    var _a = tslib_1.__read(transaction.getRLPUnsigned(), 2), unsignedRawTransaction = _a[0], raw = _a[1];\n    var regroup = tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { unsignedRawTransaction: unsignedRawTransaction });\n    transaction.setParams(regroup);\n    var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n    var signed = transaction.getRLPSigned(raw, signature);\n    return [signature, signed];\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}