{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmyMethodsWeb3 = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst crypto_1 = require(\"@harmony-js/crypto\");\n\nconst BN = require('bn.js');\n\nclass HmyMethodsWeb3 {\n  constructor(params) {\n    this.useMetamask = false;\n\n    this.setUseOneWallet = value => value;\n\n    this.setUseMathWallet = value => value;\n\n    this.setUseMetamask = value => this.useMetamask = value;\n\n    this.approveHmyManger = async (amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const transaction = await this.hmyTokenContract.methods.approve(this.hmyManagerContractAddress, utils_1.withDecimals(amount, 18)).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', sendTxCallback);\n      return transaction;\n    };\n\n    this.burnToken = async (userAddr, amount, sendTxCallback) => {\n      let accounts;\n\n      if (this.useMetamask) {\n        accounts = await ethereum.enable();\n      }\n\n      const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n      const transaction = await this.hmyManagerContract.methods.burnToken(utils_1.withDecimals(amount, 18), userAddrHex).send({\n        from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n        gasLimit: 6721900,\n        gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1))\n      }).on('transactionHash', sendTxCallback);\n      return transaction;\n    };\n\n    this.checkHmyBalance = async addr => {\n      return await this.hmyTokenContract.methods.balanceOf(crypto_1.getAddress(addr).checksum).call();\n    };\n\n    this.totalSupply = async () => {\n      return await this.hmyTokenContract.methods.totalSupply().call();\n    };\n\n    this.web3 = params.hmy;\n    this.hmyTokenContract = params.hmyTokenContract;\n    this.hmyManagerContract = params.hmyManagerContract;\n    this.hmyManagerContractAddress = params.hmyManagerContractAddress;\n  }\n\n}\n\nexports.HmyMethodsWeb3 = HmyMethodsWeb3;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/blockchain/hmy/HmyMethodsWeb3.js"],"names":["Object","defineProperty","exports","value","HmyMethodsWeb3","utils_1","require","crypto_1","BN","constructor","params","useMetamask","setUseOneWallet","setUseMathWallet","setUseMetamask","approveHmyManger","amount","sendTxCallback","accounts","ethereum","enable","transaction","hmyTokenContract","methods","approve","hmyManagerContractAddress","withDecimals","send","from","web3","eth","defaultAccount","gasLimit","gasPrice","getGasPrice","mul","on","burnToken","userAddr","userAddrHex","getAddress","checksum","hmyManagerContract","checkHmyBalance","addr","balanceOf","call","totalSupply","hmy"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HmyMethodsWeb3 = void 0;\nconst utils_1 = require(\"../utils\");\nconst crypto_1 = require(\"@harmony-js/crypto\");\nconst BN = require('bn.js');\nclass HmyMethodsWeb3 {\n    constructor(params) {\n        this.useMetamask = false;\n        this.setUseOneWallet = (value) => value;\n        this.setUseMathWallet = (value) => value;\n        this.setUseMetamask = (value) => (this.useMetamask = value);\n        this.approveHmyManger = async (amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const transaction = await this.hmyTokenContract.methods\n                .approve(this.hmyManagerContractAddress, utils_1.withDecimals(amount, 18))\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', sendTxCallback);\n            return transaction;\n        };\n        this.burnToken = async (userAddr, amount, sendTxCallback) => {\n            let accounts;\n            if (this.useMetamask) {\n                accounts = await ethereum.enable();\n            }\n            const userAddrHex = crypto_1.getAddress(userAddr).checksum;\n            const transaction = await this.hmyManagerContract.methods\n                .burnToken(utils_1.withDecimals(amount, 18), userAddrHex)\n                .send({\n                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,\n                gasLimit: 6721900,\n                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),\n            })\n                .on('transactionHash', sendTxCallback);\n            return transaction;\n        };\n        this.checkHmyBalance = async (addr) => {\n            return await this.hmyTokenContract.methods.balanceOf(crypto_1.getAddress(addr).checksum).call();\n        };\n        this.totalSupply = async () => {\n            return await this.hmyTokenContract.methods.totalSupply().call();\n        };\n        this.web3 = params.hmy;\n        this.hmyTokenContract = params.hmyTokenContract;\n        this.hmyManagerContract = params.hmyManagerContract;\n        this.hmyManagerContractAddress = params.hmyManagerContractAddress;\n    }\n}\nexports.HmyMethodsWeb3 = HmyMethodsWeb3;\n"]},"metadata":{},"sourceType":"script"}