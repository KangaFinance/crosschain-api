{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/utils\n\nThis package provides a collection of utility apis for unit conversions like `fromWei`, `toWei`, `hexToNumber`, `numberToHex`, `isAddress`, etc.\n\n## Installation\n\n```\nnpm install @harmony-js/utils\n```\n\n## Usage\n\nAvailable units\n```\nconst { Units } = require('@harmony-js/utils');\n\n[Units.wei, '1'], // 1 wei\n[Units.Kwei, '1000'], // 1e3 wei\n[Units.Mwei, '1000000'], // 1e6 wei\n[Units.Gwei, '1000000000'], // 1e9 wei\n[Units.szabo, '1000000000000'], // 1e12 wei\n[Units.finney, '1000000000000000'], // 1e15 wei\n[Units.ether, '1000000000000000000'], // 1e18 wei\n[Units.one, '1000000000000000000'], // 1e18 wei\n[Units.Kether, '1000000000000000000000'], // 1e21 wei\n[Units.Mether, '1000000000000000000000000'], // 1e24 wei\n[Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n[Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n```\n\nConverting between different units\n```javascript\nconst { Units, Unit, numberToString, add0xToString, fromWei, toWei, numToStr} = require('@harmony-js/utils');\nconst { BN } = require('@harmony-js/crypto');\n\nconst one = new Unit('1').asOne();\nconst oneToGwei = one.toGwei();\nconsole.log(oneToGwei);\n\n// numberToString\nconst num = 123;\nconst str = numberToString(num)\nconsole.log(str);\n\n// add0xToString\nconst str = '12345';\nconst expected = add0xToString(str)\nconsole.log(expected);\n\n// fromWei\nconst Wei = new BN('1000000000000000000');\nconst expected = fromWei(Wei, Units.one);\nconsole.log(expected);\n\n// toWei\nconst one = new BN('1');\nconst expected = toWei(one, hmy.utils.Units.one);\nconst num = numToStr(expected);\nconsole.log(num);\n```\n *\n * @packageDocumentation\n * @module harmony-utils\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressSuffix = exports.HDPath = exports.HarmonyCore = exports.defaultConfig = exports.ChainID = exports.ChainType = void 0;\nvar ChainType;\n\n(function (ChainType) {\n  ChainType[\"Harmony\"] = \"hmy\";\n  ChainType[\"Ethereum\"] = \"eth\";\n})(ChainType = exports.ChainType || (exports.ChainType = {}));\n\nvar ChainID;\n\n(function (ChainID) {\n  ChainID[ChainID[\"Default\"] = 0] = \"Default\";\n  ChainID[ChainID[\"EthMainnet\"] = 1] = \"EthMainnet\";\n  ChainID[ChainID[\"Morden\"] = 2] = \"Morden\";\n  ChainID[ChainID[\"Ropsten\"] = 3] = \"Ropsten\";\n  ChainID[ChainID[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  ChainID[ChainID[\"RootstockMainnet\"] = 30] = \"RootstockMainnet\";\n  ChainID[ChainID[\"RootstockTestnet\"] = 31] = \"RootstockTestnet\";\n  ChainID[ChainID[\"Kovan\"] = 42] = \"Kovan\";\n  ChainID[ChainID[\"EtcMainnet\"] = 61] = \"EtcMainnet\";\n  ChainID[ChainID[\"EtcTestnet\"] = 62] = \"EtcTestnet\";\n  ChainID[ChainID[\"Geth\"] = 1337] = \"Geth\";\n  ChainID[ChainID[\"Ganache\"] = 0] = \"Ganache\";\n  ChainID[ChainID[\"HmyMainnet\"] = 1] = \"HmyMainnet\";\n  ChainID[ChainID[\"HmyTestnet\"] = 2] = \"HmyTestnet\";\n  ChainID[ChainID[\"HmyLocal\"] = 2] = \"HmyLocal\";\n  ChainID[ChainID[\"HmyPangaea\"] = 3] = \"HmyPangaea\";\n})(ChainID = exports.ChainID || (exports.ChainID = {}));\n/** @hidden */\n\n\nexports.defaultConfig = {\n  Default: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Harmony,\n    Chain_URL: 'http://localhost:9500',\n    Network_ID: 'Local'\n  },\n  DefaultWS: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Harmony,\n    Chain_URL: 'ws://localhost:9800',\n    Network_ID: 'LocalWS'\n  }\n};\n/** @hidden */\n\nvar HarmonyCore = function () {\n  function HarmonyCore(chainType, chainId) {\n    if (chainId === void 0) {\n      chainId = exports.defaultConfig.Default.Chain_ID;\n    }\n\n    this.chainType = chainType;\n    this.chainId = chainId;\n  }\n\n  Object.defineProperty(HarmonyCore.prototype, \"chainPrefix\", {\n    get: function () {\n      switch (this.chainType) {\n        case ChainType.Ethereum:\n          {\n            return 'eth';\n          }\n\n        case ChainType.Harmony:\n          {\n            return 'hmy';\n          }\n\n        default:\n          {\n            return 'hmy';\n          }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyCore.prototype, \"getChainId\", {\n    get: function () {\n      return this.chainId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  HarmonyCore.prototype.setChainId = function (chainId) {\n    this.chainId = chainId;\n  };\n\n  HarmonyCore.prototype.setChainType = function (chainType) {\n    this.chainType = chainType;\n  };\n\n  return HarmonyCore;\n}();\n\nexports.HarmonyCore = HarmonyCore;\n/** @hidden */\n\nexports.HDPath = \"m/44'/1023'/0'/0/\";\n/** @hidden */\n\nexports.AddressSuffix = '-';","map":{"version":3,"sources":["../src/chain.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n # @harmony-js/utils\n\nThis package provides a collection of utility apis for unit conversions like `fromWei`, `toWei`, `hexToNumber`, `numberToHex`, `isAddress`, etc.\n\n## Installation\n\n```\nnpm install @harmony-js/utils\n```\n\n## Usage\n\nAvailable units\n```\nconst { Units } = require('@harmony-js/utils');\n\n[Units.wei, '1'], // 1 wei\n[Units.Kwei, '1000'], // 1e3 wei\n[Units.Mwei, '1000000'], // 1e6 wei\n[Units.Gwei, '1000000000'], // 1e9 wei\n[Units.szabo, '1000000000000'], // 1e12 wei\n[Units.finney, '1000000000000000'], // 1e15 wei\n[Units.ether, '1000000000000000000'], // 1e18 wei\n[Units.one, '1000000000000000000'], // 1e18 wei\n[Units.Kether, '1000000000000000000000'], // 1e21 wei\n[Units.Mether, '1000000000000000000000000'], // 1e24 wei\n[Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n[Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n```\n\nConverting between different units\n```javascript\nconst { Units, Unit, numberToString, add0xToString, fromWei, toWei, numToStr} = require('@harmony-js/utils');\nconst { BN } = require('@harmony-js/crypto');\n\nconst one = new Unit('1').asOne();\nconst oneToGwei = one.toGwei();\nconsole.log(oneToGwei);\n\n// numberToString\nconst num = 123;\nconst str = numberToString(num)\nconsole.log(str);\n\n// add0xToString\nconst str = '12345';\nconst expected = add0xToString(str)\nconsole.log(expected);\n\n// fromWei\nconst Wei = new BN('1000000000000000000');\nconst expected = fromWei(Wei, Units.one);\nconsole.log(expected);\n\n// toWei\nconst one = new BN('1');\nconst expected = toWei(one, hmy.utils.Units.one);\nconst num = numToStr(expected);\nconsole.log(num);\n```\n *\n * @packageDocumentation\n * @module harmony-utils\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressSuffix = exports.HDPath = exports.HarmonyCore = exports.defaultConfig = exports.ChainID = exports.ChainType = void 0;\nvar ChainType;\n(function (ChainType) {\n    ChainType[\"Harmony\"] = \"hmy\";\n    ChainType[\"Ethereum\"] = \"eth\";\n})(ChainType = exports.ChainType || (exports.ChainType = {}));\nvar ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Default\"] = 0] = \"Default\";\n    ChainID[ChainID[\"EthMainnet\"] = 1] = \"EthMainnet\";\n    ChainID[ChainID[\"Morden\"] = 2] = \"Morden\";\n    ChainID[ChainID[\"Ropsten\"] = 3] = \"Ropsten\";\n    ChainID[ChainID[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    ChainID[ChainID[\"RootstockMainnet\"] = 30] = \"RootstockMainnet\";\n    ChainID[ChainID[\"RootstockTestnet\"] = 31] = \"RootstockTestnet\";\n    ChainID[ChainID[\"Kovan\"] = 42] = \"Kovan\";\n    ChainID[ChainID[\"EtcMainnet\"] = 61] = \"EtcMainnet\";\n    ChainID[ChainID[\"EtcTestnet\"] = 62] = \"EtcTestnet\";\n    ChainID[ChainID[\"Geth\"] = 1337] = \"Geth\";\n    ChainID[ChainID[\"Ganache\"] = 0] = \"Ganache\";\n    ChainID[ChainID[\"HmyMainnet\"] = 1] = \"HmyMainnet\";\n    ChainID[ChainID[\"HmyTestnet\"] = 2] = \"HmyTestnet\";\n    ChainID[ChainID[\"HmyLocal\"] = 2] = \"HmyLocal\";\n    ChainID[ChainID[\"HmyPangaea\"] = 3] = \"HmyPangaea\";\n})(ChainID = exports.ChainID || (exports.ChainID = {}));\n/** @hidden */\nexports.defaultConfig = {\n    Default: {\n        Chain_ID: ChainID.HmyLocal,\n        Chain_Type: ChainType.Harmony,\n        Chain_URL: 'http://localhost:9500',\n        Network_ID: 'Local',\n    },\n    DefaultWS: {\n        Chain_ID: ChainID.HmyLocal,\n        Chain_Type: ChainType.Harmony,\n        Chain_URL: 'ws://localhost:9800',\n        Network_ID: 'LocalWS',\n    },\n};\n/** @hidden */\nvar HarmonyCore = /** @class */ (function () {\n    function HarmonyCore(chainType, chainId) {\n        if (chainId === void 0) { chainId = exports.defaultConfig.Default.Chain_ID; }\n        this.chainType = chainType;\n        this.chainId = chainId;\n    }\n    Object.defineProperty(HarmonyCore.prototype, \"chainPrefix\", {\n        get: function () {\n            switch (this.chainType) {\n                case ChainType.Ethereum: {\n                    return 'eth';\n                }\n                case ChainType.Harmony: {\n                    return 'hmy';\n                }\n                default: {\n                    return 'hmy';\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyCore.prototype, \"getChainId\", {\n        get: function () {\n            return this.chainId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HarmonyCore.prototype.setChainId = function (chainId) {\n        this.chainId = chainId;\n    };\n    HarmonyCore.prototype.setChainType = function (chainType) {\n        this.chainType = chainType;\n    };\n    return HarmonyCore;\n}());\nexports.HarmonyCore = HarmonyCore;\n/** @hidden */\nexports.HDPath = \"m/44'/1023'/0'/0/\";\n/** @hidden */\nexports.AddressSuffix = '-';\n//# sourceMappingURL=chain.js.map"]},"metadata":{},"sourceType":"script"}