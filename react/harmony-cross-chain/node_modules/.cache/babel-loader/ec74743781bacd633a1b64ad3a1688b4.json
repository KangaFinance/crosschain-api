{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-account\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar crypto_1 = require(\"@harmony-js/crypto\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar account_1 = require(\"./account\");\n\nvar utils_2 = require(\"./utils\");\n\nvar Wallet = function () {\n  /**\n   * @example\n   * ```\n   * const { Wallet } = require('@harmony-js/account');\n   * const { HttpProvider, Messenger } = require('@harmony-js/network');\n   * const { ChainType, ChainID } = require('@harmony-js/utils');\n   *\n   * // create a custom messenger\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('http://localhost:9500'),\n   *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   *\n   * const wallet = new Wallet(customMessenger);\n   * ```\n   */\n  function Wallet(messenger) {\n    if (messenger === void 0) {\n      messenger = utils_2.defaultMessenger;\n    }\n    /**\n     * @hidden\n     */\n\n\n    this.accountMap = new Map();\n    this.messenger = messenger;\n  } // static method generate Mnemonic\n\n\n  Wallet.generateMnemonic = function () {\n    return crypto_1.bip39.generateMnemonic();\n  };\n\n  Object.defineProperty(Wallet.prototype, \"accounts\", {\n    /**\n     * get acounts addresses\n     *\n     * @return {string[]} accounts addresses\n     *\n     * @example\n     * ```javascript\n     * const wallet = new Wallet(customMessenger);\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * wallet.addByPrivateKey(key_1);\n     *\n     * console.log(wallet.accounts);\n     * ```\n     */\n    get: function () {\n      return tslib_1.__spread(this.accountMap.keys());\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Wallet.prototype, \"signer\", {\n    /**\n     * get the signer of the account, by default, using the first account\n     *\n     * @example\n     * ```javascript\n     * const wallet = new Wallet(customMessenger);\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * wallet.addByPrivateKey(key_1);\n     *\n     * console.log(wallet.signer)\n     * ```\n     */\n    get: function () {\n      if (this.defaultSigner) {\n        return this.getAccount(this.defaultSigner);\n      } else if (!this.defaultSigner && this.accounts.length > 0) {\n        this.setSigner(this.accounts[0]);\n        return this.getAccount(this.accounts[0]);\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @function newMnemonic\n   * @memberof Wallet\n   * @return {string} Mnemonics\n   */\n\n  Wallet.prototype.newMnemonic = function () {\n    return Wallet.generateMnemonic();\n  };\n  /**\n   * Add account using Mnemonic phrases\n   * @param  {string} phrase - Mnemonic phrase\n   * @param  {index} index - index to hdKey root\n   *\n   * @example\n   * ```javascript\n   * const mnemonic_1 = 'urge clog right example dish drill card maximum mix bachelor section select';\n   * const wallet = new Wallet(customMessenger);\n   * wallet.addByMnemonic(mnemonic_1);\n   *\n   * console.log(wallet.accounts);\n   * ```\n   */\n\n\n  Wallet.prototype.addByMnemonic = function (phrase, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (!this.isValidMnemonic(phrase)) {\n      throw new Error(\"Invalid mnemonic phrase: \" + phrase);\n    }\n\n    var seed = crypto_1.bip39.mnemonicToSeed(phrase);\n    var hdKey = crypto_1.hdkey.fromMasterSeed(seed); // TODO:hdkey should apply to Harmony's settings\n\n    var path = this.messenger.chainType === utils_1.ChainType.Harmony ? '1023' : '60';\n    var childKey = hdKey.derive(\"m/44'/\" + path + \"'/0'/0/\" + index);\n    var privateKey = childKey.privateKey.toString('hex');\n    return this.addByPrivateKey(privateKey);\n  };\n  /**\n   * Add an account using privateKey\n   *\n   * @param  {string} privateKey - privateKey to add\n   * @return {Account} return added Account\n   *\n   * @example\n   * ```javascript\n   * const wallet = new Wallet(customMessenger);\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * console.log(wallet.addByPrivateKey(key_1));\n   * ```\n   */\n\n\n  Wallet.prototype.addByPrivateKey = function (privateKey) {\n    try {\n      var newAcc = account_1.Account.add(privateKey);\n      newAcc.setMessenger(this.messenger);\n\n      if (newAcc.address) {\n        this.accountMap.set(newAcc.address, newAcc);\n\n        if (!this.defaultSigner) {\n          this.setSigner(newAcc.address);\n        }\n\n        return newAcc;\n      } else {\n        throw new Error('add account failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Add an account using privateKey\n   * @param  {string} keyStore - keystore jsonString to add\n   * @param  {string} password - password to decrypt the file\n   * @return {Account} return added Account\n   */\n\n\n  Wallet.prototype.addByKeyStore = function (keyStore, password) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var newAcc, result, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            newAcc = new account_1.Account(undefined);\n            return [4\n            /*yield*/\n            , newAcc.fromFile(keyStore, password)];\n\n          case 1:\n            result = _a.sent();\n            result.setMessenger(this.messenger);\n\n            if (result.address) {\n              this.accountMap.set(result.address, result);\n\n              if (!this.defaultSigner) {\n                this.setSigner(result.address);\n              }\n\n              return [2\n              /*return*/\n              , result];\n            } else {\n              throw new Error('add account failed');\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * create a new account using Mnemonic\n   * @return {Account} {description}\n   *\n   * @example\n   * ```javascript\n   * console.log(wallet.accounts);\n   * wallet.createAccount();\n   * wallet.createAccount();\n   *\n   * console.log(wallet.accounts);\n   * ````\n   */\n\n\n  Wallet.prototype.createAccount = function (password, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var prv, acc, encrypted;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            prv = crypto_1.generatePrivateKey();\n            acc = this.addByPrivateKey(prv);\n            if (!(acc.address && password)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.encryptAccount(acc.address, password, options)];\n\n          case 1:\n            encrypted = _a.sent();\n            return [2\n            /*return*/\n            , encrypted];\n\n          case 2:\n            if (acc.address && !password) {\n              return [2\n              /*return*/\n              , acc];\n            } else {\n              throw new Error('create acount failed');\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To encrypt an account that lives in the wallet.\n   * if encrypted, returns original one, if not found, throw error\n   * @param {string} address - address in accounts\n   * @param {string} password - string that used to encrypt\n   * @param {EncryptOptions} options - encryption options\n   * @return {Promise<Account>}\n   *\n   * @example\n   * ```javascript\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * wallet.encryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345').then((value) => {\n   *   console.log(value);\n   * })\n   * ```\n   */\n\n\n  Wallet.prototype.encryptAccount = function (address, password, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var foundAcc, error_2;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            foundAcc = this.getAccount(address);\n            if (!(foundAcc && foundAcc.privateKey && utils_1.isPrivateKey(foundAcc.privateKey))) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , foundAcc.toFile(password, options)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , foundAcc];\n\n          case 2:\n            if (foundAcc && foundAcc.privateKey && !utils_1.isPrivateKey(foundAcc.privateKey)) {\n              return [2\n              /*return*/\n              , foundAcc];\n            } else {\n              throw new Error('encrypt account failed');\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            throw error_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To decrypt an account that lives in the wallet,if not encrypted, return original,\n   * if not found, throw error\n   * @param {string} address - address in accounts\n   * @param {string} password - string that used to encrypt\n   * @return {Promise<Account>}\n   *\n   * @example\n   * ```javascript\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * wallet.encryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n   * .then(() => {\n   *   wallet.decryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n   *   .then((value) =>{\n   *      console.log(value);\n   *   });\n   * });\n   * ```\n   */\n\n\n  Wallet.prototype.decryptAccount = function (address, password) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var foundAcc, error_3;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            foundAcc = this.getAccount(address);\n            if (!(foundAcc && foundAcc.privateKey && !utils_1.isPrivateKey(foundAcc.privateKey))) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , foundAcc.fromFile(foundAcc.privateKey, password)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , foundAcc];\n\n          case 2:\n            if (foundAcc && foundAcc.privateKey && utils_1.isPrivateKey(foundAcc.privateKey)) {\n              foundAcc.encrypted = false;\n              return [2\n              /*return*/\n              , foundAcc];\n            } else {\n              throw new Error('decrypt account failed');\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_3 = _a.sent();\n            throw error_3;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get Account instance using address as param\n   * @param  {string} address - address hex\n   * @return {Account} Account instance which lives in Wallet\n   *\n   * @example\n   * ```\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * console.log(wallet.getAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'));\n   * ```\n   */\n\n\n  Wallet.prototype.getAccount = function (address) {\n    return this.accountMap.get(crypto_1.getAddress(address).basicHex);\n  };\n  /**\n   * @function removeAccount\n   * @memberof Wallet\n   * @description remove Account using address as param\n   * @param  {string} address: - address hex\n   */\n\n\n  Wallet.prototype.removeAccount = function (address) {\n    this.accountMap.delete(crypto_1.getAddress(address).basicHex);\n\n    if (this.defaultSigner === address) {\n      this.defaultSigner = undefined;\n    }\n  };\n  /**\n   * Set Customer Messenage\n   * @param messenger\n   *\n   * @example\n   * ```javascript\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('https://api.s0.b.hmny.io'),\n   *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   * const wallet = new Wallet();\n   * wallet.setMessenger(customMessenger);\n   * console.log(wallet.messenger);\n   * ```\n   */\n\n\n  Wallet.prototype.setMessenger = function (messenger) {\n    this.messenger = messenger;\n  };\n  /**\n   * Set signer\n   *\n   * @param address one of the address in the accounts\n   */\n\n\n  Wallet.prototype.setSigner = function (address) {\n    if (!utils_1.isAddress(address) && !this.getAccount(address)) {\n      throw new Error('could not set signer');\n    }\n\n    this.defaultSigner = address;\n  };\n\n  Wallet.prototype.signTransaction = function (transaction, account, // tslint:disable-next-line: no-unnecessary-initializer\n  password, updateNonce, encodeMode, blockNumber) {\n    if (account === void 0) {\n      account = this.signer;\n    }\n\n    if (password === void 0) {\n      password = undefined;\n    }\n\n    if (updateNonce === void 0) {\n      updateNonce = true;\n    }\n\n    if (encodeMode === void 0) {\n      encodeMode = 'rlp';\n    }\n\n    if (blockNumber === void 0) {\n      blockNumber = 'latest';\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var toSignWith, decrypted, signed, error_4, signed, error_5;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            toSignWith = account || this.signer;\n\n            if (!toSignWith) {\n              throw new Error('no signer found or did not provide correct account');\n            }\n\n            if (!(toSignWith instanceof account_1.Account && toSignWith.encrypted && toSignWith.address)) return [3\n            /*break*/\n            , 7];\n\n            if (!password) {\n              throw new Error('must provide password to further execution');\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.decryptAccount(toSignWith.address, password)];\n\n          case 2:\n            decrypted = _a.sent();\n            return [4\n            /*yield*/\n            , decrypted.signTransaction(transaction, updateNonce, encodeMode, blockNumber)];\n\n          case 3:\n            signed = _a.sent();\n            return [4\n            /*yield*/\n            , this.encryptAccount(toSignWith.address, password)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , signed];\n\n          case 5:\n            error_4 = _a.sent();\n            throw error_4;\n\n          case 6:\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            if (!(toSignWith instanceof account_1.Account && !toSignWith.encrypted && toSignWith.address)) return [3\n            /*break*/\n            , 12];\n            _a.label = 8;\n\n          case 8:\n            _a.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , toSignWith.signTransaction(transaction, updateNonce, encodeMode, blockNumber)];\n\n          case 9:\n            signed = _a.sent();\n            return [2\n            /*return*/\n            , signed];\n\n          case 10:\n            error_5 = _a.sent();\n            throw error_5;\n\n          case 11:\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            throw new Error('sign transaction failed');\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Wallet.prototype.signStaking = function (staking, account, // tslint:disable-next-line: no-unnecessary-initializer\n  password, updateNonce, encodeMode, blockNumber, shardID) {\n    if (account === void 0) {\n      account = this.signer;\n    }\n\n    if (password === void 0) {\n      password = undefined;\n    }\n\n    if (updateNonce === void 0) {\n      updateNonce = true;\n    }\n\n    if (encodeMode === void 0) {\n      encodeMode = 'rlp';\n    }\n\n    if (blockNumber === void 0) {\n      blockNumber = 'latest';\n    }\n\n    if (shardID === void 0) {\n      shardID = this.messenger.currentShard;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var toSignWith, decrypted, signed, error_6, signed, error_7;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            toSignWith = account || this.signer;\n\n            if (!toSignWith) {\n              throw new Error('no signer found or did not provide correct account');\n            }\n\n            if (!(toSignWith instanceof account_1.Account && toSignWith.encrypted && toSignWith.address)) return [3\n            /*break*/\n            , 7];\n\n            if (!password) {\n              throw new Error('must provide password to further execution');\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.decryptAccount(toSignWith.address, password)];\n\n          case 2:\n            decrypted = _a.sent();\n            return [4\n            /*yield*/\n            , decrypted.signStaking(staking, updateNonce, encodeMode, blockNumber, shardID)];\n\n          case 3:\n            signed = _a.sent();\n            return [4\n            /*yield*/\n            , this.encryptAccount(toSignWith.address, password)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , signed];\n\n          case 5:\n            error_6 = _a.sent();\n            throw error_6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            if (!(toSignWith instanceof account_1.Account && !toSignWith.encrypted && toSignWith.address)) return [3\n            /*break*/\n            , 12];\n            _a.label = 8;\n\n          case 8:\n            _a.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , toSignWith.signStaking(staking, updateNonce, encodeMode, blockNumber, shardID)];\n\n          case 9:\n            signed = _a.sent();\n            return [2\n            /*return*/\n            , signed];\n\n          case 10:\n            error_7 = _a.sent();\n            throw error_7;\n\n          case 11:\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            throw new Error('sign transaction failed');\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @function isValidMnemonic\n   * @memberof Wallet\n   * @description check if Mnemonic is valid\n   * @param  {string} phrase - Mnemonic phrase\n   * @return {boolean}\n   * @ignore\n   */\n\n\n  Wallet.prototype.isValidMnemonic = function (phrase) {\n    if (phrase.trim().split(/\\s+/g).length < 12) {\n      return false;\n    }\n\n    return crypto_1.bip39.validateMnemonic(phrase);\n  };\n\n  return Wallet;\n}();\n\nexports.Wallet = Wallet;","map":{"version":3,"sources":["../src/wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-account\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wallet = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar account_1 = require(\"./account\");\nvar utils_2 = require(\"./utils\");\nvar Wallet = /** @class */ (function () {\n    /**\n     * @example\n     * ```\n     * const { Wallet } = require('@harmony-js/account');\n     * const { HttpProvider, Messenger } = require('@harmony-js/network');\n     * const { ChainType, ChainID } = require('@harmony-js/utils');\n     *\n     * // create a custom messenger\n     * const customMessenger = new Messenger(\n     *   new HttpProvider('http://localhost:9500'),\n     *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n     *   ChainID.HmyLocal, // check if the chainId is correct\n     * )\n     *\n     * const wallet = new Wallet(customMessenger);\n     * ```\n     */\n    function Wallet(messenger) {\n        if (messenger === void 0) { messenger = utils_2.defaultMessenger; }\n        /**\n         * @hidden\n         */\n        this.accountMap = new Map();\n        this.messenger = messenger;\n    }\n    // static method generate Mnemonic\n    Wallet.generateMnemonic = function () {\n        return crypto_1.bip39.generateMnemonic();\n    };\n    Object.defineProperty(Wallet.prototype, \"accounts\", {\n        /**\n         * get acounts addresses\n         *\n         * @return {string[]} accounts addresses\n         *\n         * @example\n         * ```javascript\n         * const wallet = new Wallet(customMessenger);\n         * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n         * wallet.addByPrivateKey(key_1);\n         *\n         * console.log(wallet.accounts);\n         * ```\n         */\n        get: function () {\n            return tslib_1.__spread(this.accountMap.keys());\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Wallet.prototype, \"signer\", {\n        /**\n         * get the signer of the account, by default, using the first account\n         *\n         * @example\n         * ```javascript\n         * const wallet = new Wallet(customMessenger);\n         * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n         * wallet.addByPrivateKey(key_1);\n         *\n         * console.log(wallet.signer)\n         * ```\n         */\n        get: function () {\n            if (this.defaultSigner) {\n                return this.getAccount(this.defaultSigner);\n            }\n            else if (!this.defaultSigner && this.accounts.length > 0) {\n                this.setSigner(this.accounts[0]);\n                return this.getAccount(this.accounts[0]);\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @function newMnemonic\n     * @memberof Wallet\n     * @return {string} Mnemonics\n     */\n    Wallet.prototype.newMnemonic = function () {\n        return Wallet.generateMnemonic();\n    };\n    /**\n     * Add account using Mnemonic phrases\n     * @param  {string} phrase - Mnemonic phrase\n     * @param  {index} index - index to hdKey root\n     *\n     * @example\n     * ```javascript\n     * const mnemonic_1 = 'urge clog right example dish drill card maximum mix bachelor section select';\n     * const wallet = new Wallet(customMessenger);\n     * wallet.addByMnemonic(mnemonic_1);\n     *\n     * console.log(wallet.accounts);\n     * ```\n     */\n    Wallet.prototype.addByMnemonic = function (phrase, index) {\n        if (index === void 0) { index = 0; }\n        if (!this.isValidMnemonic(phrase)) {\n            throw new Error(\"Invalid mnemonic phrase: \" + phrase);\n        }\n        var seed = crypto_1.bip39.mnemonicToSeed(phrase);\n        var hdKey = crypto_1.hdkey.fromMasterSeed(seed);\n        // TODO:hdkey should apply to Harmony's settings\n        var path = this.messenger.chainType === utils_1.ChainType.Harmony ? '1023' : '60';\n        var childKey = hdKey.derive(\"m/44'/\" + path + \"'/0'/0/\" + index);\n        var privateKey = childKey.privateKey.toString('hex');\n        return this.addByPrivateKey(privateKey);\n    };\n    /**\n     * Add an account using privateKey\n     *\n     * @param  {string} privateKey - privateKey to add\n     * @return {Account} return added Account\n     *\n     * @example\n     * ```javascript\n     * const wallet = new Wallet(customMessenger);\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * console.log(wallet.addByPrivateKey(key_1));\n     * ```\n     */\n    Wallet.prototype.addByPrivateKey = function (privateKey) {\n        try {\n            var newAcc = account_1.Account.add(privateKey);\n            newAcc.setMessenger(this.messenger);\n            if (newAcc.address) {\n                this.accountMap.set(newAcc.address, newAcc);\n                if (!this.defaultSigner) {\n                    this.setSigner(newAcc.address);\n                }\n                return newAcc;\n            }\n            else {\n                throw new Error('add account failed');\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    /**\n     * Add an account using privateKey\n     * @param  {string} keyStore - keystore jsonString to add\n     * @param  {string} password - password to decrypt the file\n     * @return {Account} return added Account\n     */\n    Wallet.prototype.addByKeyStore = function (keyStore, password) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var newAcc, result, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        newAcc = new account_1.Account(undefined);\n                        return [4 /*yield*/, newAcc.fromFile(keyStore, password)];\n                    case 1:\n                        result = _a.sent();\n                        result.setMessenger(this.messenger);\n                        if (result.address) {\n                            this.accountMap.set(result.address, result);\n                            if (!this.defaultSigner) {\n                                this.setSigner(result.address);\n                            }\n                            return [2 /*return*/, result];\n                        }\n                        else {\n                            throw new Error('add account failed');\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * create a new account using Mnemonic\n     * @return {Account} {description}\n     *\n     * @example\n     * ```javascript\n     * console.log(wallet.accounts);\n     * wallet.createAccount();\n     * wallet.createAccount();\n     *\n     * console.log(wallet.accounts);\n     * ````\n     */\n    Wallet.prototype.createAccount = function (password, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var prv, acc, encrypted;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        prv = crypto_1.generatePrivateKey();\n                        acc = this.addByPrivateKey(prv);\n                        if (!(acc.address && password)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.encryptAccount(acc.address, password, options)];\n                    case 1:\n                        encrypted = _a.sent();\n                        return [2 /*return*/, encrypted];\n                    case 2:\n                        if (acc.address && !password) {\n                            return [2 /*return*/, acc];\n                        }\n                        else {\n                            throw new Error('create acount failed');\n                        }\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * To encrypt an account that lives in the wallet.\n     * if encrypted, returns original one, if not found, throw error\n     * @param {string} address - address in accounts\n     * @param {string} password - string that used to encrypt\n     * @param {EncryptOptions} options - encryption options\n     * @return {Promise<Account>}\n     *\n     * @example\n     * ```javascript\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * wallet.addByPrivateKey(key_1);\n     * wallet.encryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345').then((value) => {\n     *   console.log(value);\n     * })\n     * ```\n     */\n    Wallet.prototype.encryptAccount = function (address, password, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var foundAcc, error_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 5]);\n                        foundAcc = this.getAccount(address);\n                        if (!(foundAcc && foundAcc.privateKey && utils_1.isPrivateKey(foundAcc.privateKey))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, foundAcc.toFile(password, options)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, foundAcc];\n                    case 2:\n                        if (foundAcc && foundAcc.privateKey && !utils_1.isPrivateKey(foundAcc.privateKey)) {\n                            return [2 /*return*/, foundAcc];\n                        }\n                        else {\n                            throw new Error('encrypt account failed');\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        throw error_2;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * To decrypt an account that lives in the wallet,if not encrypted, return original,\n     * if not found, throw error\n     * @param {string} address - address in accounts\n     * @param {string} password - string that used to encrypt\n     * @return {Promise<Account>}\n     *\n     * @example\n     * ```javascript\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * wallet.addByPrivateKey(key_1);\n     * wallet.encryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n     * .then(() => {\n     *   wallet.decryptAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n     *   .then((value) =>{\n     *      console.log(value);\n     *   });\n     * });\n     * ```\n     */\n    Wallet.prototype.decryptAccount = function (address, password) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var foundAcc, error_3;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 5]);\n                        foundAcc = this.getAccount(address);\n                        if (!(foundAcc && foundAcc.privateKey && !utils_1.isPrivateKey(foundAcc.privateKey))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, foundAcc.fromFile(foundAcc.privateKey, password)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, foundAcc];\n                    case 2:\n                        if (foundAcc && foundAcc.privateKey && utils_1.isPrivateKey(foundAcc.privateKey)) {\n                            foundAcc.encrypted = false;\n                            return [2 /*return*/, foundAcc];\n                        }\n                        else {\n                            throw new Error('decrypt account failed');\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 5];\n                    case 4:\n                        error_3 = _a.sent();\n                        throw error_3;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Get Account instance using address as param\n     * @param  {string} address - address hex\n     * @return {Account} Account instance which lives in Wallet\n     *\n     * @example\n     * ```\n     * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n     * wallet.addByPrivateKey(key_1);\n     * console.log(wallet.getAccount('one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'));\n     * ```\n     */\n    Wallet.prototype.getAccount = function (address) {\n        return this.accountMap.get(crypto_1.getAddress(address).basicHex);\n    };\n    /**\n     * @function removeAccount\n     * @memberof Wallet\n     * @description remove Account using address as param\n     * @param  {string} address: - address hex\n     */\n    Wallet.prototype.removeAccount = function (address) {\n        this.accountMap.delete(crypto_1.getAddress(address).basicHex);\n        if (this.defaultSigner === address) {\n            this.defaultSigner = undefined;\n        }\n    };\n    /**\n     * Set Customer Messenage\n     * @param messenger\n     *\n     * @example\n     * ```javascript\n     * const customMessenger = new Messenger(\n     *   new HttpProvider('https://api.s0.b.hmny.io'),\n     *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n     *   ChainID.HmyLocal, // check if the chainId is correct\n     * )\n     * const wallet = new Wallet();\n     * wallet.setMessenger(customMessenger);\n     * console.log(wallet.messenger);\n     * ```\n     */\n    Wallet.prototype.setMessenger = function (messenger) {\n        this.messenger = messenger;\n    };\n    /**\n     * Set signer\n     *\n     * @param address one of the address in the accounts\n     */\n    Wallet.prototype.setSigner = function (address) {\n        if (!utils_1.isAddress(address) && !this.getAccount(address)) {\n            throw new Error('could not set signer');\n        }\n        this.defaultSigner = address;\n    };\n    Wallet.prototype.signTransaction = function (transaction, account, \n    // tslint:disable-next-line: no-unnecessary-initializer\n    password, updateNonce, encodeMode, blockNumber) {\n        if (account === void 0) { account = this.signer; }\n        if (password === void 0) { password = undefined; }\n        if (updateNonce === void 0) { updateNonce = true; }\n        if (encodeMode === void 0) { encodeMode = 'rlp'; }\n        if (blockNumber === void 0) { blockNumber = 'latest'; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var toSignWith, decrypted, signed, error_4, signed, error_5;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        toSignWith = account || this.signer;\n                        if (!toSignWith) {\n                            throw new Error('no signer found or did not provide correct account');\n                        }\n                        if (!(toSignWith instanceof account_1.Account && toSignWith.encrypted && toSignWith.address)) return [3 /*break*/, 7];\n                        if (!password) {\n                            throw new Error('must provide password to further execution');\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, this.decryptAccount(toSignWith.address, password)];\n                    case 2:\n                        decrypted = _a.sent();\n                        return [4 /*yield*/, decrypted.signTransaction(transaction, updateNonce, encodeMode, blockNumber)];\n                    case 3:\n                        signed = _a.sent();\n                        return [4 /*yield*/, this.encryptAccount(toSignWith.address, password)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/, signed];\n                    case 5:\n                        error_4 = _a.sent();\n                        throw error_4;\n                    case 6: return [3 /*break*/, 13];\n                    case 7:\n                        if (!(toSignWith instanceof account_1.Account && !toSignWith.encrypted && toSignWith.address)) return [3 /*break*/, 12];\n                        _a.label = 8;\n                    case 8:\n                        _a.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, toSignWith.signTransaction(transaction, updateNonce, encodeMode, blockNumber)];\n                    case 9:\n                        signed = _a.sent();\n                        return [2 /*return*/, signed];\n                    case 10:\n                        error_5 = _a.sent();\n                        throw error_5;\n                    case 11: return [3 /*break*/, 13];\n                    case 12: throw new Error('sign transaction failed');\n                    case 13: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Wallet.prototype.signStaking = function (staking, account, \n    // tslint:disable-next-line: no-unnecessary-initializer\n    password, updateNonce, encodeMode, blockNumber, shardID) {\n        if (account === void 0) { account = this.signer; }\n        if (password === void 0) { password = undefined; }\n        if (updateNonce === void 0) { updateNonce = true; }\n        if (encodeMode === void 0) { encodeMode = 'rlp'; }\n        if (blockNumber === void 0) { blockNumber = 'latest'; }\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var toSignWith, decrypted, signed, error_6, signed, error_7;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        toSignWith = account || this.signer;\n                        if (!toSignWith) {\n                            throw new Error('no signer found or did not provide correct account');\n                        }\n                        if (!(toSignWith instanceof account_1.Account && toSignWith.encrypted && toSignWith.address)) return [3 /*break*/, 7];\n                        if (!password) {\n                            throw new Error('must provide password to further execution');\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, this.decryptAccount(toSignWith.address, password)];\n                    case 2:\n                        decrypted = _a.sent();\n                        return [4 /*yield*/, decrypted.signStaking(staking, updateNonce, encodeMode, blockNumber, shardID)];\n                    case 3:\n                        signed = _a.sent();\n                        return [4 /*yield*/, this.encryptAccount(toSignWith.address, password)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/, signed];\n                    case 5:\n                        error_6 = _a.sent();\n                        throw error_6;\n                    case 6: return [3 /*break*/, 13];\n                    case 7:\n                        if (!(toSignWith instanceof account_1.Account && !toSignWith.encrypted && toSignWith.address)) return [3 /*break*/, 12];\n                        _a.label = 8;\n                    case 8:\n                        _a.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, toSignWith.signStaking(staking, updateNonce, encodeMode, blockNumber, shardID)];\n                    case 9:\n                        signed = _a.sent();\n                        return [2 /*return*/, signed];\n                    case 10:\n                        error_7 = _a.sent();\n                        throw error_7;\n                    case 11: return [3 /*break*/, 13];\n                    case 12: throw new Error('sign transaction failed');\n                    case 13: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @function isValidMnemonic\n     * @memberof Wallet\n     * @description check if Mnemonic is valid\n     * @param  {string} phrase - Mnemonic phrase\n     * @return {boolean}\n     * @ignore\n     */\n    Wallet.prototype.isValidMnemonic = function (phrase) {\n        if (phrase.trim().split(/\\s+/g).length < 12) {\n            return false;\n        }\n        return crypto_1.bip39.validateMnemonic(phrase);\n    };\n    return Wallet;\n}());\nexports.Wallet = Wallet;\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"script"}