{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/network\n\nThis package provides a collection of apis to create messengers (HTTP, WebSocket) to connect to blockchain networks.\n\n## Installation\n\n```\nnpm install @harmony-js/network\n```\n\n## Usage\n\n```javascript\nconst { Messenger, HttpProvider, WSProvider } = require('@harmony-js/network');\nconst { ChainID, ChainType } = require('@harmony-js/utils');\nconst testnetHTTP = 'https://api.s0.b.hmny.io';\nconst testnetWS = 'wss://ws.s0.b.hmny.io';\nconst localHTTP = 'http://localhost:9500/';\nconst localWS = 'http://localhost:9800/';\nconst http = new HttpProvider(testnetHTTP); // for local use localHTTP\nconst ws = new WSProvider(testnetWS); // for local use testnetWS\nconst customHTTPMessenger = new Messenger(http, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal\nconst customWSMessenger = new Messenger(ws, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal\n```\n *\n * @packageDocumentation\n * @module harmony-network\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RPCErrorCode = exports.RPCMethod = void 0;\n/**@ignore */\n\nvar RPCMethod;\n\n(function (RPCMethod) {\n  // 1. hmy_getBlockByHash\n  RPCMethod[\"GetBlockByHash\"] = \"hmy_getBlockByHash\"; // 2. hmy_getBlockByNumber\n\n  RPCMethod[\"GetBlockByNumber\"] = \"hmy_getBlockByNumber\"; // 3. hmy_getBlockTransactionCountByHash\n\n  RPCMethod[\"GetBlockTransactionCountByHash\"] = \"hmy_getBlockTransactionCountByHash\"; // 4. hmy_getBlockTransactionCountByNumber\n\n  RPCMethod[\"GetBlockTransactionCountByNumber\"] = \"hmy_getBlockTransactionCountByNumber\"; // 5. hmy_getCode\n\n  RPCMethod[\"GetCode\"] = \"hmy_getCode\"; // 6. hmy_getTransactionByBlockHashAndIndex\n\n  RPCMethod[\"GetTransactionByBlockHashAndIndex\"] = \"hmy_getTransactionByBlockHashAndIndex\"; // 7. hmy_getTransactionByBlockNumberAndIndex\n\n  RPCMethod[\"GetTransactionByBlockNumberAndIndex\"] = \"hmy_getTransactionByBlockNumberAndIndex\"; // 8. hmy_getTransactionByHash\n\n  RPCMethod[\"GetTransactionByHash\"] = \"hmy_getTransactionByHash\";\n  RPCMethod[\"GetTransactionReceipt\"] = \"hmy_getTransactionReceipt\";\n  RPCMethod[\"GetCXReceiptByHash\"] = \"hmy_getCXReceiptByHash\"; // 9. hmy_syncing\n\n  RPCMethod[\"Syncing\"] = \"hmy_syncing\"; // 10. net_peerCount\n\n  RPCMethod[\"PeerCount\"] = \"net_peerCount\"; // 11. hmy_getBalance\n\n  RPCMethod[\"GetBalance\"] = \"hmy_getBalance\"; // 12. hmy_getStorageAt\n\n  RPCMethod[\"GetStorageAt\"] = \"hmy_getStorageAt\"; // 13. hmy_getTransactionCount\n\n  RPCMethod[\"GetTransactionCount\"] = \"hmy_getTransactionCount\"; // 14. hmy_sendTransaction\n\n  RPCMethod[\"SendTransaction\"] = \"hmy_sendTransaction\"; // 15. hmy_sendRawTransaction\n\n  RPCMethod[\"SendRawTransaction\"] = \"hmy_sendRawTransaction\"; // 16. hmy_subscribe\n\n  RPCMethod[\"Subscribe\"] = \"hmy_subscribe\"; // 17. hmy_getlogs\n\n  RPCMethod[\"GetPastLogs\"] = \"hmy_getLogs\"; // 18. hmy_getWork\n\n  RPCMethod[\"GetWork\"] = \"hmy_getWork\"; // 19. hmy_submitWork\n  // SubmitWork = 'hmy_submitWork',\n  // 20. hmy_getProof\n\n  RPCMethod[\"GetProof\"] = \"hmy_getProof\"; // 21, hmy_getFilterChanges\n\n  RPCMethod[\"GetFilterChanges\"] = \"hmy_getFilterChanges\"; // 22. hmy_newPendingTransactionFilter\n\n  RPCMethod[\"NewPendingTransactionFilter\"] = \"hmy_newPendingTransactionFilter\"; // 23. hmy_newBlockFilter\n\n  RPCMethod[\"NewBlockFilter\"] = \"hmy_newBlockFilter\"; // 24. hmy_newFilter\n\n  RPCMethod[\"NewFilter\"] = \"hmy_newFilter\"; // 25. hmy_call\n\n  RPCMethod[\"Call\"] = \"hmy_call\"; // 26. hmy_estimateGas\n\n  RPCMethod[\"EstimateGas\"] = \"hmy_estimateGas\"; // 27. hmy_gasPrice\n\n  RPCMethod[\"GasPrice\"] = \"hmy_gasPrice\"; // 28. hmy_blockNumber\n\n  RPCMethod[\"BlockNumber\"] = \"hmy_blockNumber\"; // 29. hmy_unsubscribe\n\n  RPCMethod[\"UnSubscribe\"] = \"hmy_unsubscribe\"; // 30. net_version\n\n  RPCMethod[\"NetVersion\"] = \"net_version\"; // 31. hmy_protocolVersion\n\n  RPCMethod[\"ProtocolVersion\"] = \"hmy_protocolVersion\"; // 32. hmy_getShardingStructure\n\n  RPCMethod[\"GetShardingStructure\"] = \"hmy_getShardingStructure\"; // 33. hmy_sendRawStakingTransaction\n\n  RPCMethod[\"SendRawStakingTransaction\"] = \"hmy_sendRawStakingTransaction\"; // 34. hmy_getAccountNonce\n\n  RPCMethod[\"GetAccountNonce\"] = \"hmy_getAccountNonce\";\n})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));\n/**@ignore */\n\n\nvar RPCErrorCode;\n\n(function (RPCErrorCode) {\n  // Standard JSON-RPC 2.0 errors\n  // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n  // It should not be used for application-layer errors.\n  RPCErrorCode[RPCErrorCode[\"RPC_INVALID_REQUEST\"] = -32600] = \"RPC_INVALID_REQUEST\"; // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n  // It should not be used for application-layer errors.\n\n  RPCErrorCode[RPCErrorCode[\"RPC_METHOD_NOT_FOUND\"] = -32601] = \"RPC_METHOD_NOT_FOUND\";\n  RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMS\"] = -32602] = \"RPC_INVALID_PARAMS\"; // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n  // (for example datadir corruption).\n\n  RPCErrorCode[RPCErrorCode[\"RPC_INTERNAL_ERROR\"] = -32603] = \"RPC_INTERNAL_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_PARSE_ERROR\"] = -32700] = \"RPC_PARSE_ERROR\"; // General application defined errors\n\n  RPCErrorCode[RPCErrorCode[\"RPC_MISC_ERROR\"] = -1] = \"RPC_MISC_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_TYPE_ERROR\"] = -3] = \"RPC_TYPE_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_INVALID_ADDRESS_OR_KEY\"] = -5] = \"RPC_INVALID_ADDRESS_OR_KEY\";\n  RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMETER\"] = -8] = \"RPC_INVALID_PARAMETER\";\n  RPCErrorCode[RPCErrorCode[\"RPC_DATABASE_ERROR\"] = -20] = \"RPC_DATABASE_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_DESERIALIZATION_ERROR\"] = -22] = \"RPC_DESERIALIZATION_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_ERROR\"] = -25] = \"RPC_VERIFY_ERROR\";\n  RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_REJECTED\"] = -26] = \"RPC_VERIFY_REJECTED\";\n  RPCErrorCode[RPCErrorCode[\"RPC_IN_WARMUP\"] = -28] = \"RPC_IN_WARMUP\";\n  RPCErrorCode[RPCErrorCode[\"RPC_METHOD_DEPRECATED\"] = -32] = \"RPC_METHOD_DEPRECATED\";\n})(RPCErrorCode = exports.RPCErrorCode || (exports.RPCErrorCode = {}));","map":{"version":3,"sources":["../../src/rpcMethod/rpc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n # @harmony-js/network\n\nThis package provides a collection of apis to create messengers (HTTP, WebSocket) to connect to blockchain networks.\n\n## Installation\n\n```\nnpm install @harmony-js/network\n```\n\n## Usage\n\n```javascript\nconst { Messenger, HttpProvider, WSProvider } = require('@harmony-js/network');\nconst { ChainID, ChainType } = require('@harmony-js/utils');\nconst testnetHTTP = 'https://api.s0.b.hmny.io';\nconst testnetWS = 'wss://ws.s0.b.hmny.io';\nconst localHTTP = 'http://localhost:9500/';\nconst localWS = 'http://localhost:9800/';\nconst http = new HttpProvider(testnetHTTP); // for local use localHTTP\nconst ws = new WSProvider(testnetWS); // for local use testnetWS\nconst customHTTPMessenger = new Messenger(http, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal\nconst customWSMessenger = new Messenger(ws, ChainType.Harmony, ChainID.HmyTestnet); // for local ChainID.HmyLocal\n```\n *\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCErrorCode = exports.RPCMethod = void 0;\n/**@ignore */\nvar RPCMethod;\n(function (RPCMethod) {\n    // 1. hmy_getBlockByHash\n    RPCMethod[\"GetBlockByHash\"] = \"hmy_getBlockByHash\";\n    // 2. hmy_getBlockByNumber\n    RPCMethod[\"GetBlockByNumber\"] = \"hmy_getBlockByNumber\";\n    // 3. hmy_getBlockTransactionCountByHash\n    RPCMethod[\"GetBlockTransactionCountByHash\"] = \"hmy_getBlockTransactionCountByHash\";\n    // 4. hmy_getBlockTransactionCountByNumber\n    RPCMethod[\"GetBlockTransactionCountByNumber\"] = \"hmy_getBlockTransactionCountByNumber\";\n    // 5. hmy_getCode\n    RPCMethod[\"GetCode\"] = \"hmy_getCode\";\n    // 6. hmy_getTransactionByBlockHashAndIndex\n    RPCMethod[\"GetTransactionByBlockHashAndIndex\"] = \"hmy_getTransactionByBlockHashAndIndex\";\n    // 7. hmy_getTransactionByBlockNumberAndIndex\n    RPCMethod[\"GetTransactionByBlockNumberAndIndex\"] = \"hmy_getTransactionByBlockNumberAndIndex\";\n    // 8. hmy_getTransactionByHash\n    RPCMethod[\"GetTransactionByHash\"] = \"hmy_getTransactionByHash\";\n    RPCMethod[\"GetTransactionReceipt\"] = \"hmy_getTransactionReceipt\";\n    RPCMethod[\"GetCXReceiptByHash\"] = \"hmy_getCXReceiptByHash\";\n    // 9. hmy_syncing\n    RPCMethod[\"Syncing\"] = \"hmy_syncing\";\n    // 10. net_peerCount\n    RPCMethod[\"PeerCount\"] = \"net_peerCount\";\n    // 11. hmy_getBalance\n    RPCMethod[\"GetBalance\"] = \"hmy_getBalance\";\n    // 12. hmy_getStorageAt\n    RPCMethod[\"GetStorageAt\"] = \"hmy_getStorageAt\";\n    // 13. hmy_getTransactionCount\n    RPCMethod[\"GetTransactionCount\"] = \"hmy_getTransactionCount\";\n    // 14. hmy_sendTransaction\n    RPCMethod[\"SendTransaction\"] = \"hmy_sendTransaction\";\n    // 15. hmy_sendRawTransaction\n    RPCMethod[\"SendRawTransaction\"] = \"hmy_sendRawTransaction\";\n    // 16. hmy_subscribe\n    RPCMethod[\"Subscribe\"] = \"hmy_subscribe\";\n    // 17. hmy_getlogs\n    RPCMethod[\"GetPastLogs\"] = \"hmy_getLogs\";\n    // 18. hmy_getWork\n    RPCMethod[\"GetWork\"] = \"hmy_getWork\";\n    // 19. hmy_submitWork\n    // SubmitWork = 'hmy_submitWork',\n    // 20. hmy_getProof\n    RPCMethod[\"GetProof\"] = \"hmy_getProof\";\n    // 21, hmy_getFilterChanges\n    RPCMethod[\"GetFilterChanges\"] = \"hmy_getFilterChanges\";\n    // 22. hmy_newPendingTransactionFilter\n    RPCMethod[\"NewPendingTransactionFilter\"] = \"hmy_newPendingTransactionFilter\";\n    // 23. hmy_newBlockFilter\n    RPCMethod[\"NewBlockFilter\"] = \"hmy_newBlockFilter\";\n    // 24. hmy_newFilter\n    RPCMethod[\"NewFilter\"] = \"hmy_newFilter\";\n    // 25. hmy_call\n    RPCMethod[\"Call\"] = \"hmy_call\";\n    // 26. hmy_estimateGas\n    RPCMethod[\"EstimateGas\"] = \"hmy_estimateGas\";\n    // 27. hmy_gasPrice\n    RPCMethod[\"GasPrice\"] = \"hmy_gasPrice\";\n    // 28. hmy_blockNumber\n    RPCMethod[\"BlockNumber\"] = \"hmy_blockNumber\";\n    // 29. hmy_unsubscribe\n    RPCMethod[\"UnSubscribe\"] = \"hmy_unsubscribe\";\n    // 30. net_version\n    RPCMethod[\"NetVersion\"] = \"net_version\";\n    // 31. hmy_protocolVersion\n    RPCMethod[\"ProtocolVersion\"] = \"hmy_protocolVersion\";\n    // 32. hmy_getShardingStructure\n    RPCMethod[\"GetShardingStructure\"] = \"hmy_getShardingStructure\";\n    // 33. hmy_sendRawStakingTransaction\n    RPCMethod[\"SendRawStakingTransaction\"] = \"hmy_sendRawStakingTransaction\";\n    // 34. hmy_getAccountNonce\n    RPCMethod[\"GetAccountNonce\"] = \"hmy_getAccountNonce\";\n})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));\n/**@ignore */\nvar RPCErrorCode;\n(function (RPCErrorCode) {\n    // Standard JSON-RPC 2.0 errors\n    // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n    // It should not be used for application-layer errors.\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_REQUEST\"] = -32600] = \"RPC_INVALID_REQUEST\";\n    // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n    // It should not be used for application-layer errors.\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_NOT_FOUND\"] = -32601] = \"RPC_METHOD_NOT_FOUND\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMS\"] = -32602] = \"RPC_INVALID_PARAMS\";\n    // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n    // (for example datadir corruption).\n    RPCErrorCode[RPCErrorCode[\"RPC_INTERNAL_ERROR\"] = -32603] = \"RPC_INTERNAL_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_PARSE_ERROR\"] = -32700] = \"RPC_PARSE_ERROR\";\n    // General application defined errors\n    RPCErrorCode[RPCErrorCode[\"RPC_MISC_ERROR\"] = -1] = \"RPC_MISC_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_TYPE_ERROR\"] = -3] = \"RPC_TYPE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_ADDRESS_OR_KEY\"] = -5] = \"RPC_INVALID_ADDRESS_OR_KEY\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMETER\"] = -8] = \"RPC_INVALID_PARAMETER\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DATABASE_ERROR\"] = -20] = \"RPC_DATABASE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DESERIALIZATION_ERROR\"] = -22] = \"RPC_DESERIALIZATION_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_ERROR\"] = -25] = \"RPC_VERIFY_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_REJECTED\"] = -26] = \"RPC_VERIFY_REJECTED\";\n    RPCErrorCode[RPCErrorCode[\"RPC_IN_WARMUP\"] = -28] = \"RPC_IN_WARMUP\";\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_DEPRECATED\"] = -32] = \"RPC_METHOD_DEPRECATED\";\n})(RPCErrorCode = exports.RPCErrorCode || (exports.RPCErrorCode = {}));\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"script"}