{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BridgeSDK = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst OperationClass_1 = require(\"./OperationClass\");\n\ntslib_1.__exportStar(require(\"./interfaces\"), exports);\n\ntslib_1.__exportStar(require(\"./configs\"), exports);\n\nconst api_1 = require(\"./api\");\n\nconst eth_1 = require(\"./blockchain/eth\");\n\nconst hmy_1 = require(\"./blockchain/hmy\");\n\nconst operation_1 = require(\"./operation\");\n\nconst interfaces_1 = require(\"./interfaces\");\n\nconst logs_1 = require(\"./utils/logs\");\n\nclass BridgeSDK {\n  constructor(params) {\n    this.init = async params => {\n      this.api = new api_1.ValidatorsAPI(params.api);\n      this.ethClient = eth_1.getWeb3Client(params.ethClient);\n      this.bscClient = eth_1.getWeb3Client(params.binanceClient);\n      this.hmyClient = await hmy_1.getHmyClient(Object.assign(Object.assign({}, params.hmyClient), {\n        sdk: params.sdk\n      }));\n    };\n\n    this.addOneWallet = async privateKey => {\n      await this.hmyClient.addWallet(privateKey);\n    };\n\n    this.addEthWallet = async privateKey => {\n      await this.ethClient.addWallet(privateKey);\n      await this.bscClient.addWallet(privateKey);\n    };\n\n    this.setUseMetamask = value => {\n      this.ethClient.setUseMetamask(value);\n      this.bscClient.setUseMetamask(value);\n    };\n\n    this.setUseOneWallet = value => this.hmyClient.setUseOneWallet(value);\n\n    this.setUseMathWallet = value => this.hmyClient.setUseMathWallet(value);\n\n    this.sendToken = async (params, callback) => {\n      return await operation_1.operation(Object.assign(Object.assign({}, params), {\n        api: this.api,\n        web3Client: params.network === interfaces_1.NETWORK_TYPE.BINANCE ? this.bscClient : this.ethClient,\n        hmyClient: this.hmyClient,\n        maxWaitingTime: params.maxWaitingTime || 20 * 60,\n        network: params.network || interfaces_1.NETWORK_TYPE.ETHEREUM\n      }), callback);\n    };\n\n    this.createOperation = async params => {\n      const operation = new OperationClass_1.OperationClass(this);\n      await operation.create(params);\n      return operation;\n    };\n\n    this.restoreOperationById = async id => {\n      const operation = new OperationClass_1.OperationClass(this);\n      await operation.restoreById(id);\n      return operation;\n    };\n\n    logs_1.logger.setLogLevel(params.logLevel);\n  }\n\n}\n\nexports.BridgeSDK = BridgeSDK;","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/index.js"],"names":["Object","defineProperty","exports","value","BridgeSDK","tslib_1","require","OperationClass_1","__exportStar","api_1","eth_1","hmy_1","operation_1","interfaces_1","logs_1","constructor","params","init","api","ValidatorsAPI","ethClient","getWeb3Client","bscClient","binanceClient","hmyClient","getHmyClient","assign","sdk","addOneWallet","privateKey","addWallet","addEthWallet","setUseMetamask","setUseOneWallet","setUseMathWallet","sendToken","callback","operation","web3Client","network","NETWORK_TYPE","BINANCE","maxWaitingTime","ETHEREUM","createOperation","OperationClass","create","restoreOperationById","id","restoreById","logger","setLogLevel","logLevel"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BridgeSDK = void 0;\nconst tslib_1 = require(\"tslib\");\nconst OperationClass_1 = require(\"./OperationClass\");\ntslib_1.__exportStar(require(\"./interfaces\"), exports);\ntslib_1.__exportStar(require(\"./configs\"), exports);\nconst api_1 = require(\"./api\");\nconst eth_1 = require(\"./blockchain/eth\");\nconst hmy_1 = require(\"./blockchain/hmy\");\nconst operation_1 = require(\"./operation\");\nconst interfaces_1 = require(\"./interfaces\");\nconst logs_1 = require(\"./utils/logs\");\nclass BridgeSDK {\n    constructor(params) {\n        this.init = async (params) => {\n            this.api = new api_1.ValidatorsAPI(params.api);\n            this.ethClient = eth_1.getWeb3Client(params.ethClient);\n            this.bscClient = eth_1.getWeb3Client(params.binanceClient);\n            this.hmyClient = await hmy_1.getHmyClient(Object.assign(Object.assign({}, params.hmyClient), { sdk: params.sdk }));\n        };\n        this.addOneWallet = async (privateKey) => {\n            await this.hmyClient.addWallet(privateKey);\n        };\n        this.addEthWallet = async (privateKey) => {\n            await this.ethClient.addWallet(privateKey);\n            await this.bscClient.addWallet(privateKey);\n        };\n        this.setUseMetamask = (value) => {\n            this.ethClient.setUseMetamask(value);\n            this.bscClient.setUseMetamask(value);\n        };\n        this.setUseOneWallet = (value) => this.hmyClient.setUseOneWallet(value);\n        this.setUseMathWallet = (value) => this.hmyClient.setUseMathWallet(value);\n        this.sendToken = async (params, callback) => {\n            return await operation_1.operation(Object.assign(Object.assign({}, params), { api: this.api, web3Client: params.network === interfaces_1.NETWORK_TYPE.BINANCE ? this.bscClient : this.ethClient, hmyClient: this.hmyClient, maxWaitingTime: params.maxWaitingTime || 20 * 60, network: params.network || interfaces_1.NETWORK_TYPE.ETHEREUM }), callback);\n        };\n        this.createOperation = async (params) => {\n            const operation = new OperationClass_1.OperationClass(this);\n            await operation.create(params);\n            return operation;\n        };\n        this.restoreOperationById = async (id) => {\n            const operation = new OperationClass_1.OperationClass(this);\n            await operation.restoreById(id);\n            return operation;\n        };\n        logs_1.logger.setLogLevel(params.logLevel);\n    }\n}\nexports.BridgeSDK = BridgeSDK;\n"]},"metadata":{},"sourceType":"script"}