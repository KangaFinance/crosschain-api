{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Harmony = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\n\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar transaction_1 = require(\"@harmony-js/transaction\");\n\nvar staking_1 = require(\"@harmony-js/staking\");\n\nvar contract_1 = require(\"@harmony-js/contract\");\n\nvar account_1 = require(\"@harmony-js/account\");\n\nvar blockchain_1 = require(\"./blockchain\");\n\nvar Harmony = function (_super) {\n  tslib_1.__extends(Harmony, _super);\n  /**\n   * Create a harmony instance\n   *\n   * @param url The end-points of the hmy blockchain\n   * @param config set up `ChainID` and `ChainType`, typically we can use the default values\n   *\n   * @example\n   * ```\n   * // import or require Harmony class\n   * const { Harmony } = require('@harmony-js/core');\n   *\n   * // import or require settings\n   * const { ChainID, ChainType } = require('@harmony-js/utils');\n   *\n   * // Initialize the Harmony instance\n   * const hmy = new Harmony(\n   *   // rpc url:\n   *   // local: http://localhost:9500\n   *   // testnet: https://api.s0.b.hmny.io/\n   *   // mainnet: https://api.s0.t.hmny.io/\n   *   'http://localhost:9500',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   * ```\n   */\n\n\n  function Harmony(url, config) {\n    if (config === void 0) {\n      config = {\n        chainId: utils.defaultConfig.Default.Chain_ID,\n        chainType: utils.defaultConfig.Default.Chain_Type\n      };\n    }\n\n    var _this = _super.call(this, config.chainType, config.chainId) || this;\n    /**@ignore*/\n\n\n    _this.Modules = {\n      HttpProvider: network_1.HttpProvider,\n      WSProvider: network_1.WSProvider,\n      Messenger: network_1.Messenger,\n      Blockchain: blockchain_1.Blockchain,\n      TransactionFactory: transaction_1.TransactionFactory,\n      StakingFactory: staking_1.StakingFactory,\n      Wallet: account_1.Wallet,\n      Transaction: transaction_1.Transaction,\n      StakingTransaction: staking_1.StakingTransaction,\n      Account: account_1.Account,\n      Contract: contract_1.Contract\n    };\n    var providerUrl = config.chainUrl || url || utils.defaultConfig.Default.Chain_URL;\n    _this.provider = new network_1.Provider(providerUrl).provider;\n    _this.messenger = new network_1.Messenger(_this.provider, _this.chainType, _this.chainId);\n    _this.blockchain = new blockchain_1.Blockchain(_this.messenger);\n    _this.transactions = new transaction_1.TransactionFactory(_this.messenger);\n    _this.stakings = new staking_1.StakingFactory(_this.messenger);\n    _this.wallet = new account_1.Wallet(_this.messenger);\n    _this.contracts = new contract_1.ContractFactory(_this.wallet);\n    _this.crypto = crypto;\n    _this.utils = utils;\n    _this.defaultShardID = config.shardID;\n\n    if (_this.defaultShardID !== undefined) {\n      _this.setShardID(_this.defaultShardID);\n    }\n\n    return _this;\n  }\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmy.setProvider('http://localhost:9500');\n   * ```\n   */\n\n\n  Harmony.prototype.setProvider = function (provider) {\n    this.provider = new network_1.Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  };\n  /**\n   * set the chainID\n   *\n   * @hint\n   * ```\n   * Default = 0,\n   * EthMainnet = 1,\n    Morden = 2,\n    Ropsten = 3,\n    Rinkeby = 4,\n    RootstockMainnet = 30,\n    RootstockTestnet = 31,\n    Kovan = 42,\n    EtcMainnet = 61,\n    EtcTestnet = 62,\n    Geth = 1337,\n    Ganache = 0,\n    HmyMainnet = 1,\n    HmyTestnet = 2,\n    HmyLocal = 2,\n    HmyPangaea = 3\n   * ```\n   * @param chainId\n   *\n   * @example\n   * ```\n   * hmy.setChainId(2);\n   * ```\n   */\n\n\n  Harmony.prototype.setChainId = function (chainId) {\n    this.chainId = chainId;\n    this.messenger.setChainId(this.chainId);\n    this.setMessenger(this.messenger);\n  };\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmy.setShardID(2);\n   * ```\n   */\n\n\n  Harmony.prototype.setShardID = function (shardID) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  };\n  /**\n   * set the chainType\n   *\n   * @param chainType `hmy` or `eth`\n   *\n   * @example\n   * ```\n   * // set chainType to hmy\n   * hmy.setChainType('hmy');\n   * // set chainType to eth\n   * hmy.setChainType('eth');\n   * ```\n   */\n\n\n  Harmony.prototype.setChainType = function (chainType) {\n    this.chainType = chainType;\n    this.messenger.setChainType(this.chainType);\n    this.setMessenger(this.messenger);\n  };\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmy.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n\n\n  Harmony.prototype.shardingStructures = function (shardingStructures) {\n    var e_1, _a;\n\n    try {\n      for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n        var shard = shardingStructures_1_1.value;\n        var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n        this.messenger.shardProviders.set(shardID, {\n          current: shard.current !== undefined ? shard.current : false,\n          shardID: shardID,\n          http: shard.http,\n          ws: shard.ws\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.setMessenger(this.messenger);\n  };\n  /**@ignore*/\n\n\n  Harmony.prototype.setMessenger = function (messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.setMessenger(messenger);\n    this.transactions.setMessenger(messenger);\n    this.stakings.setMessenger(messenger);\n  };\n\n  return Harmony;\n}(utils.HarmonyCore);\n\nexports.Harmony = Harmony;","map":{"version":3,"sources":["../src/harmony.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Harmony = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar staking_1 = require(\"@harmony-js/staking\");\nvar contract_1 = require(\"@harmony-js/contract\");\nvar account_1 = require(\"@harmony-js/account\");\nvar blockchain_1 = require(\"./blockchain\");\nvar Harmony = /** @class */ (function (_super) {\n    tslib_1.__extends(Harmony, _super);\n    /**\n     * Create a harmony instance\n     *\n     * @param url The end-points of the hmy blockchain\n     * @param config set up `ChainID` and `ChainType`, typically we can use the default values\n     *\n     * @example\n     * ```\n     * // import or require Harmony class\n     * const { Harmony } = require('@harmony-js/core');\n     *\n     * // import or require settings\n     * const { ChainID, ChainType } = require('@harmony-js/utils');\n     *\n     * // Initialize the Harmony instance\n     * const hmy = new Harmony(\n     *   // rpc url:\n     *   // local: http://localhost:9500\n     *   // testnet: https://api.s0.b.hmny.io/\n     *   // mainnet: https://api.s0.t.hmny.io/\n     *   'http://localhost:9500',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     * ```\n     */\n    function Harmony(url, config) {\n        if (config === void 0) { config = {\n            chainId: utils.defaultConfig.Default.Chain_ID,\n            chainType: utils.defaultConfig.Default.Chain_Type,\n        }; }\n        var _this = _super.call(this, config.chainType, config.chainId) || this;\n        /**@ignore*/\n        _this.Modules = {\n            HttpProvider: network_1.HttpProvider,\n            WSProvider: network_1.WSProvider,\n            Messenger: network_1.Messenger,\n            Blockchain: blockchain_1.Blockchain,\n            TransactionFactory: transaction_1.TransactionFactory,\n            StakingFactory: staking_1.StakingFactory,\n            Wallet: account_1.Wallet,\n            Transaction: transaction_1.Transaction,\n            StakingTransaction: staking_1.StakingTransaction,\n            Account: account_1.Account,\n            Contract: contract_1.Contract,\n        };\n        var providerUrl = config.chainUrl || url || utils.defaultConfig.Default.Chain_URL;\n        _this.provider = new network_1.Provider(providerUrl).provider;\n        _this.messenger = new network_1.Messenger(_this.provider, _this.chainType, _this.chainId);\n        _this.blockchain = new blockchain_1.Blockchain(_this.messenger);\n        _this.transactions = new transaction_1.TransactionFactory(_this.messenger);\n        _this.stakings = new staking_1.StakingFactory(_this.messenger);\n        _this.wallet = new account_1.Wallet(_this.messenger);\n        _this.contracts = new contract_1.ContractFactory(_this.wallet);\n        _this.crypto = crypto;\n        _this.utils = utils;\n        _this.defaultShardID = config.shardID;\n        if (_this.defaultShardID !== undefined) {\n            _this.setShardID(_this.defaultShardID);\n        }\n        return _this;\n    }\n    /**\n     * Will change the provider for its module.\n     *\n     * @param provider a valid provider, you can replace it with your own working node\n     *\n     * @example\n     * ```javascript\n     * const tmp = hmy.setProvider('http://localhost:9500');\n     * ```\n     */\n    Harmony.prototype.setProvider = function (provider) {\n        this.provider = new network_1.Provider(provider).provider;\n        this.messenger.setProvider(this.provider);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * set the chainID\n     *\n     * @hint\n     * ```\n     * Default = 0,\n     * EthMainnet = 1,\n      Morden = 2,\n      Ropsten = 3,\n      Rinkeby = 4,\n      RootstockMainnet = 30,\n      RootstockTestnet = 31,\n      Kovan = 42,\n      EtcMainnet = 61,\n      EtcTestnet = 62,\n      Geth = 1337,\n      Ganache = 0,\n      HmyMainnet = 1,\n      HmyTestnet = 2,\n      HmyLocal = 2,\n      HmyPangaea = 3\n     * ```\n     * @param chainId\n     *\n     * @example\n     * ```\n     * hmy.setChainId(2);\n     * ```\n     */\n    Harmony.prototype.setChainId = function (chainId) {\n        this.chainId = chainId;\n        this.messenger.setChainId(this.chainId);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Change the Shard ID\n     *\n     * @example\n     * ```\n     * hmy.setShardID(2);\n     * ```\n     */\n    Harmony.prototype.setShardID = function (shardID) {\n        this.defaultShardID = shardID;\n        this.messenger.setDefaultShardID(this.defaultShardID);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * set the chainType\n     *\n     * @param chainType `hmy` or `eth`\n     *\n     * @example\n     * ```\n     * // set chainType to hmy\n     * hmy.setChainType('hmy');\n     * // set chainType to eth\n     * hmy.setChainType('eth');\n     * ```\n     */\n    Harmony.prototype.setChainType = function (chainType) {\n        this.chainType = chainType;\n        this.messenger.setChainType(this.chainType);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Set the sharding Structure\n     *\n     * @param shardingStructures The array of information of sharding structures\n     *\n     * @example\n     * ```javascript\n     * hmy.shardingStructures([\n     *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n     *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n     *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n     *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n     * ]);\n     * ```\n     */\n    Harmony.prototype.shardingStructures = function (shardingStructures) {\n        var e_1, _a;\n        try {\n            for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                var shard = shardingStructures_1_1.value;\n                var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                this.messenger.shardProviders.set(shardID, {\n                    current: shard.current !== undefined ? shard.current : false,\n                    shardID: shardID,\n                    http: shard.http,\n                    ws: shard.ws,\n                });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.setMessenger(this.messenger);\n    };\n    /**@ignore*/\n    Harmony.prototype.setMessenger = function (messenger) {\n        this.blockchain.setMessenger(messenger);\n        this.wallet.setMessenger(messenger);\n        this.transactions.setMessenger(messenger);\n        this.stakings.setMessenger(messenger);\n    };\n    return Harmony;\n}(utils.HarmonyCore));\nexports.Harmony = Harmony;\n//# sourceMappingURL=harmony.js.map"]},"metadata":{},"sourceType":"script"}