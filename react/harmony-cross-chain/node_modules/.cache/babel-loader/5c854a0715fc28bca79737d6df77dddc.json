{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethToOneErc721 = void 0;\n\nconst interfaces_1 = require(\"../interfaces\");\n\nconst logs_1 = require(\"../utils/logs\");\n\nconst operation_helpers_1 = require(\"../operation-helpers\");\n\nconst utils_1 = require(\"../utils\");\n\nexports.ethToOneErc721 = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n  let operation = await api.getOperation(operationParams.id);\n  let getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n\n  if (getHRC20Action) {\n    logs_1.logger.wait({\n      prefix,\n      message: 'getHRC20Address'\n    });\n  }\n\n  while (getHRC20Action && [interfaces_1.STATUS.IN_PROGRESS, interfaces_1.STATUS.WAITING].includes(getHRC20Action.status)) {\n    await utils_1.sleep(3000);\n    operation = await api.getOperation(operationParams.id);\n    getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n  }\n\n  const approveEthManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveEthManger);\n\n  if (approveEthManger && approveEthManger.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'approveHmyManger'\n    });\n    const {\n      erc20Address\n    } = operationParams;\n    await ethMethods.setApprovalForAllEthManger(erc20Address, hash => operation_helpers_1.confirmCallback(api, hash, approveEthManger.type, operationParams.id));\n    logs_1.logger.success({\n      prefix,\n      message: 'approveHmyManger'\n    });\n  }\n\n  operation = await api.getOperation(operationParams.id);\n  const lockToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.lockToken);\n\n  if (lockToken && lockToken.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'lockToken'\n    });\n    const res = await ethMethods.lockTokens(operationParams.erc20Address, operationParams.oneAddress, operationParams.amount, hash => operation_helpers_1.confirmCallback(api, hash, lockToken.type, operationParams.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'lockToken'\n    });\n  }\n\n  const waitingBlockNumber = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.waitingBlockNumber, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(waitingBlockNumber, prefix, interfaces_1.ACTION_TYPE.waitingBlockNumber)) {\n    return false;\n  }\n\n  const mintToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.mintToken, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(mintToken, prefix, interfaces_1.ACTION_TYPE.mintToken)) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operations/ethToOneErc721.js"],"names":["Object","defineProperty","exports","value","ethToOneErc721","interfaces_1","require","logs_1","operation_helpers_1","utils_1","api","operationParams","ethMethods","hmyMethods","prefix","maxWaitingTime","operation","getOperation","id","getHRC20Action","getActionByType","ACTION_TYPE","getHRC20Address","logger","wait","message","STATUS","IN_PROGRESS","WAITING","includes","status","sleep","approveEthManger","pending","erc20Address","setApprovalForAllEthManger","hash","confirmCallback","type","success","lockToken","res","lockTokens","oneAddress","amount","info","waitingBlockNumber","waitAction","checkStatus","mintToken"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethToOneErc721 = void 0;\nconst interfaces_1 = require(\"../interfaces\");\nconst logs_1 = require(\"../utils/logs\");\nconst operation_helpers_1 = require(\"../operation-helpers\");\nconst utils_1 = require(\"../utils\");\nexports.ethToOneErc721 = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n    let operation = await api.getOperation(operationParams.id);\n    let getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n    if (getHRC20Action) {\n        logs_1.logger.wait({ prefix, message: 'getHRC20Address' });\n    }\n    while (getHRC20Action && [interfaces_1.STATUS.IN_PROGRESS, interfaces_1.STATUS.WAITING].includes(getHRC20Action.status)) {\n        await utils_1.sleep(3000);\n        operation = await api.getOperation(operationParams.id);\n        getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n    }\n    const approveEthManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveEthManger);\n    if (approveEthManger && approveEthManger.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'approveHmyManger' });\n        const { erc20Address } = operationParams;\n        await ethMethods.setApprovalForAllEthManger(erc20Address, (hash) => operation_helpers_1.confirmCallback(api, hash, approveEthManger.type, operationParams.id));\n        logs_1.logger.success({ prefix, message: 'approveHmyManger' });\n    }\n    operation = await api.getOperation(operationParams.id);\n    const lockToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.lockToken);\n    if (lockToken && lockToken.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'lockToken' });\n        const res = await ethMethods.lockTokens(operationParams.erc20Address, operationParams.oneAddress, operationParams.amount, (hash) => operation_helpers_1.confirmCallback(api, hash, lockToken.type, operationParams.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'lockToken' });\n    }\n    const waitingBlockNumber = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.waitingBlockNumber, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(waitingBlockNumber, prefix, interfaces_1.ACTION_TYPE.waitingBlockNumber)) {\n        return false;\n    }\n    const mintToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.mintToken, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(mintToken, prefix, interfaces_1.ACTION_TYPE.mintToken)) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}