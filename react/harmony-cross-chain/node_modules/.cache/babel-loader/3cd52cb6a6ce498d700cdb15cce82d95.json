{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HarmonyExtension = exports.ExtensionType = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar network_1 = require(\"@harmony-js/network\");\n\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\n\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\n\nvar transaction_1 = require(\"@harmony-js/transaction\");\n\nvar blockchain_1 = require(\"./blockchain\");\n\nvar contract_1 = require(\"@harmony-js/contract\");\n/** @hidden */\n\n\nvar ExtensionType;\n\n(function (ExtensionType) {\n  ExtensionType[\"MathWallet\"] = \"MathWallet\";\n  ExtensionType[\"OneWallet\"] = \"OneWallet\";\n})(ExtensionType = exports.ExtensionType || (exports.ExtensionType = {}));\n\nvar HarmonyExtension = function () {\n  /**\n   * Create an blockchain instance support wallet injection\n   *\n   * @param wallet could be MathWallet or OneWallet instance\n   * @param config (optional), using default `Chain_Id` and `Chain_Type`\n   *\n   * @example\n   * ```javascript\n   * // Using Mathwallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new HarmonyExtension(window.harmony);\n   * }\n   * // Using OneWallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new HarmonyExtension(window.onewallet);\n   * }\n   * ```\n   */\n  function HarmonyExtension(wallet, config) {\n    if (config === void 0) {\n      config = {\n        chainId: utils.defaultConfig.Default.Chain_ID,\n        chainType: utils.defaultConfig.Default.Chain_Type\n      };\n    }\n\n    this.extensionType = null;\n    this.wallet = wallet; // check if it is mathwallet or onewallet\n\n    this.isExtension(this.wallet);\n\n    if (wallet.messenger) {\n      this.provider = wallet.messenger.provider;\n      this.messenger = wallet.messenger;\n    } else {\n      this.provider = new network_1.Provider(config.chainUrl || wallet.network.chain_url).provider;\n      this.messenger = new network_1.Messenger(this.provider, config.chainType, config.chainId);\n    }\n\n    this.wallet.messenger = this.messenger;\n    this.blockchain = new blockchain_1.Blockchain(this.messenger);\n    this.transactions = new transaction_1.TransactionFactory(this.messenger);\n    this.contracts = new contract_1.ContractFactory(this.wallet);\n    this.crypto = crypto;\n    this.utils = utils;\n  }\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmyEx.setProvider('http://localhost:9500');\n   * ```\n   */\n\n\n  HarmonyExtension.prototype.setProvider = function (provider) {\n    this.provider = new network_1.Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  };\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmyEx.setShardID(2);\n   * ```\n   */\n\n\n  HarmonyExtension.prototype.setShardID = function (shardID) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  };\n\n  HarmonyExtension.prototype.isExtension = function (wallet) {\n    var _this = this;\n\n    var isExtension = false;\n    this.extensionType = null;\n\n    if (wallet.isMathWallet || wallet.isOneWallet) {\n      isExtension = true;\n      if (wallet.isMathWallet) this.extensionType = ExtensionType.MathWallet;else this.extensionType = ExtensionType.OneWallet; // remake signTransaction of MathWallet or OneWallet\n\n      var signTransaction_1 = this.wallet.signTransaction;\n\n      this.wallet.signTransaction = function (transaction, updateNonce, encodeMode, blockNumber) {\n        if (updateNonce === void 0) {\n          updateNonce = true;\n        }\n\n        if (encodeMode === void 0) {\n          encodeMode = 'rlp';\n        }\n\n        if (blockNumber === void 0) {\n          blockNumber = 'latest';\n        }\n\n        return tslib_1.__awaiter(_this, void 0, void 0, function () {\n          var extensionAccount, nonce;\n          return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.wallet.getAccount()];\n\n              case 1:\n                extensionAccount = _a.sent();\n                if (!updateNonce) return [3\n                /*break*/\n                , 3];\n                return [4\n                /*yield*/\n                , this.messenger.send(network_1.RPCMethod.GetAccountNonce, [crypto.getAddress(extensionAccount.address).checksum, blockNumber], this.messenger.chainPrefix, typeof transaction.txParams.shardID === 'string' ? Number.parseInt(transaction.txParams.shardID, 10) : transaction.txParams.shardID)];\n\n              case 2:\n                nonce = _a.sent();\n                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), {\n                  from: crypto.getAddress(extensionAccount.address).bech32,\n                  nonce: Number.parseInt(utils.isHex(nonce.result.toString()) ? utils.hexToNumber(nonce.result.toString()) : nonce.result.toString(), 10)\n                }));\n                return [3\n                /*break*/\n                , 4];\n\n              case 3:\n                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), {\n                  from: crypto.getAddress(extensionAccount.address).bech32\n                }));\n                _a.label = 4;\n\n              case 4:\n                return [2\n                /*return*/\n                , signTransaction_1(transaction, false, encodeMode, blockNumber)];\n            }\n          });\n        });\n      };\n    }\n\n    if (!isExtension) {\n      throw new Error('Extension is not found');\n    }\n\n    return;\n  };\n  /**\n   * Get the wallet account\n   *\n   * @example\n   * ```javascript\n   * const account = hmyEx.login();\n   * console.log(account);\n   * ```\n   */\n\n\n  HarmonyExtension.prototype.login = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var account;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.wallet.getAccount()];\n\n          case 1:\n            account = _a.sent(); // Use address\n\n            return [2\n            /*return*/\n            , account];\n        }\n      });\n    });\n  };\n  /**\n   * Log out the wallet account\n   *\n   * @example\n   * ```javascript\n   * hmyEx.logout();\n   * ```\n   */\n\n\n  HarmonyExtension.prototype.logout = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.wallet.forgetIdentity()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmyEx.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n\n\n  HarmonyExtension.prototype.shardingStructures = function (shardingStructures) {\n    var e_1, _a;\n\n    try {\n      for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n        var shard = shardingStructures_1_1.value;\n        var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n        this.messenger.shardProviders.set(shardID, {\n          current: shard.current !== undefined ? shard.current : false,\n          shardID: shardID,\n          http: shard.http,\n          ws: shard.ws\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.setMessenger(this.messenger);\n  };\n  /**@ignore*/\n\n\n  HarmonyExtension.prototype.setMessenger = function (messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.messenger = messenger;\n    this.transactions.setMessenger(messenger);\n  };\n\n  return HarmonyExtension;\n}();\n\nexports.HarmonyExtension = HarmonyExtension;","map":{"version":3,"sources":["../src/harmonyExtension.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HarmonyExtension = exports.ExtensionType = void 0;\nvar tslib_1 = require(\"tslib\");\nvar network_1 = require(\"@harmony-js/network\");\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar blockchain_1 = require(\"./blockchain\");\nvar contract_1 = require(\"@harmony-js/contract\");\n/** @hidden */\nvar ExtensionType;\n(function (ExtensionType) {\n    ExtensionType[\"MathWallet\"] = \"MathWallet\";\n    ExtensionType[\"OneWallet\"] = \"OneWallet\";\n})(ExtensionType = exports.ExtensionType || (exports.ExtensionType = {}));\nvar HarmonyExtension = /** @class */ (function () {\n    /**\n     * Create an blockchain instance support wallet injection\n     *\n     * @param wallet could be MathWallet or OneWallet instance\n     * @param config (optional), using default `Chain_Id` and `Chain_Type`\n     *\n     * @example\n     * ```javascript\n     * // Using Mathwallet instance\n     * export const initEx = async() => {\n     *   hmyEx = new HarmonyExtension(window.harmony);\n     * }\n     * // Using OneWallet instance\n     * export const initEx = async() => {\n     *   hmyEx = new HarmonyExtension(window.onewallet);\n     * }\n     * ```\n     */\n    function HarmonyExtension(wallet, config) {\n        if (config === void 0) { config = {\n            chainId: utils.defaultConfig.Default.Chain_ID,\n            chainType: utils.defaultConfig.Default.Chain_Type,\n        }; }\n        this.extensionType = null;\n        this.wallet = wallet;\n        // check if it is mathwallet or onewallet\n        this.isExtension(this.wallet);\n        if (wallet.messenger) {\n            this.provider = wallet.messenger.provider;\n            this.messenger = wallet.messenger;\n        }\n        else {\n            this.provider = new network_1.Provider(config.chainUrl || wallet.network.chain_url).provider;\n            this.messenger = new network_1.Messenger(this.provider, config.chainType, config.chainId);\n        }\n        this.wallet.messenger = this.messenger;\n        this.blockchain = new blockchain_1.Blockchain(this.messenger);\n        this.transactions = new transaction_1.TransactionFactory(this.messenger);\n        this.contracts = new contract_1.ContractFactory(this.wallet);\n        this.crypto = crypto;\n        this.utils = utils;\n    }\n    /**\n     * Will change the provider for its module.\n     *\n     * @param provider a valid provider, you can replace it with your own working node\n     *\n     * @example\n     * ```javascript\n     * const tmp = hmyEx.setProvider('http://localhost:9500');\n     * ```\n     */\n    HarmonyExtension.prototype.setProvider = function (provider) {\n        this.provider = new network_1.Provider(provider).provider;\n        this.messenger.setProvider(this.provider);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Change the Shard ID\n     *\n     * @example\n     * ```\n     * hmyEx.setShardID(2);\n     * ```\n     */\n    HarmonyExtension.prototype.setShardID = function (shardID) {\n        this.defaultShardID = shardID;\n        this.messenger.setDefaultShardID(this.defaultShardID);\n        this.setMessenger(this.messenger);\n    };\n    HarmonyExtension.prototype.isExtension = function (wallet) {\n        var _this = this;\n        var isExtension = false;\n        this.extensionType = null;\n        if (wallet.isMathWallet || wallet.isOneWallet) {\n            isExtension = true;\n            if (wallet.isMathWallet)\n                this.extensionType = ExtensionType.MathWallet;\n            else\n                this.extensionType = ExtensionType.OneWallet;\n            // remake signTransaction of MathWallet or OneWallet\n            var signTransaction_1 = this.wallet.signTransaction;\n            this.wallet.signTransaction = function (transaction, updateNonce, encodeMode, blockNumber) {\n                if (updateNonce === void 0) { updateNonce = true; }\n                if (encodeMode === void 0) { encodeMode = 'rlp'; }\n                if (blockNumber === void 0) { blockNumber = 'latest'; }\n                return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var extensionAccount, nonce;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.wallet.getAccount()];\n                            case 1:\n                                extensionAccount = _a.sent();\n                                if (!updateNonce) return [3 /*break*/, 3];\n                                return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetAccountNonce, [crypto.getAddress(extensionAccount.address).checksum, blockNumber], this.messenger.chainPrefix, typeof transaction.txParams.shardID === 'string'\n                                        ? Number.parseInt(transaction.txParams.shardID, 10)\n                                        : transaction.txParams.shardID)];\n                            case 2:\n                                nonce = _a.sent();\n                                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { from: crypto.getAddress(extensionAccount.address).bech32, nonce: Number.parseInt(utils.isHex(nonce.result.toString()) ? utils.hexToNumber(nonce.result.toString()) : nonce.result.toString(), 10) }));\n                                return [3 /*break*/, 4];\n                            case 3:\n                                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { from: crypto.getAddress(extensionAccount.address).bech32 }));\n                                _a.label = 4;\n                            case 4: return [2 /*return*/, signTransaction_1(transaction, false, encodeMode, blockNumber)];\n                        }\n                    });\n                });\n            };\n        }\n        if (!isExtension) {\n            throw new Error('Extension is not found');\n        }\n        return;\n    };\n    /**\n     * Get the wallet account\n     *\n     * @example\n     * ```javascript\n     * const account = hmyEx.login();\n     * console.log(account);\n     * ```\n     */\n    HarmonyExtension.prototype.login = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var account;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.wallet.getAccount()];\n                    case 1:\n                        account = _a.sent();\n                        // Use address\n                        return [2 /*return*/, account];\n                }\n            });\n        });\n    };\n    /**\n     * Log out the wallet account\n     *\n     * @example\n     * ```javascript\n     * hmyEx.logout();\n     * ```\n     */\n    HarmonyExtension.prototype.logout = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.wallet.forgetIdentity()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Set the sharding Structure\n     *\n     * @param shardingStructures The array of information of sharding structures\n     *\n     * @example\n     * ```javascript\n     * hmyEx.shardingStructures([\n     *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n     *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n     *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n     *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n     * ]);\n     * ```\n     */\n    HarmonyExtension.prototype.shardingStructures = function (shardingStructures) {\n        var e_1, _a;\n        try {\n            for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                var shard = shardingStructures_1_1.value;\n                var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                this.messenger.shardProviders.set(shardID, {\n                    current: shard.current !== undefined ? shard.current : false,\n                    shardID: shardID,\n                    http: shard.http,\n                    ws: shard.ws,\n                });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.setMessenger(this.messenger);\n    };\n    /**@ignore*/\n    HarmonyExtension.prototype.setMessenger = function (messenger) {\n        this.blockchain.setMessenger(messenger);\n        this.wallet.messenger = messenger;\n        this.transactions.setMessenger(messenger);\n    };\n    return HarmonyExtension;\n}());\nexports.HarmonyExtension = HarmonyExtension;\n//# sourceMappingURL=harmonyExtension.js.map"]},"metadata":{},"sourceType":"script"}