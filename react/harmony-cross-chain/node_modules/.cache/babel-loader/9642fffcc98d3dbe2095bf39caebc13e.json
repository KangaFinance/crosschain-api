{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneToEthErc20 = void 0;\n\nconst interfaces_1 = require(\"../interfaces\");\n\nconst logs_1 = require(\"../utils/logs\");\n\nconst operation_helpers_1 = require(\"../operation-helpers\");\n\nconst utils_1 = require(\"../utils\");\n\nexports.oneToEthErc20 = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n  let operation = await api.getOperation(operationParams.id);\n  let getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n\n  if (getHRC20Action) {\n    logs_1.logger.wait({\n      prefix,\n      message: 'getHRC20Address'\n    });\n  }\n\n  while (getHRC20Action && [interfaces_1.STATUS.IN_PROGRESS, interfaces_1.STATUS.WAITING].includes(getHRC20Action.status)) {\n    await utils_1.sleep(3000);\n    operation = await api.getOperation(operationParams.id);\n    getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n  }\n\n  const erc20TokenDetails = await ethMethods.tokenDetails(operationParams.erc20Address);\n  const hrc20Address = await hmyMethods.getMappingFor(operationParams.erc20Address);\n\n  if (!hrc20Address) {\n    throw new Error('hrc20Address not found');\n  }\n\n  const approveHmyManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveHmyManger);\n\n  if (approveHmyManger && approveHmyManger.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'approveHmyManger'\n    });\n    const res = await hmyMethods.approveHmyManger(hrc20Address, operationParams.amount, erc20TokenDetails.decimals, hash => operation_helpers_1.confirmCallback(api, hash, approveHmyManger.type, operationParams.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'approveHmyManger'\n    });\n  }\n\n  operation = await api.getOperation(operationParams.id);\n  const burnToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.burnToken);\n\n  if (burnToken && burnToken.status === interfaces_1.STATUS.WAITING) {\n    logs_1.logger.pending({\n      prefix,\n      message: 'burnToken'\n    });\n    const res = await hmyMethods.burnToken(hrc20Address, operationParams.ethAddress, operationParams.amount, erc20TokenDetails.decimals, hash => operation_helpers_1.confirmCallback(api, hash, burnToken.type, operationParams.id));\n    logs_1.logger.info({\n      prefix,\n      message: 'Status: ' + res.status\n    });\n    logs_1.logger.success({\n      prefix,\n      message: 'burnToken'\n    });\n  }\n\n  const unlockToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.unlockToken, maxWaitingTime, prefix);\n\n  if (!operation_helpers_1.checkStatus(unlockToken, prefix, interfaces_1.ACTION_TYPE.unlockToken)) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/borispolania/Documents/GitHub/crosschain-api/react/harmony-cross-chain/node_modules/bridge-sdk/lib/operations/oneToEthErc20.js"],"names":["Object","defineProperty","exports","value","oneToEthErc20","interfaces_1","require","logs_1","operation_helpers_1","utils_1","api","operationParams","ethMethods","hmyMethods","prefix","maxWaitingTime","operation","getOperation","id","getHRC20Action","getActionByType","ACTION_TYPE","getHRC20Address","logger","wait","message","STATUS","IN_PROGRESS","WAITING","includes","status","sleep","erc20TokenDetails","tokenDetails","erc20Address","hrc20Address","getMappingFor","Error","approveHmyManger","pending","res","amount","decimals","hash","confirmCallback","type","info","success","burnToken","ethAddress","unlockToken","waitAction","checkStatus"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneToEthErc20 = void 0;\nconst interfaces_1 = require(\"../interfaces\");\nconst logs_1 = require(\"../utils/logs\");\nconst operation_helpers_1 = require(\"../operation-helpers\");\nconst utils_1 = require(\"../utils\");\nexports.oneToEthErc20 = async (api, operationParams, ethMethods, hmyMethods, prefix, maxWaitingTime) => {\n    let operation = await api.getOperation(operationParams.id);\n    let getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n    if (getHRC20Action) {\n        logs_1.logger.wait({ prefix, message: 'getHRC20Address' });\n    }\n    while (getHRC20Action && [interfaces_1.STATUS.IN_PROGRESS, interfaces_1.STATUS.WAITING].includes(getHRC20Action.status)) {\n        await utils_1.sleep(3000);\n        operation = await api.getOperation(operationParams.id);\n        getHRC20Action = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.getHRC20Address);\n    }\n    const erc20TokenDetails = await ethMethods.tokenDetails(operationParams.erc20Address);\n    const hrc20Address = await hmyMethods.getMappingFor(operationParams.erc20Address);\n    if (!hrc20Address) {\n        throw new Error('hrc20Address not found');\n    }\n    const approveHmyManger = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.approveHmyManger);\n    if (approveHmyManger && approveHmyManger.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'approveHmyManger' });\n        const res = await hmyMethods.approveHmyManger(hrc20Address, operationParams.amount, erc20TokenDetails.decimals, (hash) => operation_helpers_1.confirmCallback(api, hash, approveHmyManger.type, operationParams.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'approveHmyManger' });\n    }\n    operation = await api.getOperation(operationParams.id);\n    const burnToken = operation_helpers_1.getActionByType(operation, interfaces_1.ACTION_TYPE.burnToken);\n    if (burnToken && burnToken.status === interfaces_1.STATUS.WAITING) {\n        logs_1.logger.pending({ prefix, message: 'burnToken' });\n        const res = await hmyMethods.burnToken(hrc20Address, operationParams.ethAddress, operationParams.amount, erc20TokenDetails.decimals, (hash) => operation_helpers_1.confirmCallback(api, hash, burnToken.type, operationParams.id));\n        logs_1.logger.info({ prefix, message: 'Status: ' + res.status });\n        logs_1.logger.success({ prefix, message: 'burnToken' });\n    }\n    const unlockToken = await operation_helpers_1.waitAction(api, operationParams.id, interfaces_1.ACTION_TYPE.unlockToken, maxWaitingTime, prefix);\n    if (!operation_helpers_1.checkStatus(unlockToken, prefix, interfaces_1.ACTION_TYPE.unlockToken)) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"script"}