"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationClass = void 0;
const index_1 = require("./index");
const utils_1 = require("./utils");
class OperationClass {
    constructor(sdk) {
        this.create = async (params) => {
            this.operation = await this.sdk.api.createOperation(params);
        };
        this.getOperationId = () => this.operation.id;
        this.restoreById = async (id) => {
            this.operation = await this.sdk.api.getOperation(id);
        };
        this.confirmAction = async (params) => {
            return await this.sdk.api.confirmAction(Object.assign(Object.assign({}, params), { operationId: this.operation.id }));
        };
        this.skipAction = async (actionType) => {
            return await this.sdk.api.confirmAction({
                actionType,
                transactionHash: 'skip',
                operationId: this.operation.id,
            });
        };
        this.waitOperationComplete = async () => {
            return new Promise(async (res, reject) => {
                try {
                    while (this.operation.status === index_1.STATUS.IN_PROGRESS ||
                        this.operation.status === index_1.STATUS.WAITING) {
                        this.operation = await this.sdk.api.getOperation(this.operation.id);
                        await utils_1.sleep(3000);
                    }
                    if (this.operation.status === index_1.STATUS.SUCCESS) {
                        res(this.operation);
                    }
                    else {
                        reject('Operation status: ' + this.operation.status);
                    }
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        this.waitActionComplete = async (actionType) => {
            return new Promise(async (res, reject) => {
                try {
                    const getAction = () => this.operation.actions.find(a => a.type === actionType);
                    while (getAction().status === index_1.STATUS.IN_PROGRESS || getAction().status === index_1.STATUS.WAITING) {
                        this.operation = await this.sdk.api.getOperation(this.operation.id);
                        await utils_1.sleep(3000);
                    }
                    if (getAction().status === index_1.STATUS.SUCCESS) {
                        res(this.operation);
                    }
                    else {
                        reject('Action status: ' + getAction().status);
                    }
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        this.sdk = sdk;
    }
}
exports.OperationClass = OperationClass;
