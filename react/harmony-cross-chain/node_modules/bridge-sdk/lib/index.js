"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeSDK = void 0;
const tslib_1 = require("tslib");
const OperationClass_1 = require("./OperationClass");
tslib_1.__exportStar(require("./interfaces"), exports);
tslib_1.__exportStar(require("./configs"), exports);
const api_1 = require("./api");
const eth_1 = require("./blockchain/eth");
const hmy_1 = require("./blockchain/hmy");
const operation_1 = require("./operation");
const interfaces_1 = require("./interfaces");
const logs_1 = require("./utils/logs");
class BridgeSDK {
    constructor(params) {
        this.init = async (params) => {
            this.api = new api_1.ValidatorsAPI(params.api);
            this.ethClient = eth_1.getWeb3Client(params.ethClient);
            this.bscClient = eth_1.getWeb3Client(params.binanceClient);
            this.hmyClient = await hmy_1.getHmyClient(Object.assign(Object.assign({}, params.hmyClient), { sdk: params.sdk }));
        };
        this.addOneWallet = async (privateKey) => {
            await this.hmyClient.addWallet(privateKey);
        };
        this.addEthWallet = async (privateKey) => {
            await this.ethClient.addWallet(privateKey);
            await this.bscClient.addWallet(privateKey);
        };
        this.setUseMetamask = (value) => {
            this.ethClient.setUseMetamask(value);
            this.bscClient.setUseMetamask(value);
        };
        this.setUseOneWallet = (value) => this.hmyClient.setUseOneWallet(value);
        this.setUseMathWallet = (value) => this.hmyClient.setUseMathWallet(value);
        this.sendToken = async (params, callback) => {
            return await operation_1.operation(Object.assign(Object.assign({}, params), { api: this.api, web3Client: params.network === interfaces_1.NETWORK_TYPE.BINANCE ? this.bscClient : this.ethClient, hmyClient: this.hmyClient, maxWaitingTime: params.maxWaitingTime || 20 * 60, network: params.network || interfaces_1.NETWORK_TYPE.ETHEREUM }), callback);
        };
        this.createOperation = async (params) => {
            const operation = new OperationClass_1.OperationClass(this);
            await operation.create(params);
            return operation;
        };
        this.restoreOperationById = async (id) => {
            const operation = new OperationClass_1.OperationClass(this);
            await operation.restoreById(id);
            return operation;
        };
        logs_1.logger.setLogLevel(params.logLevel);
    }
}
exports.BridgeSDK = BridgeSDK;
