import { EXCHANGE_MODE, IOperation, ITokenInfo, TOKEN } from '../interfaces';
export interface IAPIParams {
    validators: string[];
    threshold: number;
    assetServiceUrl: string;
}
export interface ICreateOperationParams {
    type: EXCHANGE_MODE;
    token: TOKEN;
    oneAddress: string;
    ethAddress: string;
    amount: number;
    erc20Address?: string;
}
interface IMintTokens {
    address: string;
    token: string;
}
export interface IConfirmActionParams {
    operationId: string;
    actionType: string;
    transactionHash: string;
}
export declare class ValidatorsAPI {
    servers: string[];
    assetServiceUrl: string;
    threshold: number;
    constructor(params: IAPIParams);
    callAvailableServer: (func: (url: string) => Promise<any>, server?: number) => Promise<any>;
    callActionN: (func: (url: string) => Promise<any>) => Promise<any>;
    callAction: (func: (url: string) => Promise<any>) => Promise<any>;
    createOperation: (params: ICreateOperationParams) => Promise<IOperation>;
    confirmAction: (params: IConfirmActionParams) => Promise<any>;
    getOperation: (id: string) => Promise<IOperation>;
    getOperations: (params: any) => Promise<{
        content: IOperation[];
    }>;
    getTokensInfo: (params: any) => Promise<{
        content: ITokenInfo[];
    }>;
    mintTokens: (params: IMintTokens) => Promise<{
        status: string;
        transactionHash: string;
        error: string;
    }>;
}
export {};
