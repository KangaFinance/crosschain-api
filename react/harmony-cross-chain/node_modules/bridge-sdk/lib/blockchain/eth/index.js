"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWeb3Client = void 0;
const tslib_1 = require("tslib");
const EthMethods_1 = require("./EthMethods");
const EthMethodsERC20_1 = require("./EthMethodsERC20");
const Web3 = require('web3');
const MyERC20_1 = tslib_1.__importDefault(require("../out/MyERC20"));
const LINKEthManager_1 = tslib_1.__importDefault(require("../out/LINKEthManager"));
const EthManagerERC20_1 = tslib_1.__importDefault(require("../out/EthManagerERC20"));
const EthManagerERC721_1 = tslib_1.__importDefault(require("../out/EthManagerERC721"));
exports.getWeb3Client = (params) => {
    let web3URL;
    try {
        web3URL = window.web3.currentProvider;
    }
    catch (e) {
        web3URL = params.nodeURL;
    }
    const web3 = new Web3(web3URL);
    let ethUserAccount;
    const { contracts, gasPrice = 100000000000, gasLimit = 150000, gasApiKey = '' } = params;
    const ethBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);
    const ethBUSDManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.busdManager);
    const ethLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);
    const ethLINKManagerContract = new web3.eth.Contract(LINKEthManager_1.default, contracts.linkManager);
    const ethMethodsBUSD = new EthMethods_1.EthMethods({
        web3: web3,
        ethTokenContract: ethBUSDContract,
        ethManagerContract: ethBUSDManagerContract,
        ethManagerAddress: contracts.busdManager,
        gasPrice,
        gasLimit,
        gasApiKey,
    });
    const ethMethodsLINK = new EthMethods_1.EthMethods({
        web3: web3,
        ethTokenContract: ethLINKContract,
        ethManagerContract: ethLINKManagerContract,
        ethManagerAddress: contracts.linkManager,
        gasPrice,
        gasLimit,
        gasApiKey,
    });
    const ethManagerContract = new web3.eth.Contract(EthManagerERC20_1.default, contracts.erc20Manager);
    const ethMethodsERC20 = new EthMethodsERC20_1.EthMethodsERC20({
        web3: web3,
        ethManagerContract: ethManagerContract,
        ethManagerAddress: contracts.erc20Manager,
        gasPrice,
        gasLimit,
        gasApiKey,
    });
    const ethManagerContractERC721 = new web3.eth.Contract(EthManagerERC721_1.default, contracts.erc721Manager);
    const ethMethodsERС721 = new EthMethodsERC20_1.EthMethodsERC20({
        web3: web3,
        ethManagerContract: ethManagerContractERC721,
        ethManagerAddress: contracts.erc721Manager,
        gasPrice,
        gasLimit,
        gasApiKey,
    });
    const getEthBalance = (ethAddress) => {
        return new Promise((resolve, reject) => {
            web3.eth.getBalance(ethAddress, (err, balance) => {
                if (err) {
                    reject(err);
                }
                resolve(String(Number(balance) / 1e18));
            });
        });
    };
    return {
        addWallet: async (privateKey) => {
            ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);
            web3.eth.accounts.wallet.add(ethUserAccount);
            web3.eth.defaultAccount = ethUserAccount.address;
        },
        web3,
        getEthBalance,
        ethMethodsBUSD,
        ethMethodsLINK,
        ethMethodsERC20,
        ethMethodsERС721,
        getUserAddress: () => ethUserAccount && ethUserAccount.address,
        setUseMetamask: (value) => {
            ethMethodsBUSD.setUseMetamask(value);
            ethMethodsLINK.setUseMetamask(value);
            ethMethodsERC20.setUseMetamask(value);
        },
    };
};
