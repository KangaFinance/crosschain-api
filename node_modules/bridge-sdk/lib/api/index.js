"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidatorsAPI = void 0;
const tslib_1 = require("tslib");
const agent = tslib_1.__importStar(require("superagent"));
const utils_1 = require("../utils");
class ValidatorsAPI {
    constructor(params) {
        this.servers = [];
        this.threshold = 2;
        this.callAvailableServer = async (func, server = 0) => {
            let error;
            for (let i = server; i < this.servers.length; i++) {
                try {
                    return await func(this.servers[i]);
                }
                catch (e) {
                    error = e;
                }
            }
            throw error;
        };
        this.callActionN = async (func) => {
            let error;
            let confirmSuccess = 0;
            let res;
            for (let i = 0; i < this.servers.length; i++) {
                try {
                    res = await func(this.servers[i]);
                    confirmSuccess++;
                }
                catch (e) {
                    error = e;
                }
            }
            if (confirmSuccess >= Number(this.threshold)) {
                return res;
            }
            throw error;
        };
        this.callAction = async (func) => {
            let error;
            const res = await Promise.all(this.servers.map(async (url) => {
                try {
                    return await func(url);
                }
                catch (e) {
                    error = e;
                    return false;
                }
            }));
            const success = res.filter(r => !!r);
            if (success.length >= Number(this.threshold)) {
                return success[0];
            }
            throw error;
        };
        this.createOperation = async (params) => {
            const id = utils_1.uuid();
            return this.callAction(async (url) => {
                const res = await agent.post(url + '/operations', Object.assign(Object.assign({}, params), { id }));
                return res.body;
            });
        };
        this.confirmAction = async (params) => {
            return this.callAction(async (url) => {
                const res = await agent.post(`${url}/operations/${params.operationId}/actions/${params.actionType}/confirm`, { transactionHash: params.transactionHash });
                return res.body;
            });
        };
        this.getOperation = async (id) => {
            return this.callAvailableServer(async (url) => {
                const res = await agent.get(url + '/operations/' + id);
                return res.body;
            });
        };
        this.getOperations = async (params) => {
            return this.callAvailableServer(async (url) => {
                const res = await agent.get(url + '/operations/', params);
                return res.body;
            });
        };
        this.getTokensInfo = async (params) => {
            const res = await agent.get(this.assetServiceUrl + '/tokens/', params);
            const content = res.body.content;
            return Object.assign(Object.assign({}, res.body), { content });
        };
        this.mintTokens = async (params) => {
            const res = await agent.post(`${this.servers[0]}/get-token`, params);
            return res.body;
        };
        this.servers = params.validators || [];
        this.assetServiceUrl = params.assetServiceUrl || '';
        this.threshold = params.threshold || 2;
    }
}
exports.ValidatorsAPI = ValidatorsAPI;
