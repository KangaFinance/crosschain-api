"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HmyMethodsWeb3 = void 0;
const utils_1 = require("../utils");
const crypto_1 = require("@harmony-js/crypto");
const BN = require('bn.js');
class HmyMethodsWeb3 {
    constructor(params) {
        this.useMetamask = false;
        this.setUseOneWallet = (value) => value;
        this.setUseMathWallet = (value) => value;
        this.setUseMetamask = (value) => (this.useMetamask = value);
        this.approveHmyManger = async (amount, sendTxCallback) => {
            let accounts;
            if (this.useMetamask) {
                accounts = await ethereum.enable();
            }
            const transaction = await this.hmyTokenContract.methods
                .approve(this.hmyManagerContractAddress, utils_1.withDecimals(amount, 18))
                .send({
                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,
                gasLimit: 6721900,
                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),
            })
                .on('transactionHash', sendTxCallback);
            return transaction;
        };
        this.burnToken = async (userAddr, amount, sendTxCallback) => {
            let accounts;
            if (this.useMetamask) {
                accounts = await ethereum.enable();
            }
            const userAddrHex = crypto_1.getAddress(userAddr).checksum;
            const transaction = await this.hmyManagerContract.methods
                .burnToken(utils_1.withDecimals(amount, 18), userAddrHex)
                .send({
                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,
                gasLimit: 6721900,
                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),
            })
                .on('transactionHash', sendTxCallback);
            return transaction;
        };
        this.checkHmyBalance = async (addr) => {
            return await this.hmyTokenContract.methods.balanceOf(crypto_1.getAddress(addr).checksum).call();
        };
        this.totalSupply = async () => {
            return await this.hmyTokenContract.methods.totalSupply().call();
        };
        this.web3 = params.hmy;
        this.hmyTokenContract = params.hmyTokenContract;
        this.hmyManagerContract = params.hmyManagerContract;
        this.hmyManagerContractAddress = params.hmyManagerContractAddress;
    }
}
exports.HmyMethodsWeb3 = HmyMethodsWeb3;
