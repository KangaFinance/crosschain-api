import Web3 from 'web3';
import { Contract } from 'web3-eth-contract';
interface IHmyMethodsInitParams {
    hmy: Web3;
    hmyManagerContract: Contract;
    hmyManagerContractAddress: string;
    options?: {
        gasPrice: number;
        gasLimit: number;
    };
}
export declare class HmyMethodsERC20Web3 {
    private hmy;
    private hmyManagerContract;
    private hmyManagerContractAddress;
    private useMetamask;
    constructor(params: IHmyMethodsInitParams);
    setUseOneWallet: (value: boolean) => boolean;
    setUseMathWallet: (value: boolean) => boolean;
    setUseMetamask: (value: boolean) => boolean;
    approveHmyManger: (hrc20Address: string, amount: number, decimals: number, sendTxCallback?: (hash: string) => void) => Promise<any>;
    burnToken: (hrc20Address: string, userAddr: string, amount: number, decimals: number, sendTxCallback?: (hash: string) => void) => Promise<any>;
    getMappingFor: (erc20TokenAddr: string) => Promise<any>;
    checkHmyBalance: (hrc20Address: string, addr: string) => Promise<any>;
    totalSupply: (hrc20Address: string) => Promise<any>;
    setApprovalForAll: (hrc20Address: string, sendTxCallback?: (hash: string) => void) => Promise<any>;
    burnTokens: (hrc20Address: string, userAddr: string, amount: number | number[], sendTxCallback?: (hash: string) => void) => Promise<any>;
}
export {};
