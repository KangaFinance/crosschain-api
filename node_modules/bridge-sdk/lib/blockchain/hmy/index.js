"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHmyClient = void 0;
const tslib_1 = require("tslib");
const web3_1 = tslib_1.__importDefault(require("web3"));
const HmyMethods_1 = require("./HmyMethods");
const HmyMethodsWeb3_1 = require("./HmyMethodsWeb3");
const HmyMethodsERC20_1 = require("./HmyMethodsERC20");
const HmyMethodsERC20Web3_1 = require("./HmyMethodsERC20Web3");
const { Harmony } = require('@harmony-js/core');
const { ChainType } = require('@harmony-js/utils');
const MyERC20_1 = tslib_1.__importDefault(require("../out/MyERC20"));
const LINKHmyManager_1 = tslib_1.__importDefault(require("../out/LINKHmyManager"));
const HmyManagerERC20_1 = tslib_1.__importDefault(require("../out/HmyManagerERC20"));
const HmyManagerERC721_1 = tslib_1.__importDefault(require("../out/HmyManagerERC721"));
const HmyDeposit_1 = tslib_1.__importDefault(require("../out/HmyDeposit"));
const HmyMethodsDepositWeb3_1 = require("./HmyMethodsDepositWeb3");
const HmyMethodsDeposit_1 = require("./HmyMethodsDeposit");
exports.getHmyClient = async (params) => {
    const hmy = new Harmony(params.nodeURL, {
        chainType: ChainType.Harmony,
        chainId: Number(params.chainId),
    });
    const { contracts } = params;
    let userAddress;
    let hmyMethodsLINK, hmyMethodsBUSD, hmyMethodsERC20, hmyMethodsERC721, hmyMethodsDeposit;
    const web3 = new web3_1.default(params.nodeURL);
    if (params.sdk === 'web3') {
        const hmyBUSDContract = new web3.eth.Contract(MyERC20_1.default, contracts.busd);
        const hmyBUSDManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.busdManager);
        const hmyLINKContract = new web3.eth.Contract(MyERC20_1.default, contracts.link);
        const hmyLINKManagerContract = new web3.eth.Contract(LINKHmyManager_1.default, contracts.linkManager);
        const hmyManagerContract = new web3.eth.Contract(HmyManagerERC20_1.default, contracts.erc20Manager);
        const hmyDepositContract = new web3.eth.Contract(HmyDeposit_1.default, contracts.depositManager);
        hmyMethodsDeposit = new HmyMethodsDepositWeb3_1.HmyMethodsDepositWeb3({
            hmy: web3,
            hmyTokenContract: hmyBUSDContract,
            hmyManagerContract: hmyDepositContract,
            hmyManagerContractAddress: contracts.depositManager,
        });
        hmyMethodsBUSD = new HmyMethodsWeb3_1.HmyMethodsWeb3({
            hmy: web3,
            hmyTokenContract: hmyBUSDContract,
            hmyManagerContract: hmyBUSDManagerContract,
            hmyManagerContractAddress: contracts.busdManager,
        });
        hmyMethodsLINK = new HmyMethodsWeb3_1.HmyMethodsWeb3({
            hmy: web3,
            hmyTokenContract: hmyLINKContract,
            hmyManagerContract: hmyLINKManagerContract,
            hmyManagerContractAddress: contracts.linkManager,
        });
        hmyMethodsERC20 = new HmyMethodsERC20Web3_1.HmyMethodsERC20Web3({
            hmy: web3,
            hmyManagerContract: hmyManagerContract,
            hmyManagerContractAddress: contracts.erc20Manager,
        });
    }
    else {
        const hmyDepositContract = hmy.contracts.createContract(HmyDeposit_1.default, contracts.depositManager);
        const hmyBUSDContract = hmy.contracts.createContract(MyERC20_1.default, contracts.busd);
        const hmyBUSDManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.busdManager);
        const hmyLINKContract = hmy.contracts.createContract(MyERC20_1.default, contracts.link);
        const hmyLINKManagerContract = hmy.contracts.createContract(LINKHmyManager_1.default, contracts.linkManager);
        const hmyManagerContract = hmy.contracts.createContract(HmyManagerERC20_1.default, contracts.erc20Manager);
        const hmyManagerERC721Contract = hmy.contracts.createContract(HmyManagerERC721_1.default, contracts.erc721Manager);
        hmyMethodsBUSD = new HmyMethods_1.HmyMethods({
            hmy: hmy,
            hmyTokenContract: hmyBUSDContract,
            hmyManagerContract: hmyBUSDManagerContract,
        });
        hmyMethodsDeposit = new HmyMethodsDeposit_1.HmyMethodsDeposit({
            hmy: hmy,
            hmyTokenContract: hmyBUSDContract,
            hmyManagerContract: hmyDepositContract,
        });
        hmyMethodsLINK = new HmyMethods_1.HmyMethods({
            hmy: hmy,
            hmyTokenContract: hmyLINKContract,
            hmyManagerContract: hmyLINKManagerContract,
        });
        hmyMethodsERC20 = new HmyMethodsERC20_1.HmyMethodsERC20({
            hmy: hmy,
            hmyManagerContract: hmyManagerContract,
        });
        hmyMethodsERC721 = new HmyMethodsERC20_1.HmyMethodsERC20({
            hmy: hmy,
            hmyManagerContract: hmyManagerERC721Contract,
        });
    }
    return {
        addWallet: async (privateKey) => {
            if (params.sdk === 'web3') {
                const ethUserAccount = await web3.eth.accounts.privateKeyToAccount(privateKey);
                web3.eth.accounts.wallet.add(ethUserAccount);
                web3.eth.defaultAccount = ethUserAccount.address;
                userAddress = ethUserAccount.address;
            }
            else {
                const account = await hmy.wallet.addByPrivateKey(privateKey);
                userAddress = account.address;
            }
        },
        getUserAddress: () => userAddress,
        hmyMethodsBUSD,
        hmyMethodsLINK,
        hmyMethodsERC20,
        hmyMethodsERC721,
        hmyMethodsDeposit,
        getBech32Address: address => hmy.crypto.getAddress(address).bech32,
        getHmyBalance: address => hmy.blockchain.getBalance({ address }),
        setUseOneWallet: (value) => {
            if (params.sdk === 'web3') {
                hmyMethodsBUSD.setUseMetamask(value);
                hmyMethodsLINK.setUseMetamask(value);
                hmyMethodsERC20.setUseMetamask(value);
            }
            else {
                hmyMethodsBUSD.setUseOneWallet(value);
                hmyMethodsLINK.setUseOneWallet(value);
                hmyMethodsERC20.setUseOneWallet(value);
            }
        },
        setUseMathWallet: (value) => {
            if (params.sdk === 'web3') {
                hmyMethodsBUSD.setUseMetamask(value);
                hmyMethodsLINK.setUseMetamask(value);
                hmyMethodsERC20.setUseMetamask(value);
            }
            else {
                hmyMethodsBUSD.setUseMathWallet(value);
                hmyMethodsLINK.setUseMathWallet(value);
                hmyMethodsERC20.setUseMathWallet(value);
            }
        },
    };
};
