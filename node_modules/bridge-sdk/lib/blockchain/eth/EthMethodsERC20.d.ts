import { Contract } from 'web3-eth-contract';
import Web3 from 'web3';
export interface IEthMethodsInitParams {
    web3: Web3;
    ethManagerContract: Contract;
    ethManagerAddress: string;
    gasPrice: number;
    gasLimit: number;
    gasApiKey: string;
}
export declare class EthMethodsERC20 {
    private web3;
    private ethManagerContract;
    private ethManagerAddress;
    private useMetamask;
    gasPrice: number;
    gasLimit: number;
    gasApiKey: string;
    constructor(params: IEthMethodsInitParams);
    setUseMetamask: (value: boolean) => boolean;
    approveEthManger: (erc20Address: string, amount: number, decimals: number, sendTxCallback?: (hash: string) => void) => Promise<any>;
    lockToken: (erc20Address: string, userAddr: string, amount: number, decimals: number, sendTxCallback?: (hash: string) => void) => Promise<any>;
    checkEthBalance: (erc20Address: string, addr: string) => Promise<any>;
    tokenDetails: (erc20Address: string) => Promise<{
        name: any;
        symbol: any;
        decimals: any;
        erc20Address: string;
    }>;
    setApprovalForAllEthManger: (erc20Address: string, sendTxCallback?: (hash: string) => void) => Promise<any>;
    lockTokens: (erc20Address: string, userAddr: string, amount: number | number[], sendTxCallback?: (hash: string) => void) => Promise<any>;
    tokenDetailsERC721: (erc20Address: string) => Promise<{
        name: any;
        symbol: any;
        erc20Address: string;
    }>;
}
