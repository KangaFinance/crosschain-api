"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthMethods = void 0;
const crypto_1 = require("@harmony-js/crypto");
const utils_1 = require("../utils");
const BN = require('bn.js');
class EthMethods {
    constructor(params) {
        this.useMetamask = false;
        this.setUseMetamask = (value) => (this.useMetamask = value);
        this.approveEthManger = async (amount, sendTxCallback) => {
            let accounts;
            if (this.useMetamask) {
                accounts = await ethereum.enable();
            }
            return await this.ethTokenContract.methods
                .approve(this.ethManagerAddress, utils_1.withDecimals(amount, 18))
                .send({
                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,
                gas: this.gasLimit,
                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),
            })
                .on('transactionHash', (hash) => sendTxCallback(hash));
        };
        this.lockToken = async (userAddr, amount, sendTxCallback) => {
            let accounts;
            if (this.useMetamask) {
                accounts = await ethereum.enable();
            }
            const hmyAddrHex = crypto_1.getAddress(userAddr).checksum;
            const transaction = await this.ethManagerContract.methods
                .lockToken(utils_1.withDecimals(amount, 18), hmyAddrHex)
                .send({
                from: this.useMetamask ? accounts[0] : this.web3.eth.defaultAccount,
                gas: this.gasLimit,
                gasPrice: new BN(await this.web3.eth.getGasPrice()).mul(new BN(1)),
            })
                .on('transactionHash', (hash) => sendTxCallback(hash));
            return transaction;
        };
        this.checkEthBalance = async (addr) => {
            return await this.ethTokenContract.methods.balanceOf(addr).call();
        };
        this.web3 = params.web3;
        this.ethManagerContract = params.ethManagerContract;
        this.ethTokenContract = params.ethTokenContract;
        this.ethManagerAddress = params.ethManagerAddress;
        this.gasPrice = params.gasPrice;
        this.gasLimit = params.gasLimit;
        this.gasApiKey = params.gasApiKey;
    }
}
exports.EthMethods = EthMethods;
